Class inherited ЗарплатаСтандарт.Алгоритмы.Начисления.Произвольные.Ставка_Дни "ПНВЛ за месяц (%ВЛ*ОДС/100)";

  Import Первичка;
  Import ЗарплатаСтандарт;
  Import      Classes Константы;
  Import      Classes РаботаСКартотеками   ;

InClass  Public

  var LogTrace :Logical = Истина; --Match(Сотрудник.Код, "Ф.0000065");     --ФОЕ--

  ---------------------------------------------------------
  var ТипРасчета       :спрТипРасчета = спрТипРасчета.Надбавка;
  ---------------------------------------------------------
  var ЗаголовокПоля1   :String = "%ВЛ" + Chr(13) + "(за месяц)";
  var ЗаголовокПоля2   :String = "ОДС"   ;
  var ЗаголовокПоля3   :String = "Сумма" ;
  var locПоле1         :Numeric;
  var locПоле2         :Numeric;
  var locПоле3         :Numeric;
  var locВыслугаТабл   : Число[2];
  var locВыслугаПроц   :Число;

  var  ВЫСЛУГАНАД      :Дата;
  var  ЛЕТ             :Целое;
  var  МЕСЯЦЕВ         :Целое;
  var  ДНЕЙ            :Целое;


  ---------------------------------------------------------

  func CreateEx(const аРеквизит :Вычислители.Реквизит):Алгоритмы.Начисления.Специальные.ПНВЛ;
    Result = inherited CreateEx(аРеквизит);
  end;

InObject Public
  ---ПНВЛ--- РАСЧЕТ
  ---ПНВЛ--- РАСЧЕТ
  ---ПНВЛ--- РАСЧЕТ

  Функ ПолучитьТаблицуПНВЛ(ДатН:Дата):Запись;
    Перем Зап :Запись;
     --ФОЕ--   РабОбл=ОткрытьРабочуюОбласть("ПНВЛ","ДАТНАЧИСП","ДАТНАЧИСП<="+ДатуВСтроку(ДатН));
     Зап = ВзятьПоследнююЗаписьКартотеки("Zik_Гарнец.Справочники.ПНВЛ","ДАТНАЧИСП","ДАТНАЧИСП<=" +  ВСтр (ДатН) ); --После введения Специальной Выслуги необходимо различать
    Возврат Зап;
  Кнуф;

  Функ РасчетПНВЛПоСредней(Таблица :Запись; ДатН :Дата; ДатК :Дата):Число;
    Перем ПроцН,ПроцК,Проп :Число;
    Перем Дат1,ДатПред :Дата;

    ПроцН = РасчетПНВЛ (Таблица,ДатН);
    ПроцК = РасчетПНВЛ (Таблица,ДатК);
    Если ПроцН=ПроцК:
      Возврат ПроцК;
    Иначе
      Дат1    = ДатН;
      ДатПред = ДатН;
      Пока Дат1<=ДатК Цикл
        ПроцК = РасчетПНВЛ(Таблица,Дат1);
        Если ПроцН<>ПроцК:
          Проп   = Проп+ПроцН*(((Дат1)-ДатПред));
          ПроцН  = ПроцК;
          ДатПред=Дат1;
        Илсе;
        Дат1=Дат1+1;
      Лкиц;
      Проп = Проп+ПроцН*(((Дат1)-ДатПред));
    Илсе;
    Возврат Проп/((ДатК+1)-ДатН);
  Кнуф;

  Функ РасчитатьПНВЛ(Сотр :Запись; ВидНачисления :Запись; ДатН :Дата; ДатК :Дата):Число;
    Перем Метод :Целое;
    Перем РабОблСотр :Запись;
    Перем ПНВЛ       :Запись;
    --Перем ВидНач     :Запись;
    --Перем Метод :Целое;
      РабОблСотр = ВзятьПоследнююЗаписьКартотеки("Zik_Гарнец.Справочники.Сотр_Выслуга", "ВЫСЛУГАНАД", "(Сотр="+Стр(Сотр)+") и (ВЫСЛУГАНАД<="+Стр(ДатК)
                                                                                                                        +") и (ВидНачисления<="+Стр(ВидНачисления)+")" );
      Если РабОблСотр<>Nil:
        ПНВЛ        = РабОблСотр.ПНВЛ;
        locВыслугаТабл = (Вычислить(ПНВЛ.ТаблВСтроку) как Число[2]);
        Если locВыслугаТабл<>Пусто :
          Метод      = РабОблСотр.Метод;
          ВЫСЛУГАНАД = РабОблСотр.ВЫСЛУГАНАД;
          ЛЕТ        = РабОблСотр.ВЫСЛУГАЛ;
          МЕСЯЦЕВ    = РабОблСотр.ВЫСЛУГАМ;
          ДНЕЙ       = РабОблСотр.ВЫСЛУГАД;
          --ПНВЛ       = РабОблСотр.ПНВЛ;
          --ВидНач     = РабОблСотр.ВидНачисления;

          Если Метод=0:                                          --ПоСредней
            locВыслугаПроц = РасчетПНВЛПоСредней(ПНВЛ, ДатН, ДатК);
          ЕслиЖе Метод=1:                                        --На ДатНачала
            locВыслугаПроц = РасчетПНВЛ(ПНВЛ,ДатН);
          ЕслиЖе Метод=2:                                        --На ДатКонца
            locВыслугаПроц = РасчетПНВЛ(ПНВЛ,ДатК);
          Илсе;
        Иначе
          Трассировка("В картотеке ПНВЛ нет таблиц для расчета");
        Илсе;
      Иначе
        Трассировка("У сотрудника "+ СОТРУДНИК.Имя +" нет данных о ПНВЛ!");
      Илсе;
      if LogTrace then
        trace  (СОТРУДНИК.Имя + " (% ВЛ ="+Стр(locВыслугаПроц)+ ") " );
      end;
    Возврат Окр(locВыслугаПроц,3);
  Кнуф;

  Функ ПолучитьСреднДнейВГоду(ДатН:Дата; ДатК:Дата):Число;
    Перем Дней :Число;
    Перем Итер,КолЛет,ГодН :Целое;
      ГодН=Год(ДатН)-1;
      КолЛет=Если((Год(ДатК)-Год(ДатН))>0,Год(ДатК)-Год(ДатН),Если((Год(ДатК)-Год(ДатН))=0,1,Год(ДатН)-Год(ДатК)));
      Для Итер=1..КолЛет Цикл
        Дней=Дней+(Дат(1,1,ГодН+Итер+1)-Дат(1,1,ГодН+Итер));
      Лкиц;
    Возврат Дней/КолЛет;
  Кнуф;

  Функ РасчетЛет(Дат1:Дата):Число;
  -- ??? Если выслуга лет указывается на дату, то включать эту дату в выслугу или не включать. Пока сделал что-бы включалась.
  --Второй вариант не включает дату.
    Возврат Год(Дат1)-Год(ВЫСЛУГАНАД)+(Мес(Дат1)-Мес(ВЫСЛУГАНАД))/12+(День(Дат1)-(День(ВЫСЛУГАНАД)))/ПолучитьСреднДнейВГоду(Дат1,ВЫСЛУГАНАД);
  --  Возврат Год(Дат1)-Год(ВЫСЛУГАНАД)+(Мес(Дат1)-Мес(ВЫСЛУГАНАД))/12+(День(Дат1)-(День(ВЫСЛУГАНАД)-1))/ПолучитьСреднДнейВГоду(Дат1,ВЫСЛУГАНАД);
  Конец;

  Функ РасчетПроцПНВЛ(Таблица :Запись; Выслуга:Число):Число;
    Перем Итер :Целое;
        Если Выслуга <= 0:
          Возврат 0;
        Илсе;

          Для Итер=1.. ДлинаМассива(locВыслугаТабл) Цикл
            Если locВыслугаТабл[Итер,1] <= Выслуга:
                 locВыслугаПроц = locВыслугаТабл[Итер,2];
            Илсе;
          Лкиц;

    Возврат locВыслугаПроц;
  Кнуф;

  Функ РасчетПНВЛ(Таблица :Запись; Дат1 :Дата):Число;
    Перем СрДнГ :Число;
    Перем ЛетВ :Число;
          ЛетВ = РасчетЛет(Дат1);
          СрДнГ= ПолучитьСреднДнейВГоду (Дат(1,1,Год(ВЫСЛУГАНАД)-ЛЕТ),ВЫСЛУГАНАД);
    Возврат РасчетПроцПНВЛ (Таблица, ЛЕТ+МЕСЯЦЕВ/12+ДНЕЙ/СрДнГ + ЛетВ);
  Кнуф;
  ---ПНВЛ--- РАСЧЕТ
  ---ПНВЛ--- РАСЧЕТ
  ---ПНВЛ--- РАСЧЕТ


  func УсловиеВыполнения:Logical;
    Result = ((Реквизит.ПостНачисление <> nil or Реквизит.КоличествоПостНачислений = 0) and  Реквизит.ЗависимыеНачисления > 0);
  end;

  func Расчет_Показатель1 :Numeric;
    -- Отработанное время считаем только для первого дубля, остальное вручную

    locПоле1 = РасчитатьПНВЛ(Сотрудник, Record, ДатаНачПериода , ДатаКонПериода);

    Result = if(НомерДубля = 1, locПоле1, nil);   --locПоле1   Реквизит.locВыслугаПроц
  end;

  func Расчет_Показатель2 :Numeric;
    Result = Реквизит.ЗависимыеНачисления;
  end;

  func Расчет_Показатель3 :Numeric;
    if НормаЗаМесяц = 0 then
      -- Получение нормы дней за месяц при вводе количества дней вручную или для дублей > 1
      --Реквизит.ОтработаноДней(НормаЗаМесяц);
      Return(Round(Реквизит.Показатель1*Реквизит.Показатель2/100, Реквизит.Точность));
    end;
  end;

InObject Private

  var НормаЗаМесяц  :Numeric;

  func ЗаполнитьНастройки :Logical;
    Result       = inherited ЗаполнитьНастройки;
    НормаЗаМесяц = nil;
  end;

End