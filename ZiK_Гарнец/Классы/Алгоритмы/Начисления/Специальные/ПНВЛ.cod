Class inherited ЗарплатаСтандарт.Алгоритмы.Начисления.Произвольные.Ставка_Дни "Помесячный оклад в днях (Оклад*ДниРаб/ДниМес)";

  Import Первичка;
  Import ЗарплатаСтандарт;
  Import          Classes Константы;

InClass  Public

  ---------------------------------------------------------
  var ТипРасчета       :спрТипРасчета = спрТипРасчета.Надбавка;
  ---------------------------------------------------------
  var ЗаголовокПоля1   :String        = "%ВЛ" + Chr(13) + "(за месяц)";
  var ЗаголовокПоля2   :String        = "ОДС"   ;
  var ЗаголовокПоля3   :String        = "Сумма" ;
  ---------------------------------------------------------

  func CreateEx(const аРеквизит :Вычислители.Реквизит):Алгоритмы.Начисления.Специальные.ПНВЛ;
    Result = inherited CreateEx(аРеквизит);
  end;

InObject Public

  func УсловиеВыполнения:Logical;
    Result = ((Реквизит.ПостНачисление <> nil or Реквизит.КоличествоПостНачислений = 0) and (Реквизит.Оклад <> nil or Реквизит.Показатель2 > 0));
  end;

  func Расчет_Показатель1 :Numeric;
    -- Отработанное время считаем только для первого дубля, остальное вручную
    Result = if(НомерДубля = 1, Реквизит.locВыслугаПроц, nil);
  end;

  func Расчет_Показатель2 :Numeric;
    Result = Реквизит.ЗависимыеНачисления;
  end;

  func Расчет_Показатель3 :Numeric;
    if НормаЗаМесяц = 0 then
      -- Получение нормы дней за месяц при вводе количества дней вручную или для дублей > 1
      --Реквизит.ОтработаноДней(НормаЗаМесяц);
      Return(Round(Реквизит.Показатель1*Реквизит.Показатель2/100, Реквизит.Точность));
    end;
  end;

InObject Private

  var НормаЗаМесяц  :Numeric;

  func ЗаполнитьНастройки :Logical;
    Result       = inherited ЗаполнитьНастройки;
    НормаЗаМесяц = nil;
  end;

End