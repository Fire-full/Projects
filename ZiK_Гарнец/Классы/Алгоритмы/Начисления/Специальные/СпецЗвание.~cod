Class inherited ЗарплатаСтандарт.Алгоритмы.Начисления.Произвольные.Ставка_Дни "Оклад по Ученой степени/званию в днях (Оклад*ДниРаб/ДниМес)";

  Import Первичка;
  Import ЗарплатаСтандарт;
  Import      Classes Алгоритмы.расчетЗвания, Константы;
  Import СИС2 Classes СтроковыеФункции, ФункцииДокумента;

InClass  Public

  ---------------------------------------------------------
  var ТипРасчета       :спрТипРасчета = спрТипРасчета.Оклад;
  ---------------------------------------------------------
  var ЗаголовокПоля2   :String        = "Звание" + Chr(13) + "(за месяц)";
  ---------------------------------------------------------

  func CreateEx(const аРеквизит :Вычислители.Реквизит):Алгоритмы.Начисления.Специальные.СпецЗвание;
    Result = inherited CreateEx(аРеквизит);
  end;

InObject Public

---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ
---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ
---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ
  var locКатегСотр   : String = Если(Интерфейс.Перемещения=Nil,"", UP(Интерфейс.Перемещения[ИндексСотрудника].КатегорияДолжности.Код) );
  var locЗваниеЕсть  : Logical;
  var locЗваниеНаим  : String ;
  var locЗваниеОклад : Число  ;
  var locОклад       : Число  ;
  var locЗваниеДАТА  : Дата   ;
  var locЗваниеЗап   : Zik_Гарнец.Справочники.Звания;

--  field ТипЗаписи        :Integer      title "Тип Записи";    --0...1-Спец. Звание, 2-Ученая Степень, 3-Ученое Звание

  func ПолучитьЗвание :Zik_Гарнец.Справочники.Звания;     --ЗВАНИЯ
     var Q   : Query;
     var Тек : Запись;

        Q = Query.Create([Zik_Гарнец.Справочники.Сотр_Звания]);
        Q.OpenHint[Query.IgnoreRecordFilter] = True;
        Q.Order  = "СОТР.Имя;ДАТАПРИСВОЕНИЯ";
        Q.Filter = СложитьСтрокиФильтраПоИ([
                                          "ДАТАПРИСВОЕНИЯ<=" + Str(ДатаКонПериода),
                                          "СОТР="            + Str(Сотрудник     )
                                          ]);   --"ДАТАПРИСВОЕНИЯ<=31.01.2015" и "СОТР={Базовый.Данные.Субъект:95}"
        if Q.RecordsExists then
          Q.Select;
          --Q.Last;  --Последнюю запись
          Пока НЕ Q.EOF ЦИКЛ
            Тек = Q.Current;
            if Валидный(Тек) then
              if Тек.ЗВАНИЕ.ТипЗаписи in [0,1] then  --0...1-Спец. Звание
                locЗваниеЗап   = Тек.ЗВАНИЕ;     --(Zik_Гарнец.Справочники.интСотр_Звания.OpenRecord(Q.Current as Zik_Гарнец.Справочники.Сотр_Звания))
                locЗваниеНаим  = Тек.ЗВАНИЕ.Имя    ;
                locЗваниеОклад = Тек.ЗВАНИЕ.ОКЛАД  ;
                locЗваниеДАТА  = Тек.ЗВАНИЕ.ДАТАОВЗ;
                locОклад       = ОкладЗваниеЗаПериод(Тек.ЗВАНИЕ, ДатаНачПериода, ДатаКонПериода);
                Return locЗваниеЗап;
              end;
            end;
            Q.Next;
          end;
        end;

  end;
  -----------------------------------------
        --Для внешнего вызова
        --Для внешнего вызова
        --Для внешнего вызова
  func ПолучитьЗапЗваниеНаДату (Сотр:Базовый.Данные.Субъект; НаДату: Дата ):Zik_Гарнец.Справочники.Звания;     --ЗВАНИЯ

       if ДатаКонПериода=Nil then
         ДатаКонПериода = НаДату;
         ПолучитьЗвание ;
         Return locЗваниеЗап;
       end;

  end;
  func ПолучитьИмяЗванияНаДату (Сотр:Базовый.Данные.Субъект; НаДату: Дата ): String;     --Доктор технических наук

       if ДатаКонПериода=Nil then
         ДатаКонПериода = НаДату;
         ПолучитьЗвание ;
         Return locЗваниеНаим;
       end;
  end;
        --Для внешнего вызова
        --Для внешнего вызова
        --Для внешнего вызова
---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ
---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ
---УЧЕНЫЕ ЗВАНИЯ/СТЕПЕНИ

  func УсловиеВыполнения:Logical;
    Result = ((Реквизит.ПостНачисление <> nil or Реквизит.КоличествоПостНачислений = 0) and (Реквизит.Оклад > 0 or Реквизит.Показатель2 > 0));
  end;

  func Расчет_Показатель1 :Numeric;
    -- Отработанное время считаем только для первого дубля, остальное вручную
    Result = if(НомерДубля = 1, Реквизит.ОтработаноДней(НормаЗаМесяц), nil);
  end;

  func Расчет_Показатель2 :Numeric;
      locЗваниеЕсть = ЗваниеЕсть(Сотрудник, ДатаКонПериода);
      if locЗваниеЕсть then
        ПолучитьЗвание;
        Result = locЗваниеОклад;
      Иначе
        Result = 0;
      end;
  end;

  func Расчет_Показатель3 :Numeric;
    if НормаЗаМесяц = 0 and (Реквизит.вводПоказатель1 or НомерДубля > 1) then
      -- Получение нормы дней за месяц при вводе количества дней вручную или для дублей > 1
      Реквизит.ОтработаноДней(НормаЗаМесяц);
    end;
    if НормаЗаМесяц > 0 then
      if locЗваниеЕсть then
        Реквизит.Показатель2 = locЗваниеОклад;
        Return(Round(Реквизит.Показатель1*Реквизит.Показатель2/НормаЗаМесяц, Реквизит.Точность));
      end;
    end;
  end;

InObject Private

  var НормаЗаМесяц  :Numeric;

  func ЗаполнитьНастройки :Logical;
    Result       = inherited ЗаполнитьНастройки;
    НормаЗаМесяц = nil;
  end;

End