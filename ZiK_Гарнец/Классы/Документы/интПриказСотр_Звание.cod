Class inherited МашинаРеквизитов.Базовые.интЗапись "Интерфейс: Документы.ЗапПриказЗвание";

  Import СИС2     Classes Функции, СтроковыеФункции, ФункцииДокумента;
  Import Первичка Classes Константы, Функции, Библио, Нумератор;
  Import          Classes Константы;

InClass Public

  ---------------------------------------------------------
  -- func СвязанныйКлассЗаписей : Class СИС2.Базовая.БазоваяЗапись;
  func СвязанныйКлассЗаписей : Class Документы.ЗапПриказЗвание;
    Result = Документы.ЗапПриказЗвание;
  end;

  func Create : Документы.интПриказСотр_Звание;
    Result        = inherited Create;
    Result.Record = Документы.ЗапПриказЗвание.Create;
  end;

  func ОткрытьПоЗаписи synonym OpenRecord( aRec :Документы.ЗапПриказЗвание ) : Документы.интПриказСотр_Звание;
    Result        = inherited Create;
    Result.Record = aRec;
  end;

  -- функция возвращает бланк-редактор записи по умолчанию
  func БланкРедакторПоУмолчанию : Class BlankForm;
    -- Result = Справочники.редСотр_Выслуга;
  end;

  func БланкРедакторПоЗаписи (aRecord :Record) : Class BlankForm;
    if aRecord<>nil then
--      if    aRecord.ТипЗаписи in [0, 1] then Result = Справочники.редСотр_Выслуга;
----      elsif aRecord.ТипЗаписи = 2       then Result = Справочники.редСотр_Выслуга;
----      elsif aRecord.ТипЗаписи = 3       then Result = Справочники.редСотр_Выслуга;
--
--      end;
    else
      Result = БланкРедакторПоУмолчанию;
    end;
  end;

  -- функция возвращает картотеку записи по умолчанию
  func КартотекаПоУмолчанию : Class CardForm;
    Result = Документы.КартДокументСотр_Звание;
  end;

  func КартотекаПоЗаписи (aRecord :Record) : Class CardForm;
    if aRecord<>nil then
--      if    aRecord.ТипЗаписи in [0, 1] then Result = Документы.КартДокументСотр_Выслуга;
----      elsif aRecord.ТипЗаписи = 2       then Result = Справочники.картСотр_Выслуга;
----      elsif aRecord.ТипЗаписи = 3       then Result = Справочники.картСотр_Выслуга;
--
--      end;
    else
      Result = КартотекаПоУмолчанию;
    end;
  end;

InClass Private

InObject Public

  Record :Документы.ЗапПриказЗвание;

  proc Инициализировать synonym Init(аИмя  :String = 'Документ о присвоении звания ';
                                     аКод  :String = '');
    Assert(Record.State = Kernel.Record.Created);

    ЗаполнитьНомерДокумента2 (["Код"]);

    Record.Дата = Today;

    with Record do
      if Имя = '' then
        Имя = аИмя + " от " + Стр(Today()) + " № " + Код;       --Record.Код
      end;
      if Код = '' then
        if аКод <> '' then
          Код = аКод;
        end;
      end;
      КодФилиала = ПолучитьКодФилиала;
      УровеньКонфиденциальности = ПолучитьУровеньКонфидПоУмолчанию;
      Modified = False;
    end;
  end;

  proc ИнициализироватьПоУмолчанию synonym InitByDefault;
    Init;
  end;

InObject Private

  -- Переменные для заполнения параметров нумерации по умолчанию...
  var Нумератор_Способы[]      :Integer   = [снДокумент_Последовательно];
  var Нумератор_ПоляНумерации[]:String    = ["Код"];
  --------------------------------------------------------------------
  proc ДействияПередЗаписью;

    inherited ДействияПередЗаписью;

--    Первичка.Базовые.интБазовыйВидРасчета.СброситьКэширование;
--    Record.GroupDoc = ГруппаДляЭлементаПоЗаписи(локДобавлено);
--    if локДобавлено then
      ЗаполнитьНомерДокумента2 (["Код"]);
--    end;
  end;
  ---------------------------------------------------------
  ---------------------------------------------------------



End
