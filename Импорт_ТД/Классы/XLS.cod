class "Для работы с XLS файлами";

Import Classes СписокКартотек ;
Import Classes СтроковыеФункции ;

Import СИС2 Classes ExcelObject ;

inclass  Public

Перем Excel          : AutoObject;
Перем НашаКнигаXLS   : AutoObject;
Перем АктивWorkSheet : AutoObject;

СтрокиПоиска      : Целое  ;
Столбцов          : Целое  ;
ЗначениеЗадержки  : Число  ;
АктивныхКнигXLS   : Целое  ;
НомерНашейКнигиXLS: Целое  ;
FullName          : Строка ;

МассивXLS   []    : Вариант;  -- 1. Имена Листов

Перем просматривать :Логическое; --Все действия с файлом нам не видны!
Перем Visible       :Логическое = Если(просматривать,Истина,Ложь); -- Не открывать для просмотра
Перем DisplayAlerts :Логическое = Если(просматривать,Истина,Ложь); -- Не Показать Оповещения на экран

------------------------------------------------------------------------------------------
--Из Дельфи
func ExcelChar синоним НомерКолонкиВXLSформате (Num: Integer): string;
var  S: string;
var  I: Целое;
var  От : Число;
var  Отб: Число;
  S = "" ;
  От  = Num / 26  ;
  Отб = Отбр(От)  ;
  I   = Цел( Отб ) ;
  if Num > 26 then
      if От = Отб then  -- Делимое на 26 без остатка (52, 78, ...)
         I = I - 1;
      fi;
      S = Chr(I + 64) + Chr(Num - (I * 26) + 64) ;
  else
    S = Chr(Num + 64) ;
  fi;
  Result = S ;
end;
------------------------------------------------------------------------------------------
--Обратная  "ExcelChar"  Важно!!! Работает до "ZZ"!!!!!
func CharFromExcel синоним НомерКолонкиИзXLSформата (Буква: string) : Integer;
  var  S  : string;
  var  I  : Целое;

  var  X  : Integer;
  var  Z  : Integer;

    Z = Length(Буква);
    S = Буква;
    X = 0;
    if Z = 1 then
      X = Ord( S )-64;
    else
      для  I= Z..1  ШАГ -1 цикл
        if I = 1 then
          S   = SubStr(Буква, 1, 1);
          X = X  + (Ord( S )-64) * 26 ;
        else
          S = SubStr(Буква, I,1);
          X = Ord( S )-64 ;
        fi;
      конец;
    fi;
  Result = X ;
end;
--Из Дельфи
------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------
Функ ВзятьЗначениеЯчейки ( Страница: AutoObject; Колонка_: Целое; Строка_: Целое ) : Вариант;   --        Откуда              Границы
    Результат =  Страница.Cells.Item[ Строка_, Колонка_ ].Value ;
конец;
------------------------------------------------------------------------------------------
2--Ищем первое число в диапазоне
Функ ПолучитьСумму(Cells: AutoObject; X: Целое; Y: Целое) : Число ;
2 Перем YY, XX    : Целое;
2    Для YY = 1..Y цикл
2       Для XX = 1..X цикл
2         --Result = Cells.Item[ YY , X ].Value ;
2         Result = ВзятьЗначениеЯчейки (Cells, XX, YY) ;
2         Если ЯвляетсяЧислом (Result) Тогда
2           Прервать;
2         Илсе;
2       Лкиц;
2    Лкиц;
2End;
--------------------------------------------------------------------------------
--Так как с Массивами работать быстрее чем со строкой типа: "AutoObject.Страница.Cells.Item[ Строка_, Колонка_ ].Value"
--Все в Массив!!!
                --   Границы                Откуда                          Куда
Функ ЗаполнитьМассив(X: Целое; Y: Целое; WorkSheet:AutoObject; Перем RangeMatrix[2]:Вариант ):Вариант;
  Перем Стр    : Вариант;
  Перем YY, XX : Целое;

   for YY = 1 ..  Y   do         -- строки
      for XX = 1 .. X do         -- столбы
         -- Возможно имеет смысл здесь приводить всJ к Тип "Строка"
         -- а далее, в момент записи в картотеку переводить к нужному типу из Строки
         Стр = ВСтр( ВзятьЗначениеЯчейки( WorkSheet, XX, YY) ) ;
--         Стр = ВСтр( WorkSheet.Cells.Item[ YY, XX ].Value ) ;
         RangeMatrix [ XX, YY ] = Стр;
         Задержка(ЗначениеЗадержки); --Отдаем ресурсы другим приложениям
      end;
   end;
конец;
------------------------------------------------------------------------------------------
функ СоздатьДиапазонДляXLS(ВерхЛев :Строка; Нач :Целое; НижнПрав :Строка ; Кон:Целое ):Строка ;
  Перем ДиапазонПоиска, Адрес1, Адрес2 :Строка;
    если Нач = 0 тогда
      Сообщение ("Диапазон поиска в XLS-файле неопределен!");
      Результат = "" ;
    конец;
    если Кон = 0 тогда
      Сообщение ("Диапазон поиска в XLS-файле неопределен!");
      Результат = "" ;
    конец;
    Адрес1 = Стр(Нач); Адрес2 = Стр(Кон);  --Ищем КОНЕЦ СДЕЛОК по Инструменту в диапазоне...
    ДиапазонПоиска  = ВерхЛев+Адрес1+':'+НижнПрав+Адрес2 ;         --Диапазон Поиска -
    Результат = ДиапазонПоиска ;
конец;
------------------------------------------------------------------------------------------
 -- Значение типа - "$A$81" в номер Строки - "81"
функ ПолучитьНомерСтрокиИзАдресаЯчейкиXLS( firstAddress :Вариант ):Целое ;
 Перем  ДО ,От : Целое;
     If firstAddress = NIL Then
        HINT("Получить Номер Строки Из Адреса Ячейки XLS - неудалось! Адрес = NIL!");
        Результат = 0 ;
     Иначе
        ДО = Длина(firstAddress);
        От = Поз("$" ,ПодСтр(firstAddress,2, ДО ))+2 ;
        Результат = Цел( ПодСтр(firstAddress, От , ДО )   ) ;
     End ;
конец;
---------------------------------------------------------------------------------------
 -- Значение типа - "$A$81" номер Колонки - "A"
функ ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( firstAddress :Вариант ) : Строка ;
 Перем  Д, ДО, I, X  : Целое;
     If firstAddress = NIL Then
        HINT("Получить Букву Колонк Из Адреса Ячейки XLS - неудалось! Адрес = NIL!");
        Результат = "" ;
     Иначе
        Д   = Длина(firstAddress);
        X   = Поз("$", firstAddress) ;
        If X=0 Then
          для I = 1..Д цикл
            If ПодСтр(firstAddress,I, 1) in ["0","1","2","3","4","5","6","7","8","9"] Then
              Результат = ПодСтр(firstAddress, 1, I-1) ;
              Прервать;
            конец;
          конец;
        Иначе
          ДО        = Поз("$", ПодСтр(firstAddress,2, Д ))-1;  -- "A$81"
          Результат = ПодСтр(firstAddress, 2 , ДО ) ;           -- "A"
        End ;
     End ;
конец;
---------------------------------------------------------------------------------------
Функ ВзятьXLSАдресИскомого  ( ЧегоИщем : Вариант;  ВКакомДиапазоне : Строка; Где :AutoObject=Nil) : Строка ;
  Перем  ActiveCell, firstAddress : Вариант;
    If Где=Nil  Then
      Где=АктивWorkSheet;
    End ;
    If Где=Nil Then
        ActiveCell = АктивWorkSheet.Range[ ВКакомДиапазоне ].Find( ЧегоИщем );
        If ActiveCell = NIL Then
          firstAddress = "";
        Иначе
          firstAddress = ActiveCell.Address;
        End ;
      Результат = firstAddress;
    Иначе
        Попытка
          ActiveCell = Где.Range[ ВКакомДиапазоне ].Find( ЧегоИщем );         -- Где.Range[ ВКакомДиапазоне ].Value
          If ActiveCell = NIL Then
            firstAddress = "";
            Трассировка("Ошибка поиска строки: '"+ЧегоИщем);
          Иначе
            firstAddress = ActiveCell.Address;
          End ;
        Исключение
           Трассировка("[Код:'ВзятьXLSАдресИскомого'] Ошибка определения диапазона поиска для строки: '"+ЧегоИщем);
        Конец;
      Результат = firstAddress;
    End ;

Конец;
---------------------------------------------------------------------------------------
Функ ПроверкаСоответствияДанныхФормату (Нач: Целое;  Кон: Целое; Перем Array [2]:Вариант; Перем WorkSheet:AutoObject = NIL) :Логическое ;
  Перем  ActiveCell, firstAddress : Вариант;
  Перем  Рез                      : Логическое;
  Перем  I, Z                     : Целое ;
  Перем  Стр, Стр2, Диапазон      : Строка ;

    If WorkSheet = NIL Then
       WorkSheet = АктивWorkSheet;
    End ;
    Стр  = "" ;
    Стр2 = "" ;
    Рез  = Истина ;
    Z    = ДлинаМассива(Array[1]) ;
    для I = 1.. Z цикл
        Стр      = Array[2,I];
        Диапазон = СоздатьДиапазонДляXLS(Стр, Нач, Array[2,Z], Кон);
        firstAddress = ВзятьXLSАдресИскомого  ( Array [1,I] , Диапазон , WorkSheet) ;  -- Что, Где, ВДиапазоне
        If firstAddress = "" Then
          Рез = Ложь ;
        Иначе
          Стр2   = ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( firstAddress ) ;
          If Стр = Стр2 Then
          Иначе
           Рез = Ложь ;
           Прервать;
          End ;
        End ;
    конец;
    Результат = Рез ;
конец;
---------------------------------------------------------------------------------------
Функ ОткрытьДоступКФайлуXLS(FileName:Строка; Перем Excel_ :AutoObject = nil):AutoObject;

  -------
    если Отрезать(FileName)="" тогда
      Результат = nil;
    Иначе
      Попытка
        If Excel_=nil Then
        Иначе
          Excel = Excel_;
        End;
        НашаКнигаXLS = Excel.Workbooks.Open(FileName);
        Трассировка("Открытие файла - "+FileName+"...");
      окончание
        Результат = Excel;
        Трассировка("Файл - '"+FileName+"'... не существует.");
      конец;
    конец;
  -------

конец;
------------------------------------------------------------------------------------------
Перем wdAlertsNone             :Целое = 0;
---------------------------------------------------------------------------------------
Функ СоздатьXLS_Файл : AutoObject;
 Перем I :Целое;
 Перем Filename :Строка;
 Перем Workbook  : AutoObject;

-- Методов у объекта Workbook также очень много, однако значения самых употребимых
-- Activate(), Close(), Save(), SaveAs(), PrintOut(), Protect() и Unprotect() 
-- очевидны и действуют аналогично одноименным методам объекта Document в Word.
--Excel.Workbooks.Open ("c:\1\My.xls")
--Excel.Workbooks.Add();
--Excel.WorkBooks.Close;
--Excel.Workbooks[1].FullName ;
--Excel.Workbooks[1].Save ;
--Excel.Workbooks[2].Path ; --  =  "С:"
--Filename = Excel.GetOpenFilename("Excel Files (*.xls), *.xls");
--Filename = Excel.GetSaveAsFilename("Мой", "Excel Files (*.xls), *.xls", ,"Имя файла моего!");

--M=Application.International(20)
--Y=Application.International(19)
--S1=Application.International(4)
--S2=Application.International(3)
--WorkSheet.Range(WorkSheet.Cells(j,8), WorkSheet.Cells(i-1,8)).NumberFormat = M+M+M+"-"+Y+Y
--WorkSheet.Range(WorkSheet.Cells(j,7), WorkSheet.Cells(i-1,7)).NumberFormat = "#"+S1+"##0"+S2+"00"

  Excel = AutoObject.Create ('Excel.Application') ;

  Excel.DisplayAlerts =  wdAlertsNone  ;
  Workbook = Excel.Workbooks.Add();

  Excel.Visible = Истина; -- открывать для просмотра
  Excel.SheetsInNewWorkBook = 10;
  if ( ЕстьФайл ("C:\Книга1.xls") ) then
    попытка
      RemoveFile("C:\Книга1.xls");
    Исключение
      Workbook.Close("C:\Книга1.xls");
      RemoveFile("C:\Книга1.xls");
    end;
  end;
  Workbook.SaveAs("C:\Книга1.xls");
  WorkBook.Activate ;

  FileName = Workbook.Name   ;
  FullName = Workbook.FullName  ;

  Результат = Workbook ;
конец;
------------------------------------------------------------------------------------------
Функ Create : Импорт_ТД.XLS;

  Excel               = AutoObject.Create ('Excel.Application') ;
  Excel.Visible       = Visible ; -- Не открывать для просмотра
  Excel.DisplayAlerts = DisplayAlerts ;
  НашаКнигаXLS        = Excel.Workbooks.Add();

конец;
------------------------------------------------------------------------------------------
Функ  ИменаЛистовНашейКниги (Перем Книга_ :AutoObject = NIL ) : Строка [];
 Перем I,Z :Целое;
    МассивXLS = Nil ;
    If Книга_ = nil Then
      Книга_ = НашаКнигаXLS;
    End;
    Z = КоличествоЛистовВКниге( Книга_ ) ;
    для I = 1..Z цикл
      МассивXLS[I] = ИмяЛистаПоНомеру( I,  Книга_) ;
    конец;
   Результат = МассивXLS;
Конец;
---------------------------------------------------------------------------------------
Функ  НомерНашейКниги ( ПолныйПуть : Строка ):Целое;
 Перем I :Целое;
    для I = 1..АктивныхКнигXLS цикл
      Если Excel.Workbooks[I].FullName  =  ПолныйПуть Тогда   -- "C:\x5CКнига1.xlsx"
        ПРЕРВАТЬ;
      Илсе;
    конец;
    НомерНашейКнигиXLS = I ;
    Результат = НомерНашейКнигиXLS ;
Конец;
---------------------------------------------------------------------------------------
Функ  КоличествоКнигXLS :Целое;
   АктивныхКнигXLS = Excel.Workbooks.Count;  --Количество Книг
   Результат       = АктивныхКнигXLS ;
Конец;
---------------------------------------------------------------------------------------
Функ  КоличествоЛистовВКниге Синоним SheetsCount ( Excel_ :AutoObject ): Целое ;
    If Excel_=nil Then
    Иначе
      Excel = Excel_;
    End;
   Результат = Excel.WorkSheets.Count;  --Количество Листов в Книге
 --  Результат = Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets.Count;  --Количество Листов в Книге
Конец;
---------------------------------------------------------------------------------------
Функ  ДобавитьЛистВКнигу ( НомерНашейКнигиXLS:Целое ):Логическое;
 Перем Рез :Логическое;
  попытка
    --Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets.Add () ;
    АктивWorkSheet = Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets.Add () ;
    Рез = true;
  Исключение
    АктивWorkSheet = NIL;
    Рез = Ложь;
  конец;
   Результат = Рез;
Конец;
---------------------------------------------------------------------------------------
Функ  УдЛистВКниге (Y : Целое = 0; Перем НашаКнига:Целое = 0):Логическое;
 Перем Рез :Логическое;
  попытка
    Если Y = 0 тогда
      Excel.Workbooks[НашаКнига].WorkSheets[1].Delete;  --
    Иначе
      Excel.Workbooks[НашаКнига].WorkSheets[Y].Delete;  --
    Конец;
    Рез = true;
  Исключение
    Рез = Ложь;
  конец;
  Результат = Рез;
Конец;
---------------------------------------------------------------------------------------
-- По-умолчанию - ПЕРВЫЙ!
Функ АктивироватьЛистНомер( Y : Целое = 0; Перем Excel_ :AutoObject = NIL) : AutoObject;

   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
   Если Y = 0 тогда
     Excel.WorkSheets[1].Activate  ;
     Результат = Excel.WorkSheets[1];
  --   Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets[1].Activate  ;
  --   Результат = Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets[1];
   Иначе
     Excel.WorkSheets[Y].Activate  ;   --Excel.Workbooks[1].Name    =  "Книга1"
                                       --Excel.Workbooks[2].Path    =  "С:"
     Результат = Excel.WorkSheets[Y];
  --   Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets[Y].Activate  ;   --Excel.Workbooks[1].Name    =  "Книга1"
  --                                     --Excel.Workbooks[2].Path    =  "С:"
  --   Результат = Excel.Workbooks[НомерНашейКнигиXLS].WorkSheets[Y];
   Конец;
   АктивWorkSheet = Результат;

Конец;
---------------------------------------------------------------------------------------
-- По-умолчанию - ПЕРВЫЙ!
функ НомерЛистаПоИмени(Name : Строка; Перем Excel_ :AutoObject = NIL): Целое;
 Перем I, Z :Целое;

   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
    Z = Excel.WorkSheets.Count;
    для I = 1.. Z цикл
      Если Excel.WorkSheets[I].Name = Name Тогда
        Результат = I;
        ПРЕРВАТЬ;
      Илсе;
    конец;
Конец;
---------------------------------------------------------------------------------------
функ ИмяЛистаПоНомеру(N : Целое = 0; Перем Excel_ :AutoObject = NIL): Строка;
 Перем Стр : Строка ;
   Стр = "" ;
   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
   Если N = 0 тогда
     Стр = Excel.WorkSheets[1].Name ;
   Иначе
     Стр = Excel.WorkSheets[N].Name ;
   Конец;
  Результат = Стр;
Конец;
---------------------------------------------------------------------------------------
Проц ПрисвоитьИмяЛистуНомер(Name: Строка; Номер: Целое = 0; Перем Excel_ :AutoObject = NIL);
  Перем Лист : AutoObject;
   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
   Лист = АктивироватьЛистНомер( Номер, Excel);
   Лист.Name = Name;
Цорп;
---------------------------------------------------------------------------------------
Функ ЗакрытьКнигу (Excel_ :AutoObject):Логическое;
   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
  Excel.Workbooks.Close; -- Остается оболочка "Excel"
конец;
---------------------------------------------------------------------------------------
Функ ЗакрытьExcel (Excel_ :AutoObject):Логическое;
   If Excel_ = nil Then
     --Нет проверки на  "Excel = nil"
   Иначе
      Excel = Excel_;
   End;
  Excel.Quit;       -- Закрывается оболочка
  Excel = Nil;      -- Обнуление всю и вся!
конец;
---------------------------------------------------------------------------------------
inobject

end