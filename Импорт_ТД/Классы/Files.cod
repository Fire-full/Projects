class "Для работы с файлами и папками";

Import Classes  Переменные ;
Import СИС2 Classes Файл;

inclass  Public
--Начало Public
--Начало Public
--Начало Public

СохранитьВФайл             : Логическое = Истина ; -- Логическое поле для сохранения в файл трассировки. Используется для определения ошибок, отладки.
Отладка                    : Логическое = Истина ;
СохранитьВСистемномЖурнале : Логическое = Истина ; -- Логическое поле для сохранения в файл трассировки. Используется для определения ошибок, отладки.
ТекстовыйФайл              : TextFile ;
ПолныйПутьКФайлу           : Строка   ;
ФайлИмя                    : Строка   ;
ФайлРасширение             : Строка   ;
ФайлРазмер                 : Целое    ;
ФайлДата                   : Дата     ;
ФайлАтрибут                : Integer  ;

Files[]     : Строка ;
FindOnly [] : РежимыПоискаФайлов ;
--ИскатьРекурсивно/RecursiveFind - поиск с подкаталогами; если данный режим не указан, поиск ведется только в указанном каталоге;
--ИскатьТолькоФайлы/FindOnlyFiles - поиск только файлов;         FindOnly [1] = FindOnlyFiles ;  -- 2
--ИскатьТолькоКаталоги/FindOnlyFolders - поиск только каталогов;
МаскаФайлов : Строка ;                   -- "*.*"

рфСоздать   : РежимыФайлов ;
--Для работы с файловой системой используются следующие процедуры и функции из класса Система:
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
функ СистемнаяПапка( СистКод: Целое) : Строка;
  var objShell      : AutoObject;
  var objFolder     : AutoObject;
  var objFolderItem : AutoObject;
  var Текст         : Строка;

    objShell      = AutoObject.Create ("Shell.Application");
    objFolder     = objShell.Namespace( СистКод );
    objFolderItem = objFolder.Self;

    Текст         = objFolderItem.Path;

    objShell      = Nil;
    objFolder     = Nil;
    objFolderItem = Nil;

  ВОЗВРАТ Текст;
конец;
--------------------------------------------------------------------------------
функ ВременнаяПапкаПользователя   :Строка ;

  var objShell      : AutoObject ;
  var objFolder     : AutoObject ;
  var objFolderItem : AutoObject ;
  var Текст         : Строка     ;
    objShell  = AutoObject.Create ("Shell.Application") ;
    objFolder = objShell.Namespace( ssfLOCALAPPDATA ) ; --  objShell.
    if (objFolder = nil) then
      ЗаписатьВСистемныйЖурнал ( leWarning , "В проекте нет значения - 'ssfLOCALAPPDATA'." );
      ВОЗВРАТ "" ;
    Иначе
      objFolderItem = objFolder.Self   ;
      Текст = objFolderItem.Path+"\Temp"    ;
    Илсе;

    objShell       = Nil ;
    objFolder      = Nil ;
    objFolderItem  = Nil ;

  ВОЗВРАТ Текст ;
конец;
--------------------------------------------------------------------------------
функ INTERNET_CACHE :Строка ;

  var objShell      : AutoObject ;
  var objFolder     : AutoObject ;
  var objFolderItem : AutoObject ;
  var Текст         : Строка     ;

    objShell  = AutoObject.Create ("Shell.Application") ;                -- или
    --objShell  = AutoObject.OpenOrCreate("Shell.Application", ИСТИНА);  -- или
    objFolder = objShell.Namespace(ssfINTERNETCACHE) ;
    if (objFolder = nil) then
      ЗаписатьВСистемныйЖурнал ( leWarning , "В проекте нет значения - 'ssfINTERNETCACHE'." );
      ВОЗВРАТ "" ;
    Иначе
       objFolderItem = objFolder.Self   ;
       Текст         = objFolderItem.Path+"\Temp";
    Илсе;

    objShell       = Nil ;
    objFolder      = Nil ;
    objFolderItem  = Nil ;

  ВОЗВРАТ Текст ;
конец;
--------------------------------------------------------------------------------
Проц ЗаписатьВСистемныйЖурнал (Inform :  ТипыСобытийЖурнала ; SS :Строка ) ;

--      тсИнформация / leInformation  = 4  - общая информация для справки;
--      тсПредупреждение / leWarning  = 2  - предупреждение о некритическом событии;
--      тсОшибка / leError            = 1  - запись о критическом событии.

  LogEvent(Inform, SS) ;
Цорп;
--------------------------------------------------------------------------------
func СинхронизироватьФайлы( aSource, aDest :String ) :Logical;
    var locDate1, locDate2 :Date;    var locSize1, locSize2 :Integer;    var locAttrib          :Integer;
    if not ExistFile(aSource) then
      Сообщение('Файл ' + aSource + ' не найден или к нему нет доступа.');
    end ;
    GetFileInfo(aSource, locSize1, locDate1, locAttrib);
    Result = not ExistFile(aDest);
    if not Result then
      GetFileInfo(aDest, locSize2, locDate2, locAttrib);
      Result = (locSize1 <> locSize2) or (locDate1 <> locDate2);
    end;
    if Result then
       CopyFile(aSource, aDest);
       SetFileDate(aDest, locDate1);
    end;
end;
--------------------------------------------------------------------------------
функ ВыбратьТабличныйФайл :Строка;
  var SS : Строка;
  var Рез : Целое;
  Рез = ВыборФайла(SS, "Выберите файл табличных данных...",
                       "Книга Excel 2003(*.xls)          |*.xls|"  +
                       "Книга Excel 2007 и старше(*.xlsx)|*.xlsx|" +
                       "Таблица OpenDoc(*.ods)           |*.ods|"  +
                       "Текст с разделителями(*.csv)     |*.csv|"  +
                       "dBase III(*.dbf)                 |*.dbf|"  +
                       "Текстовый документ(*.txt)        |*.txt"
                       ) ;
  if ( Рез = кмдВерно) then
    ФайлРасширение   = ВыделитьРасширениеФайла(SS);
    ПолныйПутьКФайлу = SS;
    ФайлИмя          = ВыделитьИмяФайла(SS);
    GetFileInfo(SS, ФайлРазмер, ФайлДата, ФайлАтрибут);
    ВОЗВРАТ SS;
  fi;
конец;
--------------------------------------------------------------------------------
функ OpenFileForRead Синоним ОткрытьФайл  ( SS:Строка ) : TextFile;
     if  ЕстьФайл (SS)  then
       ТекстовыйФайл = TextFile.Create(SS, рфСоздать);  -- Открыли исходный и из него читаем!!!
     Илсе;
  ВОЗВРАТ ТекстовыйФайл ;
конец;
--------------------------------------------------------------------------------
функ  CreateNewFiles Синоним СоздатьНовыйФайл ( Что:Строка ) :TextFile;
  ВОЗВРАТ TextFile.Create(Что, рфСоздать);  --Создали новый и в него пишем!!!
конец;
--------------------------------------------------------------------------------
функ GetListFiles Синоним СписокФайлов (FolderName :String) : Логическое;   -- ТипФайла = "*.*"  --; Перем ТипФайла:String = ""
  -- выводим список всех файлов из каталога
    Files = NIL;
    Если МаскаФайлов = "" тогда
       МаскаФайлов = "*.*" ;
    конец;

    Files = GetFileList(FolderName, МаскаФайлов , [FindOnlyFiles]);
    Если LengthOfArray ( Files ) = 0 тогда
      ВОЗВРАТ Ложь;
    Иначе
      ВОЗВРАТ Истина;
    конец;
Кнуф;
--------------------------------------------------------------------------------
функ ЭтоФайл  (lName :String)  : Логическое;
  if ( ЕстьФайл (lName) ) then
    Результат = Истина;
  end;
Кнуф;
--------------------------------------------------------------------------------
функ ЭтоПапка  (lName :String)  : Логическое;
  if ( ЕстьПапка (lName) ) then
    Результат = Истина;
  end;
Кнуф;
--------------------------------------------------------------------------------
функ NameFile Синоним ИмяФайла (SS : Строка) : Строка;
  var I                  :Целое;
        I = CharPos("\/", SS, -1 );
        ФайлИмя = ПодСтр(SS,I+1);
    ВОЗВРАТ ФайлИмя ;
Кнуф;
--------------------------------------------------------------------------------
функ ВыборКаталога Синоним SelectDir (ЗаголовокОкнаВыбора : Строка) :Строка;
  var SS : Строка;
  var Рез : Целое;
  SS = "" ;
  Рез = ВыборПапки(SS, ЗаголовокОкнаВыбора ) ;
  if ( Рез = кмдВерно) then
    ВОЗВРАТ SS ;
  Иначе
    Сообщение("Необходимо выбрать каталог!") ;
    SS = SelectDir (ЗаголовокОкнаВыбора);
  fi;
   ВОЗВРАТ SS ;
Кнуф;
--------------------------------------------------------------------------------
Проц ВыводСообщения (Inform : ТипыСобытийЖурнала ; SS :Строка ) ; -- Inform - Важность (4,2,1), SS - Строка Сообщения
  if Отладка then
    if  СохранитьВФайл  then
        if ТекстовыйФайл = Nil then
          ТекстовыйФайл = CreateNewFiles ( ПолныйПутьКФайлу );
          -- если файл существует, открыть его на редактирование
          ТекстовыйФайл.ЗаписатьСтроку( SS );
        Иначе
         if (ЕстьФайл (ПолныйПутьКФайлу))  then
          ТекстовыйФайл.ЗаписатьСтроку( SS );
         end;
        end;
    Иначе
       Трассировка(SS);
    fi;
    if СохранитьВСистемномЖурнале then
       ЗаписатьВСистемныйЖурнал (Inform, SS) ;
    fi;
  fi;
Цорп;
--------------------------------------------------------------------------------
--Конец  Public
--Конец  Public
--Конец  Public
inobject
--Начало object

--Конец  object
end