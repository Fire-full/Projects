Class inherited МашинаРеквизитов.Базовые.редБазовыйДокумент 'Бланк соответствия полей', editor Импорт_ТД.Импорт_ТД.запСоответствиеПолей;

Import                  Classes СписокКартотек, XLS, SQL, Files, Переменные;

Import СИС2             Classes Функции,функцииртти;   --ТУТ СТАНДАРТНЫЕ СПОСОБЫ ПОЛУЧЕНИЯ сЕКЦИЙ, сТРОКсЕКЦИЙ, сТОЛБЦОВсЕКЦИЙ...
import МашинаРеквизитов classes Библио;
--import сис2 classes исключения,строковыефункции,функцииртти,функциидокумента,функции;
--Import Classes Импорт_ТД.Макеты.ТаблицаСоотв ;
Import ТаблДокумент     Classes Макет, Области, Область, Параметры;

InClass  Public

Перем ВнешнийВызов                      : Logical;
Перем 2Предворительный0Вызов              : Logical;
Перем 2ГрупповаяОбработкаДокументов0      : Logical;
---------------------------------------------------------
Перем ЭтоПапкаСФайлами       : Логическое;
Перем 2СписокФайловДляЗагрузки0 []: String;
Перем ЗаписываемыйДокумент   : Запись;
Перем ЧитаемФайлИзПапки      : Строка;
---------------------------------------------------------
InObject Private

Перем Справочн  : Целое;
Перем CheckBox2 : CheckBox;
Перем CheckBox24: CheckBox;
Перем CheckBox25: CheckBox;

столбПодтаблица              : TemplateColumn;
столбОбщаяГруппа             : TemplateColumn;
столбМногостраничный         : TemplateColumn;

Заголовок                    : TemplateSection;
СекДокум                     : TemplateSection;
секПозиции                   : TemplateSection;
секцИсточник                 : TemplateSection;

СекДокум1                    : TemplateSection;  --Здесь хранится Документ для загрузки данных в "Подтаблицу"

секМаркер                    : TemplateSection;

секНомерСтроки               : TemplateSection;


Строки []                    : String;
Строчка[]                    : String;

НазванияКолонокПолейЗаписи []: String;
ИменаПолейЗаписи           []: String;
ТипыПолейЗаписи            []: Integer;
КлассыЗаписейДляСсылок     []: Class;
СтрокиАльтер               []: Строка;
Заполнен                     : Logical;

Интерфейс                    : Импорт_ТД.Импорт_ТД.интСоответствиеПолей;

-- Рисуем таблицу
секПриемник           : TemplateSection;    -- После этой секции рисуем таблицы. Нам нужно знать на каком фрейме и после какой секции рисовать "новые"!

Нпп                   : Integer   [];
Загружаемое           : Логическое[];
ПолеПоиска            : Логическое[];
РежимЗагрузки         : Integer   [];
ЗначениеПоУмолчанию   : Вариант   [];
НаимЗначение          : Вариант   [];
ИскатьПо              : String    [];
КартотечноеПоле       : String    [];
ТипДанныхКартПоля     : Integer   [];
ТипДанныхЗначение     : String    [];
ЗагружаемоеПоле       : Integer   [];
ИмяЗагружПоля         : String    [];
ТипДанныхЗагрПоля     : Integer   [];
ColumnsXLS            : String    [];
РасчетноеВыражение    : String    [];

ИтогоПоЛисту          : Число       ;
Всего                 : Число       ;
-- Рисуем таблицу

СлужебныеПоля :String[] = [
                           'DocID'                     ,
                           'ExtID'                     ,
                           'ModifyDate'                ,
                           'CreateDate'                ,
                           'CreateUser'                ,
                           'UpdateDate'                ,
                           'UpdateUser'                ,
                           'CreateCode'                ,
                           'Version'                   ,
                           'UpdateUser'                ,
                           'КодФилиала'                ,
                           'УровеньКонфиденциальности' ,
                           'ЭлементСБ'                 ,
                           'КодПодсистемы'             ,
                           'КодМодуля'                 ,
                           'КодУчастника'              ,
                           'Замок'                     ,
                           'ТипПроцесса'               ,
                           'НеОтображаетсяВДереве'     ,
                           'WebUser'                   ,
                           'WebForm'                   ,
                           'Завершен'                  ,
                           'GroupPath'
                           ];
----------------------------------------------------------------------------------
var КоличЗагружПолей : Integer;
var FData            : Вариант[2];
var ФормаКарт        : Класс Ядро.ФормаКартотеки;
var ТестоваяЗагрузка : Логическое;
var FieldsCount      : integer = Позиции.Count ;
var lClass           : Class;
var ТипКартПоля      : Вариант;
var mTempRecord2      0: Record;    --найденная/созданная запись
var Рез 2   0          : Вариант ;
var Rec 2   0          : Вариант;
var зЯчейки          : Вариант;
var зЯчеек2 0          : Вариант[];
-------------------------------------------------------------------------------------------
  проц ПолеНомСтрПриВыходе(Клетка :КлеткаШаблона; Индекс :Целое);
    -- Обработка события выхода из редактируемого поля
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
--     ЕСЛИ Клетка.Значение = Nil ТОГДА
        ВидимостьПоляПодтаблица;
--     Иначе
--        ВидимостьПоляПодтаблица;
--     ИЛСЕ;

  конец;
----------------------------------------------------------------------------------
  функ ЯчейкаПриНажатии(Клетка :КлеткаШаблона; Действие :Шаблон.ТипыНажатия) :Логическое;
    -- Обработка события нажатия в зависимости от типа
    -- Параметры:
    --   Cell: клетка шаблона
    --   Action: тип нажатия (SingleClick, DoubleClick, EnterPressed, ButtonPressed)

      ЕСЛИ ссылкаДокумент=Nil ТОГДА
      Иначе
        if OpenBlankEditor(Стр( ПолучитьБланкРедакторДляКлассаЗаписи( (FindClass(КартотекаИмпорта)  as Class Record) )) , ссылкаДокумент , Window.ModalWindow ) = cmCancel then

        end;
      ИЛСЕ;
     
    Result = Истина; -- Разрешаем стандартную обработку
  конец;
----------------------------------------------------------------------------------
  func ПолессылкаДокументПриВходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
    --   Action: тип входа (Вход,Вставка,Очистка)
        --Klass = МашинаРеквизитов.Библио.ПолучитьКартотекуПоУмолчаниюДляКлассаЗаписи(DD);
        --СИС2.ФункцииКонсоли.НайтиФормуКартотеки( Стр(ФормаКарт) );
        -- ФормаКарт.ShowForm()  ;

        --if (ОткрытьКартотеку(  Стр(ФормаКарт) ,DD, "" ) = cmOK)  then      --Проверка    ФормаКарт.ShowForm

         --  ссылкаДокумент = DD;

        --end;
     
    Result = True; -- Разрешаем войти в поле
  end;
----------------------------------------------------------------------------------
  func ПолеПодтаблицаДанныхПриВходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
    --   Action: тип входа (Вход,Вставка,Очистка)
     
    Result = True; -- Разрешаем войти в поле
  end;
----------------------------------------------------------------------------------
  func ПолеИмяЛистаПриВводе(Cell :TemplateCell; Value :Variant) :Logical;
    -- Введенное значение корректно. Присвоить его переменной поля
    -- Параметры:
    --   Cell: клетка шаблона
    --   Value: введенное в поле значение
    если ИмяЛиста=Value тогда
       ЧтениеДанных  ;
    конец;

    Result = True; -- Продолжаем стандартную обработку
  end;
----------------------------------------------------------------------------------
  func ПолеПодтаблицаДанныхПриВводе(Cell :TemplateCell; Value :Variant) :Logical;
    -- Введенное значение корректно. Присвоить его переменной поля
    -- Параметры:
    --   Cell: клетка шаблона
    --   Value: введенное в поле значение 
     
    Result = True; -- Продолжаем стандартную обработку
  end;

----------------------------------------------------------------------------------
  proc ПолеИскатьПоПриРисовании            (Cell :TemplateCell; Selected :Logical; var Color :Integer; var FieldColor :Integer;
 Font :Font);
    IF  Match(Cell.Содержимое, "ИскатьПо*")   then
         --ПолеРасчетноеВыражениеПриПроверке  (Клетка, Индекс , Действие); -- Клетка.Contents
    end;
  end;
----------------------------------------------------------------------------------
  func ПолеИскатьПоПриВходе                (Cell :TemplateCell; Index    :Integer; Action    :Template.EnterTypes) :Logical;
    IF  Match(Cell.Содержимое, "ИскатьПо*")   then
         --ПолеРасчетноеВыражениеПриПроверке  (Клетка, Индекс , Действие); -- Клетка.Contents

    end;
    Result = True; -- Разрешаем войти в поле
  end;
----------------------------------------------------------------------------------
  func ПолеИскатьПоПриОбзоре               (Cell :TemplateCell; Value :Variant; var NewValue :Variant) :Logical;
         IF Cell.Содержимое = "ИскатьПо" then  --Этот бланк, а не внешний
         Иначе


         end;
    Result = True; -- Продолжаем стандартную обработку
  end;
----------------------------------------------------------------------------------
  функ ПриВходе                            (Клетка      : КлеткаШаблона; Индекс :Целое; Действие :Шаблон.ТипыВхода) :Логическое;

    IF     Match(Клетка.Содержимое, "ТипСправочника")        then
         ПолеПриВходе                    (Клетка, Индекс , Действие);
    ELSIF  Match(Клетка.Содержимое, "ИмяОбъекта")            then
         ПолеПриВходе                    (Клетка, Индекс , Действие);
    ELSIF  Match(Клетка.Содержимое, "ИскатьПо*")             then
         IF Клетка.Содержимое = "ИскатьПо" then  --Этот бланк, а не внешний
         Иначе
            ПолеИскатьПоПриВходе         (Клетка, Индекс , Действие);
         end;
    ELSIF  Match(Клетка.Содержимое, "РежимЗагрузки*")        then

    ELSIF  Match(Клетка.Содержимое, "ЗначениеПоУмолчанию*")  then
         ПолеЗначениеПоУмолчаниюПриВходе (Клетка, Индекс , Действие);
    ELSIF  Match(Клетка.Содержимое, "РасчетноеВыражение*")   then
         ПолеРасчетноеВыражениеПриВходе  (Клетка, Индекс , Действие); -- Клетка.Contents
    end;

    Result = Истина; -- Разрешаем войти в поле
  конец;
----------------------------------------------------------------------------------
  func ПриПроверке                         (Cell        : TemplateCell; Index :Integer; var Value :Variant) :Logical;
    IF  Match(Cell.Содержимое, "ИскатьПо*")   then
         --ПолеРасчетноеВыражениеПриПроверке  (Клетка, Индекс , Действие); -- Клетка.Contents
    end;
    Result = True; -- Разрешаем сохранить изменения в поле
  end;
----------------------------------------------------------------------------------
  proc ПриРисовании                        (Cell        : TemplateCell; Selected :Logical; var Color :Integer; var FieldColor :Integer; Font :Font);
    IF  Match(Cell.Содержимое, "ИскатьПо*")   then
         ПолеИскатьПоПриРисовании (Cell , Selected , Color , FieldColor , Font); -- Клетка.Contents
    end;
  end;
----------------------------------------------------------------------------------
  func ПриОбзоре                           (Cell        : TemplateCell; Value :Variant; var NewValue :Variant) :Logical;
    var TempSec  : TemplateSection;
    IF      Match(Cell.Содержимое, "ИскатьПо*")   then
         --ПолеРасчетноеВыражениеПриПроверке  (Клетка, Индекс , Действие); -- Клетка.Contents
    ЕслиЖе  Match(Cell.Содержимое, "РежимЗагрузки*")   then
            TempSec = Cell.Owner;
            TempSec.Cell[4,1].List.Clear;
            -- DeleteSection (ИмяЛистов);
            TempSec.Cell[4,1].List.Add("Поиск");
            TempSec.Cell[4,1].List.Add("Расчёт");
            TempSec.Cell[4,1].List.Add("Устанавливать");

    end;
    Result = True; -- Продолжаем стандартную обработку
  end;
----------------------------------------------------------------------------------
  функ ПриНажатии                          (Cell        : КлеткаШаблона; Действие :Шаблон.ТипыНажатия) :Логическое;
    IF  Match(Cell.Содержимое, "ИскатьПо*")   then
         --ПолеРасчетноеВыражениеПриПроверке  (Клетка, Индекс , Действие); -- Клетка.Contents
    end;
    Result = Истина; -- Разрешаем стандартную обработку
  конец;
----------------------------------------------------------------------------------
  func Cells_OnOutput                      (Cell        : TemplateCell; Value :Variant; Action :Template.OutputTypes; var Format :String) :Variant;
      if Action = Template.Output then
        Result  = Evaluate(Cell.Contents);
      end;
      if Value=NIL then
      Иначе
        if Action = Template.Calculation then
          Result  = Evaluate(Cell.Contents);
        end;
      end;
  end;
----------------------------------------------------------------------------------
  функ ПолеПриВходе                        (Клетка      : КлеткаШаблона; Индекс :Целое; Действие :Шаблон.ТипыВхода) :Логическое;
    var Klass : Класс ;
    var C     : Класс Ядро.ФормаКартотеки;
    var DD    : Класс Запись;
    var DDD   :       Запись;
      IF Клетка.Содержимое = "ТипСправочника" then
        if ChooseClass ( Sign, C, "Выберите класс связанной записи...") = cmOK then
           ТипСправочника = Стр( C ) ;
        end;
        ОбъектСправочника = "";
        ИмяОбъекта        = "";
        Result            = Ложь;
        ВОЗВРАТ;
      end;
      IF Клетка.Содержимое = "ИмяОбъекта" И ТипСправочника > "" then
        DD    = СИС2.ФункцииРТТИ.ПолучитьКлассЗаписиПоКлассуСправочника(НайтиКласс(ТипСправочника));
        --Проверка
        IF  DD = NIL then
          ОбъектСправочника = "";
          Сообщение("Неудалось Получить Класс Записи По Классу Справочника '"+ ТипСправочника +"'!");
         ВОЗВРАТ;
        end;
        --Проверка
        Klass = МашинаРеквизитов.Библио.ПолучитьКартотекуПоУмолчаниюДляКлассаЗаписи(DD);   -- МашинаРеквизитов.Переменные.ТаблицаИнтерфейсов[2,1] ;
        --Проверка
        IF  Klass = NIL then
          ОбъектСправочника = "";
          Сообщение("Неудалось Получить Картотеку По Умолчанию Для Класса Записи - '"+ Стр(DD) +"'!");
         ВОЗВРАТ;
        end;
        --Проверка
        if Klass.ShowFormEx(DDD, "", Window.ModalWindow) = cmOk then
           ОбъектСправочника = DDD.КлючЗаписиСтрока;
           ИмяОбъекта        = DDD.Имя             ;
        end;
        Result = Ложь;
      end;
  конец;
----------------------------------------------------------------------------------
  proc шаблон_ПриОткрытии                  (Create      : Logical);
    var  I   : Целое;
    var хПодтаблица  : Подтаблица;
    inherited шаблон_ПриОткрытии(Create);

     If КартотекаИмпорта="" then
     ELSE
       lClass = findclass(КартотекаИмпорта);
     end;

     Если Позиции.Количество = 0 Тогда
--       замок = ложь;
         Заполнен = ложь;
         КоличЗагружПолей = 0;
     Иначе
--       замок = True;
        Заполнен = True;

       КоличЗагружПолей = 0;
       хПодтаблица      = Позиции.CreateSubtableView('Загружаемое=Истина');
       КоличЗагружПолей = хПодтаблица.count;
     Илсе;

     --ПодТаблицы Картотек
     ВидимостьПоляПодтаблица ;
     --ПодТаблицы Картотек

     --Листы Экселя
     Если ИмяЛистов.Количество = 0 Тогда
      --???
      CheckBox24.State   = Ложь;
      CheckBox24.Visible = Ложь;
      ВидимостьСтолбцаИмяЛиста;
     Иначе
      секцИсточник.Cell[4,2].List.Clear;
      секцИсточник.Cell[4,2].List.Add(" ");
      для I = 1.. ИмяЛистов.Количество цикл
        секцИсточник.Cell[4,2].List.Add( ИмяЛистов[I].GetField("Имя") );
      конец;
      CheckBox24.State = Истина;
      ВидимостьСтолбцаИмяЛиста;
     Илсе;
     --Листы Экселя

     ТестоваяЗагрузка     = Ложь; -- Данные будут записываться в Базу Данных!

     ЗаполнитьМассивыПриОткрытии ;

     если ЭтоПапка  (СсылкаНаПрайс) тогда
        2ОбработатьПапкуФайлов0(СсылкаНаПрайс);
2        ГрупповаяОбработкаДокументов = Истина;
     конец;

     --Открытие бланка из "Мониторинга Импорта"
     Если ВнешнийВызов Тогда

        2--"Предворительный0Вызов2" нужен для определения Папки и списка файлов для импорта
        Если 2Предворительный0Вызов2=Ложь0 Тогда
           2--0 ЭтоПапкаСФайлами
            2--0СсылкаНаПрайс2  = 0ЧитаемФайлИзПапки2;   --Не верно!!!!
            mTempRecord2 = 0ЗаписываемыйДокумент2;

            ЧтениеДанных;
            Загрузить;
        Илсе;
        ----------------
        Close(кмдОтказ); -- Закрытие Тек. Бланка!!
        ----------------
     Илсе;
     --Открытие бланка из "Мониторинга Импорта"
  end;
----------------------------------------------------------------------------------
  func BlankOnVerify                                                              :Logical;
    Result = inherited шаблон_ПриПроверке;
    if код="" then
       Message("Нет кода!");
       Template.Field = "код";
       возврат ложь;
    end;
    if имя="" then
       Message("Нет названия!");
       Template.Field = "имя";
       возврат ложь;
    end;
    Result = True; -- Продолжить сохранение записи
  end;
----------------------------------------------------------------------------------
  func ПолеРасчетноеВыражениеПриПодсказке  (Cell        : TemplateCell; var Text :String) :Logical;
    Result = True; -- Разрешаем вывести подсказку
  end;
----------------------------------------------------------------------------------
  func ОчисткаПеременных                   (Стр         : Целое ) : Логическое;
    секПриемник.DeleteFrame(Стр);
    УдалитьИзМассива(Нпп                ,Стр);
    УдалитьИзМассива(Загружаемое        ,Стр);
    УдалитьИзМассива(ПолеПоиска         ,Стр);
    УдалитьИзМассива(РежимЗагрузки      ,Стр);
    УдалитьИзМассива(ЗначениеПоУмолчанию,Стр);
    УдалитьИзМассива(НаимЗначение       ,Стр);
    УдалитьИзМассива(ИскатьПо           ,Стр);
    УдалитьИзМассива(КартотечноеПоле    ,Стр);
    УдалитьИзМассива(ТипДанныхКартПоля  ,Стр);
    УдалитьИзМассива(ТипДанныхЗначение  ,Стр);
    УдалитьИзМассива(ЗагружаемоеПоле    ,Стр);
    УдалитьИзМассива(ИмяЗагружПоля      ,Стр);
    УдалитьИзМассива(ТипДанныхЗагрПоля  ,Стр);
    УдалитьИзМассива(ColumnsXLS         ,Стр);
    УдалитьИзМассива(РасчетноеВыражение ,Стр);
  end;
----------------------------------------------------------------------------------
  func DeleteСекция                                                               : Логическое;
    Перем Стр : Целое ;
       if  секПриемник.Количество=0 then
       Иначе
          для Стр = 1..секПриемник.Количество цикл
             ОчисткаПеременных(Стр);
          конец;
       конец;
  конец;
----------------------------------------------------------------------------------
  функ Ячейка_ПриНажатии                   (Клетка      : КлеткаШаблона; Действие :Шаблон.ТипыНажатия):Логическое;
    Перем Стр : Целое ;
      Стр = Клетка.Row;
      if Клетка.Contents = '+' then
          Позиции.Вставить(Стр + 1);
      ЕслиЖе Клетка.Contents = '-' then
          Позиции.Delete(Стр);
      Иначе

      конец;
    Result = Истина; -- Разрешаем стандартную обработку
  конец;
----------------------------------------------------------------------------------
  функ Ячейка_ПриНажатии_                  (Клетка      : КлеткаШаблона; Действие :Шаблон.ТипыНажатия):Логическое;
    Перем Стр : Целое ;
      Стр = If(секПриемник.Количество=0, 0,Клетка.Frame);  -- Клетка.Frame
      if     Клетка.Contents='+' then
        секПриемник.InsertFrame(Стр+1);
      ЕслиЖе Клетка.Contents='-' then
        if  секПриемник.Количество=0 then
        Иначе
            ОчисткаПеременных(Стр);
        конец;
      Иначе

      конец;
    Result=Истина; -- Разрешаем стандартную обработку
  конец;
----------------------------------------------------------------------------------
  проц ПриВыходе                           (Клетка      : КлеткаШаблона; Индекс :Целое);
   Перем Стр : Строка ;

    if    Клетка.Contents = 'ЗагружаемоеПоле' then
       if Клетка.Value = NIL then
         Позиции[Индекс].УстановитьПоле("ColumnsXLS", "");
       Иначе
         Стр = НомерКолонкиВXLSформате(Клетка.Value);
         Позиции[Индекс].УстановитьПоле("ColumnsXLS", Стр);
       конец;
    Иначе
      if Клетка.Contents = 'ColumnsXLS' then
        if Клетка.Value = NIL then
          Позиции[Индекс].УстановитьПоле("ЗагружаемоеПоле", 0                          );
        Иначе
          Позиции[Индекс].УстановитьПоле("ЗагружаемоеПоле", CharFromExcel(Клетка.Value));
        конец;
      конец;
    конец;

    if    Клетка.Contents = 'НомСтр' then
       if Клетка.Value = NIL then
       Иначе
         Range2  = "";
         Маркер2 = Nil;
       конец;
    Иначе
    конец;
    if    Клетка.Contents = 'Маркер2.Имя0' then
       if Клетка.Value = NIL then
       Иначе
         НомСтр2 = 0;
         Range2  = "";
       конец;
    Иначе
    конец;
    if    Клетка.Contents = 'Range' then
       if Клетка.Value = NIL then
       Иначе
         НомСтр2 = 0;
         Маркер2 = Nil;
       конец;
    Иначе
    конец;

  конец;
-----------------------------------------------------------
  проц ВидимостьПоляПодтаблица ;

    if СекДокум1.Cell[5,1].List.Count>0 или ПодтаблицаДанных>"" then
      столбПодтаблица.Visible = Истина;
      СекДокум1.Visible       = Истина;
    ELSE
      столбПодтаблица.Visible = Ложь;
      СекДокум1.Visible       = Ложь;
    end;

    if ТабличныеДанные then
      Заголовок. Column[9].Visible       = Ложь;
      СекПозиции.Column[9].Visible       = Ложь;
      Заголовок. Column[10].Visible      = Истина;
      СекПозиции.Column[10].Visible      = Истина;
      Заголовок. Column[11].Visible      = Истина;
      СекПозиции.Column[11].Visible      = Истина;
    ELSE
      Заголовок. Column[9].Visible       = Истина;
      СекПозиции.Column[9].Visible       = Истина;
      Заголовок. Column[10].Visible      = Ложь;
      СекПозиции.Column[10].Visible      = Ложь;
      Заголовок. Column[11].Visible      = Ложь;
      СекПозиции.Column[11].Visible      = Ложь;
    end;
--    --Если Маркер = Nil и НомСтр=0 значит новый или не заполненный документ. Показывать все!
--    if НомСтр2=002 и 0Маркер=Nil then                --Маркер = Nil
--      секМаркер.     Visible = Истина;
--      секНомерСтроки.Visible = Истина;
--    ELSE
--      if Маркер = Nil then
--        секМаркер.     Visible = Ложь;
--      end;
--      if НомСтр2=00 then
--        секНомерСтроки.Visible = Ложь;
--      end;
--    end;
конец;
-----------------------------------------------------------
  проц ВидимостьСтолбцаИмяЛиста ;
     if CheckBox24.State then
        столбМногостраничный.Visible = Истина;
     ELSE
        столбМногостраничный.Visible = Ложь;
     end;
  конец;
-----------------------------------------------------------
  проц ЗаполнитьМассивыПриОткрытии ;
   Перем Индекс,Z : integer;
     Z  = Позиции.Количество ;
     if Z = 0 then
     ELSE
       for Индекс = 1 .. Z do
          ВставитьВМассив(Нпп                 ,Индекс,Позиции[Индекс].GetField("Нпп")                    );
          ВставитьВМассив(Загружаемое         ,Индекс,Позиции[Индекс].GetField("Загружаемое")            );
          ВставитьВМассив(ПолеПоиска          ,Индекс,Позиции[Индекс].GetField("ПолеПоиска")             );
          ВставитьВМассив(РежимЗагрузки       ,Индекс,Позиции[Индекс].GetField("РежимЗагрузки")          );
          ВставитьВМассив(ЗначениеПоУмолчанию ,Индекс,Позиции[Индекс].GetField("ЗначениеПоУмолчанию")    );
          ВставитьВМассив(НаимЗначение        ,Индекс,Позиции[Индекс].GetField("НаимЗначение")           );
          ВставитьВМассив(ИскатьПо            ,Индекс,Позиции[Индекс].GetField("ИскатьПо")               );
          ВставитьВМассив(КартотечноеПоле     ,Индекс,Позиции[Индекс].GetField("КартотечноеПоле")        );
          ВставитьВМассив(ТипДанныхКартПоля   ,Индекс,Позиции[Индекс].GetField("ТипДанныхКартПоля")      );
          ВставитьВМассив(ТипДанныхЗначение   ,Индекс,Позиции[Индекс].GetField("ТипДанныхЗначение")      );
          ВставитьВМассив(ЗагружаемоеПоле     ,Индекс,Позиции[Индекс].GetField("ЗагружаемоеПоле")        );
          ВставитьВМассив(ИмяЗагружПоля       ,Индекс,Позиции[Индекс].GetField("ИмяЗагружПоля")          );
          ВставитьВМассив(ТипДанныхЗагрПоля   ,Индекс,Позиции[Индекс].GetField("ТипДанныхЗагрПоля")      );
          ВставитьВМассив(ColumnsXLS          ,Индекс,Позиции[Индекс].GetField("ColumnsXLS")             );
          ВставитьВМассив(РасчетноеВыражение  ,Индекс,Позиции[Индекс].GetField("РасчетноеВыражение")     );
       Od;
     end;
  конец;
-----------------------------------------------------------
  проц Секция_ПослеВставки                 (Секция      : СекцияШаблона; Индекс :Целое);
  -- Действия после вставки кадра в периодическую секцию
     Позиции[Индекс].УстановитьПоле ("Нпп",             Индекс           );
     --Позиции[Индекс].УстановитьПоле ("ЗагружаемоеПоле", Индекс           );
--     Позиции[Индекс].УстановитьПоле ("ColumnsXLS",      ExcelChar(Индекс));
--     Позиции[Индекс].УстановитьПоле ("ЗагружаемоеПоле", CharFromExcel(Позиции[Индекс].GetField("ColumnsXLS")) );
     --Позиции[Индекс].УстановитьПоле ("ColumnsXLS",      ExcelChar(Индекс));
--     Нпп             [Индекс]     =     Индекс           ;
--     ЗагружаемоеПоле [Индекс]     =     Индекс           ;
--     ColumnsXLS      [Индекс]     =     ExcelChar(Индекс);
  конец;
---------------------------------------------------------
  proc ВсеПоляЗаписиЗаполнить              (Name        : String; ResType: String; JJ: integer);
   Перем J : integer;
     if СистемныеПоля then
       Позиции.Вставить(Позиции.Количество + 1);
       ----------
       --секПриемник.InsertFrame(секПриемник.Количество+1);
       ----------
       J = Позиции.Количество ;
       --Заполнение других полей
       Секция_ПослеВставки( Nil, J);
       --Заполнение других полей
       Позиции[J].УстановитьПоле ("КартотечноеПоле",   Name   );
       Позиции[J].УстановитьПоле ("ТипДанныхЗначение", ResType);
       Позиции[J].УстановитьПоле ("ТипДанныхКартПоля", JJ     );

       КартотечноеПоле     [J] = Name   ;
       ТипДанныхЗначение   [J] = ResType;
       ТипДанныхКартПоля   [J] = JJ     ;

       ИзменяемТипПоля_ЗначениеПоУмолчанию_ (J);
     else
       if SearchInArray (СлужебныеПоля, Name)=-1 then  --Нет Служебного Поля
         Позиции.Вставить(Позиции.Количество + 1);
         J = Позиции.Количество ;
         --Заполнение других полей
         Секция_ПослеВставки( Nil, J);
         --Заполнение других полей
         Позиции[J].УстановитьПоле ("КартотечноеПоле",   Name   );
         Позиции[J].УстановитьПоле ("ТипДанныхЗначение", ResType);
         Позиции[J].УстановитьПоле ("ТипДанныхКартПоля", JJ     );

         КартотечноеПоле     [J] = Name   ;
         ТипДанныхЗначение   [J] = ResType;
         ТипДанныхКартПоля   [J] = JJ     ;

         ИзменяемТипПоля_ЗначениеПоУмолчанию_ (J);
       end;
     end;
end;
---------------------------------------------------------
  функ ПолеПриНажатии                      (Клетка      : КлеткаШаблона; Действие :Шаблон.ТипыНажатия) :Логическое;
    var C : Класс Ядро.ФормаКартотеки;

      if ВыборКартотеки(C) = кмдВерно then
        C.СоздатьВидимым;
      end;

    Result = Истина; -- Разрешаем стандартную обработку

  конец;
---------------------------------------------------------
  proc ПолеТипДокумПриВыходе               (Cell        : TemplateCell; Index :Integer);

    if Cell.Text="Справочники" then
       ---Self.ЧислоОбъектов ("столбПодтаблица")
    else

    end;

  end;
---------------------------------------------------------
  func ВКлассеЕстьПодтаблица               (const аКласс: class Запись) :Logical;
    var локИнфЧлена : ClassInfo;
    var I,N,Z       : Целое;
    var vMember     :FieldInfo;
    var vResType    :TypeInfo;
       Assert(аКласс <> nil);
       локИнфЧлена = аКласс.ClassInfo;
       Result      = Ложь;
       N           = Ядро.Запись.ClassInfo.MembersCount+1;
       Z           = локИнфЧлена.MembersCount;
       if N>Z then N = 1; end;
       for I = N .. локИнфЧлена.MembersCount do
         if локИнфЧлена.Member[i] is FieldInfo then  --Проверка на ПОЛЕ!!!
           vMember =локИнфЧлена.Member[i] as MethodInfo;
           vResType=vMember.ResultType;
           if (локИнфЧлена.Member[i]<>nil)and(vResType is SubtableClassInfo) then
             Result = True;
             BREAK;
           end;
         end;
       end;
  end;
---------------------------------------------------------
  функ DeleteSection                       (Позиции     : Subtable) :Логическое;
    if Позиции = Nil then
    else
      Позиции.Clear;
    end;
  end;
---------------------------------------------------------
  Проц ЗаполнитьИменаПодТаблиц             (локЗапись   : ClassInfo);
    var I       : Целое;
    var vMember : FieldInfo;
    var vResType: TypeInfo;
      for I = Ядро.Запись.ClassInfo.MembersCount+1 .. локЗапись.MembersCount do
        vMember  = локЗапись.Member[i] as FieldInfo;
        vResType = vMember.ResultType;
        if vResType is ClassInfo then
           if vResType is SubtableClassInfo then
             СекДокум1.Cell[5,1].List.Add(vMember.Name);
             ВставитьВМассив(СтрокиАльтер, СекДокум1.Cell[5,1].List.Count, vMember.Name);
           end;
        end;
      end;
  end;
---------------------------------------------------------
  Проц ЗаполнитьПолямиПодТаблицы           (vClass      : Class);
    var локЗапись: ClassInfo;
    var I        : Целое;
    var vMember  : FieldInfo;
    var vResType : TypeInfo;
      Попытка
        локЗапись = НайтиКласс( Стр(vClass) +"."+ ПодтаблицаДанных ).ClassInfo;
      Исключение
        Message("В подтаблицу: "+ПодтаблицаДанных+" загрузка не возможна!");
        ВОЗВРАТ;
      конец;
      for I = 1 .. локЗапись.MembersCount do
        Трассировка( "[  "+ Стр(I) +"]"+ Стр(vClass) +"."+ ПодтаблицаДанных + "." + локЗапись.Member[i].Name);
        if локЗапись.Member[i] is FieldInfo then
          vMember  = локЗапись.Member[i] as FieldInfo;
          vResType = vMember.ResultType;
          if vResType is ClassInfo then
            if vResType is RecordClassInfo then
               ВсеПоляЗаписиЗаполнить( vMember.Name, "{"+(vResType as RecordClassInfo).ProjectName+"."+vResType.Name+"}", 11);
            elsif vResType is StructureClassInfo then
              if СистемныеПоля then
                ВсеПоляЗаписиЗаполнить( vMember.Name, "13", 13);
              end;
            end;
          else
             ВсеПоляЗаписиЗаполнить( vMember.Name, Str(vResType.VarType) , vResType.VarType);
          end;
        end;
      end;
  end;
---------------------------------------------------------
  Проц ЗаполнитьПолямиТаблицы              (локЗапись   : ClassInfo);
    var I,F        : Целое;
    var vMember    : FieldInfo;
    var vResType   : TypeInfo;
      F     = Ядро.Запись.ClassInfo.MembersCount;
      for I = F  .. локЗапись.MembersCount do
        if I = F then
          if ВКлассеЕстьПоле(lClass, "GroupPath") then
             ВсеПоляЗаписиЗаполнить(2 0"GroupDoc", "{"+Стр(lClass)+"}" , 11 );
          end;
        Иначе
          vMember  = локЗапись.Member[i] as FieldInfo;
          vResType = vMember.ResultType;
          if vResType is ClassInfo then
             if vResType is RecordClassInfo then
                 ВсеПоляЗаписиЗаполнить(vMember.Name, "{"+(vResType as RecordClassInfo).ProjectName+"."+vResType.Name+"}" , 11 );
             elsif vResType is SubtableClassInfo then
               if СистемныеПоля then
                 ВсеПоляЗаписиЗаполнить(vMember.Name, "12", 12);
               end;
             elsif vResType is StructureClassInfo then
               if СистемныеПоля then
                 ВсеПоляЗаписиЗаполнить(vMember.Name, "13", 13);
               end;
             end;
          else
            ВсеПоляЗаписиЗаполнить(vMember.Name, Str(vResType.VarType), vResType.VarType );
          end;
        end;
      end;
  end;
---------------------------------------------------------
  функ ПолеКартотекаИмпортаПриВходе        (Клетка      : КлеткаШаблона; Индекс:Целое; Действие:Шаблон.ТипыВхода):Логическое;
    var Номер       : Целое;
    var локЗапись   : ClassInfo;
    var локПоле     : String;
    var vClass      : Class;
    var ВПодтаблицу : Логическое;
    var ref         : Запись;
        ВПодтаблицу = Ложь;
        СтрокиАльтер= Nil;
        if ТипДокум="Справочники" then --Справочники
          DeleteSection (Позиции);
          ПодтаблицаДанных="";
          СекДокум1.Cell[5,1].List.Clear;
          локПоле= "спрРесурс";
          if ChooseReference(локПоле)=кмдВерно then
              vClass           = СИС2.ФункцииРТТИ.ПолучитьКлассЗаписиПоКлассуСправочника(НайтиКласс(локПоле));
              lClass           = vClass;
              КартотекаИмпорта = Стр(vClass);
              локЗапись        = vClass.ClassInfo;
              if ВКлассеЕстьПодтаблица(vClass) then
                if Вопрос ( , "Приемник имеет подтаблицу. Выбрать подтаблицу?", ["Да","Нет"]) = 1 then
                   ЗаполнитьИменаПодТаблиц (локЗапись);
                   ВПодтаблицу = Истина;
                end;
              end;
              if ВПодтаблицу и ПодтаблицаДанных="" then
                Номер = Альтернатива ( "Выберите Подтаблицу для загрузки...     ", СтрокиАльтер, 20) ;
                if Номер = 0 then
                else
                  ПодтаблицаДанных=СтрокиАльтер[Номер];
                fi;
              end;
              if ВПодтаблицу и ПодтаблицаДанных>"" then
                  ЗаполнитьПолямиПодТаблицы (vClass);
              else
                  ЗаполнитьПолямиТаблицы (локЗапись);
              end;
          else
             Message("Справочник не выбран!");
          end;
        else    --Документы
          if ВыборКартотеки(ФормаКарт) = кмдВерно then
            КартотекаИмпорта = Стр(ФормаКарт.Записи);
            КартотекаИмпорта = ПодСтр(КартотекаИмпорта,2,Длина(КартотекаИмпорта)-2);
            vClass           = НайтиКласс( КартотекаИмпорта );
            локЗапись        = vClass.ClassInfo;
              DeleteSection (Позиции);
              СекДокум1.Cell[5,1].List.Clear;
              ПодтаблицаДанных="";
              if ВКлассеЕстьПодтаблица(vClass) then
                 if Вопрос ( , "Приемник имеет подтаблицу. Загружать в подтаблицу?", ["Да","Нет"]) = 1 then
                    ЗаполнитьИменаПодТаблиц (локЗапись);
                    ВПодтаблицу = Истина;
                 end;
              end;
              if ВПодтаблицу и ПодтаблицаДанных="" then
                Номер = Альтернатива ( "Выберите Подтаблицу для загрузки...", СтрокиАльтер, 20);
                if Номер=0 then
                else
                  ПодтаблицаДанных=СтрокиАльтер[Номер];
                  if OpenCardFile(Стр(ФормаКарт), ref, , window.modalwindow) = cmOk then
                    if ref <> nil then
                        ссылкаДокумент = ref;
                    end;
                  end;
                fi;
              end;
              if ВПодтаблицу и ПодтаблицаДанных>"" then
                ЗаполнитьПолямиПодТаблицы (vClass);
              else
                ЗаполнитьПолямиТаблицы    (локЗапись);
              end;
          else
             Message("Документ не выбран!");
          end;
        end;
    -------
    ВидимостьПоляПодтаблица ;
    -------
    Result = Истина; -- Разрешаем войти в поле
  конец;
---------------------------------------------------------
  func ПолеЗначениеПоУмолчаниюПриНажатии   (Cell        : TemplateCell; Action : Template.ClickTypes):Logical;

    Result = True; -- Разрешаем стандартную обработку
  end;
  ---------------------------------------------------------
  func ПроверкаСоответствияДанныхПрошла          (Cell        : TemplateCell; Row: Integer):Logical;
    Перем Реж            : Целое ;
    Перем ТипДанКартПоля : Целое ;
    Перем Загр           :Logical;

    Реж        = Позиции[Row].GetField("РежимЗагрузки");
    Загр       = Позиции[Row].GetField("Загружаемое");
    Result     = True;
        ТипДанКартПоля = Позиции[Row].GetField("ТипДанныхКартПоля");
        if    ТипДанКартПоля=0  then
        ELSIF ТипДанКартПоля=1  then
        ELSIF ТипДанКартПоля=2  then
        ELSIF ТипДанКартПоля=3  then
        ELSIF ТипДанКартПоля=4  then
        ELSIF ТипДанКартПоля=5  then
        ELSIF ТипДанКартПоля=6  then
        ELSIF ТипДанКартПоля=7  then
        ELSIF ТипДанКартПоля=8  then
        ELSIF ТипДанКартПоля=9  then
        ELSIF ТипДанКартПоля=10 then
        ELSIF ТипДанКартПоля=11 then
          if    Реж=0 then
          ELSIF Реж=1 then
          ELSIF Реж=2 then
             if Загр then
             ELSIF НЕ Загр then
               Сообщение('Строчка должна быть Загружаемая!');
               Result = Ложь;
             end;
          end;
        end;
  end;
  ---------------------------------------------------------
  func ПолеЗначениеПоУмолчаниюПриВходе     (Cell        : TemplateCell; Index  : Integer; Action: Template.EnterTypes) :Logical;
    Перем Row            : Целое ;
    Перем ТипДанКартПоля : Целое ;
    Перем DD             : Запись;
    Перем КЛС            : Вариант;
    Перем КлассДанных    : Строка;
    Перем vClass         : Class;
    Перем Cell_Value     : String;
    Row=Index; Cell_Value = Стр(Cell.Value);
    Result = True; -- Разрешаем войти в поле
        ТипДанКартПоля = Позиции[Row].GetField("ТипДанныхКартПоля");
        if    ТипДанКартПоля=0  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=1  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=2  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=3  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=4  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=5  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
            Cell_Value = Стр(Календарь);
            Позиции[Row].SetField("ЗначениеПоУмолчанию", Cell_Value);
            Позиции[Row].SetField("НаимЗначение",        Cell_Value);
          end;
        ELSIF ТипДанКартПоля=6  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=7  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=8  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=9  then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=10 then
          if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
          end;
        ELSIF ТипДанКартПоля=11 then
         if Позиции[Row].GetField("РежимЗагрузки")=2 then
             if ПроверкаСоответствияДанныхПрошла (Cell , Index) then
             --
               КлассДанных = Позиции[Row].GetField("ТипДанныхЗначение");
               КлассДанных = ПодСтр(КлассДанных,2,Длина(КлассДанных)-2);
               vClass = НайтиКласс(КлассДанных);
               DD     = vClass.Create  ;
               if DD = nil then
                 Трассировка("Не возможно записать данные в : "+КлассДанных);
                 Result = Ложь;
               end;
               vClass = МашинаРеквизитов.Библио.ПолучитьКартотекуПоУмолчаниюДляКлассаЗаписи(vClass);
               if vClass = Nil then
                 Трассировка("Для " + КлассДанных +" не удалось найти Картотеку по умочанию...");
               Иначе
                 if vClass.ShowFormEx(DD, "", Window.ModalWindow) = cmOk then
                    Позиции[Row].SetField("ЗначениеПоУмолчанию", DD.DocIDStr);
                    КЛС = findclass( ПодСтр(Позиции[Row].GetField ("ТипДанныхЗначение"),2,Длина(Позиции[Row].GetField ("ТипДанныхЗначение"))-2));
                    if ВКлассеЕстьПоле( КЛС, "Имя") then
                      if DD.Имя="" then
                        Позиции[Row].SetField("НаимЗначение", DD.Код);
                      ELSE
                        Позиции[Row].SetField("НаимЗначение", DD.Имя);
                      end;
                    end;
                    if ВКлассеЕстьПоле( КЛС, "Код") then  --    vClass              findclass(КартотекаИмпорта)
                      if DD.Код="" then
                        Позиции[Row].SetField("НаимЗначение", DD.Имя);
                      ELSE
                        Позиции[Row].SetField("НаимЗначение", DD.Код);
                      end;
                    end;
                 end;
               end;
             end;
           end;
           Result = Ложь;
        end;
  end;
  ---------------------------------------------------------
  func ПолеЗначениеПоУмолчаниюПриВходе_    (Cell        : TemplateCell; Index  : Integer; Action: Template.EnterTypes) :Logical;
    Перем Row            : Целое ;
    Перем ТипДанКартПоля : Целое ;
    Перем DD             : Запись;
    Перем КлассДанных    : Строка;
    Перем vClass         : Class;
--    Перем Cell_Value     : String;
    Row        = Index;
--    Cell_Value = Cell.Value;
    Result     = True;
        ТипДанКартПоля = Позиции[Row].GetField("ТипДанныхКартПоля");
        if    ТипДанКартПоля=0  then

        ELSIF ТипДанКартПоля=1  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
        ELSIF ТипДанКартПоля=2  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
        ELSIF ТипДанКартПоля=3  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=4  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=5  then
--           Cell_Value = Стр(Календарь);
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=6  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=7  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=8  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=9  then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
--        ELSIF ТипДанКартПоля=10 then
--           ЗначениеПоУмолчанию[Row] = Cell_Value;
--           НаимЗначение       [Row] = Cell_Value;
        ELSIF ТипДанКартПоля=11 then
         if РежимЗагрузки[Row]=2 then
             КлассДанных = Позиции[Row].GetField("ТипДанныхЗначение");
             КлассДанных = ПодСтр(КлассДанных,2,Длина(КлассДанных)-2);
             vClass = НайтиКласс(КлассДанных);
             DD     = vClass.Create  ;
             if DD = nil then
               Трассировка("Не возможно записать данные в : "+КлассДанных);
               Result = Ложь;
             end;
             vClass = МашинаРеквизитов.Библио.ПолучитьКартотекуПоУмолчаниюДляКлассаЗаписи(vClass);
               if vClass.ShowFormEx(DD, "", Window.ModalWindow) = cmOk then
                  Позиции[Row].SetField("ЗначениеПоУмолчанию", DD.DocIDStr);
                  ЗначениеПоУмолчанию[Row] = DD.DocIDStr;
                  if DD.Имя="" then
                    Позиции      [Row].SetField("НаимЗначение", DD.Код);
                    НаимЗначение[Row] = DD.Код;
                  ELSE
                    Позиции[Row].SetField("НаимЗначение", DD.Имя);
                    НаимЗначение[Row] = DD.Код;
                  end;
                  if Cell.FieldType = Kernel.Template.CommonField then
                     Cell.ReadOnly  = Ложь;
                  end;
               end;
           end;
           Result = Ложь;
        end;
  end;
  ---------------------------------------------------------
  proc ИзменяемТипПоля_ЗначениеПоУмолчанию_(Позиц       : Integer);
--    Перем I :Integer;
--      I = Позиции[Позиц].GetField("ТипДанныхКартПоля");
--        if    I=0  then
--
--        ELSIF I=1  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.StringFormat;
--             секПриемник.Cell[5,Позиц].Button     = Ложь;
--        ELSIF I=2  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.NumericFormat;
--             секПриемник.Cell[5,Позиц].Button     = Ложь;
--        ELSIF I=3  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.NumericFormat;
--             секПриемник.Cell[5,Позиц].Button     = Ложь;
--        ELSIF I=4  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.LogicalFormat;
--        ELSIF I=5  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.DateFormat;
--             секПриемник.Cell[5,Позиц].Button     = Истина;
--        ELSIF I=6  then
--
--        ELSIF I=7  then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.CommonFormat;
--        ELSIF I=8  then
--
--        ELSIF I=9  then
--
--        ELSIF I=10 then
--
--        ELSIF I=11 then
--             секПриемник.Cell[5,Позиц].CellFormat = Template.ReferenceFormat;
--             секПриемник.Cell[5,Позиц].Button     = Истина;
--        ELSIF I=12 then
--
--        ELSIF I=13 then
--
--        end;
  end;
  ---------------------------------------------------------
  proc ИзменяемТипПоля_ЗначениеПоУмолчанию (Sec         : TemplateSection; Cell: TemplateCell; Позиц :Integer);
    Перем I :Integer;
      I = Позиции[Позиц].GetField("ТипДанныхКартПоля");
        if    I=0  then

        ELSIF I=1  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.StringFormat;
        ELSIF I=2  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.NumericFormat;
        ELSIF I=3  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.NumericFormat;
        ELSIF I=4  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.LogicalFormat;
        ELSIF I=5  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.DateFormat;
        ELSIF I=6  then

        ELSIF I=7  then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.CommonFormat;
        ELSIF I=8  then

        ELSIF I=9  then

        ELSIF I=10 then

        ELSIF I=11 then
             Sec.Cell[5,Cell.Строка].CellFormat = Template.ReferenceFormat;
        ELSIF I=12 then

        ELSIF I=13 then

        end;
  end;
  ---------------------------------------------------------
  proc ПолеРежимЗагрузкиПриВыходе          (Cell        : TemplateCell; Index :Integer);
    var Имя : Строка ;

     if Cell.Строка>0 и Cell.Столбец>0 и Cell.Кадр>0 then
       Имя  = Cell.Владелец.Имя;
       --Sec  = ВзятьСекциюПоИмени (ШАБЛОН, Имя);
       --if Sec = Nil then
         ------------------
       --иначе
         Трассировка("Секция='"+Имя+"',  Столбец номер="+Str(Cell.Столбец));
         if     Cell.Текст = "Устанавливать" then

         ELSIF  Cell.Текст = "Поиск" then
           if Позиции[Index].ВзятьПоле     ("ЗначениеПоУмолчанию")="" then
           Иначе
              Позиции[Index].УстановитьПоле("ЗначениеПоУмолчанию","");
           end;
         ELSIF  Cell.Текст = "Расчёт" then
           if Позиции[Index].ВзятьПоле     ("ЗначениеПоУмолчанию")="" then
           Иначе
              Позиции[Index].УстановитьПоле("ЗначениеПоУмолчанию","");
           end;
         end;
      -- end;
     end;
  end;
  ---------------------------------------------------------
  proc BlankOnCreate                       (Context     : Variant);
    if ТипДокум="Справочники" then
    end;
  end;
  ---------------------------------------------------------
--  proc BlankOnOpen                         (Create      : Logical);
--    Перем I :Integer;
--      -------
--      ВидимостьПоляПодтаблица ;
--      -------
--      If КартотекаИмпорта="" then
--      ELSE
--         lClass = findclass(КартотекаИмпорта);
--      end;
--      If секПриемник.RowsCount>1 then
--          секПриемник.DeleteRow(1,секПриемник.RowsCount+1);
--      end;
----      if Отрезать(ИмяЛиста) = "" then
----        CheckBox2.State=Ложь;
----      ELSE
----        CheckBox2.State=Истина;
----      end;
--      ВидимостьСтолбцаИмяЛиста ;
--      для I = 1..ИмяЛистов.Количество цикл
--         секцИсточник.Cell[4,2].List.Add(ИмяЛистов[I].GetField("Имя"));
--      конец;
--    Create = True ;
--  end;
  ---------------------------------------------------------
  func BlankBeforeClose                    (ModalResult : Integer) :Logical;

    Result = True; -- Продолжить закрытие формы
  end;
  ---------------------------------------------------------
  func CellOnClick                         (Cell        : TemplateCell; Action :Template.ClickTypes) :Logical;
     Перем j : Целое ;

      Template.BeginModify;
      if Cell.Текст = "ю" then      -- Проставить "Галочки"
          for j=1.. Позиции.Count do
              Позиции[j].УстановитьПоле ("Загружаемое", Истина);
              Загружаемое[j] = Истина;
          end;
      ELSE                          -- Снять "Галочки"       Cell.Текст ="Ё"
          for j=1.. Позиции.Count do
              Позиции[j].УстановитьПоле ("Загружаемое", Ложь);
              Загружаемое[j] = Ложь;
          end;
      end;
      Template.EndModify;

    Result = True; -- Разрешаем стандартную обработку
  end;
  ---------------------------------------------------------
  proc ПолеКартотекаИмпортаПриВыходе       (Cell        : TemplateCell; Index :Integer);

     if СекДокум1.Cell[5,1].List.Count>0 then
        столбПодтаблица.Visible = Истина;
     ELSE
        столбПодтаблица.Visible = Ложь;
     end;

  end;
  ---------------------------------------------------------
  proc СкрываемТаблицу;
      Заголовок.Visible   = FALSE;
      секПозиции.Visible  = FALSE;
--      Замок               = FALSE;
      --Очистка временных переменных
      --Очистка временных переменных
  end;
  ---------------------------------------------------------
  proc ОткрываемТаблицу;
      Заголовок.Visible   = Истина;
      секПозиции.Visible  = Истина;
--      Замок               = Истина;
      --Очистка временных переменных
      --Очистка временных переменных
  end;
  ---------------------------------------------------------
  proc CheckBox2OnChange                   (Sender      : CheckBox);

       if  Sender.Caption = "Источник МногоЛистный (для xls-файлов)"  then
         CheckBox24.State = Sender.State;
         ВидимостьСтолбцаИмяЛиста ;
       elsif  Sender.Caption = "Документ заполнен" then     -- SELF
         Если Sender.State Тогда
           CheckBox2.State = Истина;
           ОткрываемТаблицу;
           УдалитьНарисованныеСекции;

         Иначе
           CheckBox2.State = Ложь;
           СкрываемТаблицу;
           РисуемКрасивыйШаблон ;
         Илсе;
       Fi;

       ВидимостьПоляПодтаблица;

  end;
  ---------------------------------------------------------
  proc ПроверитьФайл_Excel                 (Прайс       : Строка);
    Перем Excel :AutoObject;
    Перем I,Z :Integer;
       --"http://aristo.su/download/Price-Full.xlsx"
       if Прайс = "" then
       Иначе
         XLS.Create;
         Excel = ОткрытьДоступКФайлуXLS(Прайс, Excel);
         if Excel = Nil then
         Иначе
           Z  = КоличествоЛистовВКниге (Excel);
           if Z > 0 then
              МассивXLS = ИменаЛистовНашейКниги  (НашаКнигаXLS);
              секцИсточник.Cell[4,2].List.Clear;
              DeleteSection (ИмяЛистов);
              секцИсточник.Cell[4,2].List.Add(" ");
              для I = 1.. Z цикл
                 секцИсточник.Cell[4,2].List.Add(МассивXLS[I]);
                 ИмяЛистов.Вставить(ИмяЛистов.Количество + 1);
                 ИмяЛистов[I].УстановитьПоле ("Имя",  МассивXLS[I]);
              конец;
              CheckBox24.State = Истина;
              ВидимостьСтолбцаИмяЛиста;
           end;
         end;
         ЗакрытьКнигу(Excel);
         ЗакрытьExcel(Excel);
       end;
  end;
  ---------------------------------------------------------
  func ПолеСсылкаНаПрайсПриВходе           (Cell        : TemplateCell; Index: Integer; Action :Template.EnterTypes) :Logical;
2   Перем Рез :Целое;

    Result = True; -- Разрешаем войти в поле
    if 2    0Action=0 then   --Ввод
      2Рез =0 Вопрос ( 2"Выбор файла/каталога импорта ..."0,
                     "2Выбрать каталог или Файл0?",
                     ["2Файл0",2 0"2Каталог0", "2Я передумал!0"]2)0;
    elsif  Action=1 then   --Вставка
       ВОЗВРАТ Result;
    elsif  Action=2 then2   -0-Очистка поля
       Cell.Value2 = "";
       ВОЗВРАТ Result;
    end;
    if 2Рез0 = 1 then
      If Match(Cell.Value, "http://*")2  или
       2  0Match(Cell.Value, "http2s0://*") Тогда
         Если API.ЕстьПодключение Тогда
         Иначе
            Трассировка("Нет подключения к Интернету. Проверка файла не возможна!");
            ВОЗВРАТ Ложь;
         end;
      end;
      if Action=0 then   --Ввод
          СсылкаНаПрайс = ВыбратьТабличныйФайл;
          if Match( ФайлРасширение, "*.xls?") then
               CheckBox24.Visible = Истина;
               ПроверитьФайл_Excel (СсылкаНаПрайс);
          elsif  ФайлРасширение = ".txt" then

          elsif  ФайлРасширение = ".ods" then
               CheckBox24.Visible = Истина;
               ПроверитьФайл_Excel (СсылкаНаПрайс);
          elsif  ФайлРасширение = ".dbf" then
               CheckBox24.Visible = Истина;
               ПроверитьФайл_Excel (СсылкаНаПрайс);
          elsif  ФайлРасширение = ".csv" then
               CheckBox24.Visible = Истина;
               ПроверитьФайл_Excel (СсылкаНаПрайс);
          else

          end;
      elsif   Action=1  then   --Вставка

      else   -- "2" - Очистка поля
         CheckBox24.Visible = Ложь;
         CheckBox24.State   = Ложь;
         ВидимостьСтолбцаИмяЛиста;
         ИмяЛиста = "";
      end;
2    0elsif 2Рез0 = 220 then
        Cell.Value2 = 0SelectDir (2"Выбор каталога Импорта файлов..."0)2;
        2ОбработатьПапкуФайлов0  (Cell.Value);
    else
       Cell.Value2 = "";
       ВОЗВРАТ Ложь;
    fi;
  end;
  ---------------------------------------------------------
  proc 2ОбработатьПапкуФайлов0       2     0   (Стр2_0 : Строка );

        МаскаФайлов2 = "*.txt;*0.xls?2;*0.csv2;*0.dbf2";
        if СписокФайлов (Стр2_0)2 0then
           ЭтоПапкаСФайлами2 = Истина;
           2СписокФайловДляЗагрузки = 0Files2;     --Обновлять при открытии бланка!!!
        end;

  end;
  ---------------------------------------------------------
  proc ПолеСсылкаНаПрайсПриВыходе          (Cell        : TemplateCell; Index: Integer);

    if Cell.Value="" then
       CheckBox24.Visible = Ложь;
       CheckBox24.State   = Ложь;
       ВидимостьСтолбцаИмяЛиста ;
       ИмяЛиста = "";
    else
      ФайлРасширение = СИС2.Файл.ВыделитьРасширениеФайла(Cell.Value);
      if Match( ФайлРасширение, "*.xls?") then
         CheckBox24.Visible = Истина;
         -- по условию
         ПроверитьФайл_Excel (Cell.Text);
         CheckBox24.Visible = Истина;
         CheckBox24.State   = Истина;
         ВидимостьСтолбцаИмяЛиста ;
      end;
    end;

  end;
  ---------------------------------------------------------
  func  ВзятьИндексМассива                 (Стр         : Строка): Integer;
    var   I     : Integer;
    var   Z     : Integer;
     I   = Поз("[", Стр) ;
     Z   = Поз("]", Стр) ;
     Result = Цел(ПодСтр(Стр,I+1, (Z-1)-I));
  end;
  ---------------------------------------------------------
  func ПолеРасчетноеВыражениеПриВходе      (Cell        : TemplateCell; Index: Integer; Action :Template.EnterTypes):Logical;
    var Стр   : Строка;
    var F     : BlankForm;

      if Позиции[Index].GetField("РежимЗагрузки")2=10 then
        Стр = Cell.Содержимое ;
        F = Импорт_ТД.Импорт_ТД.блРедакторВыражений.Создать;
        if Поз("[", Стр)=0 then2      --Вариант хранения данных МногоСекционный! "СекПозиции[123]"
        Иначе
           Index = ВзятьИндексМассива(Стр);
        end;
        F.РасчетноеВыражение = Позиции[Index].GetField("РасчетноеВыражение");
        if F.Выполнить = 2 then
           Позиции[Index].УстановитьПоле("РасчетноеВыражение", F.РасчетноеВыражение);
           РасчетноеВыражение[Index] = F.РасчетноеВыражение;
        end;
        F.РасчетноеВыражение = "";
        F = Nil;
2      Иначе
2        Сообщение("Установите значение - 'Режим Загрузки=Расчет'!");
      end;
    Result = Ложь;
  end;
  ---------------------------------------------------------
 Проц ДанныеИзXLS_В_Картотеку(WorkSheet:AutoObject);
   var 2 0 YY, XX            2    0: Целое      ;
   Перем Cells                 : AutoObject ;
   Перем Значение_Позиц        : Вариант    ;
   Перем Rows                  : Целое      ;
   Перем Columns               : Целое      ;
   var   Range_                : 2Строка0;


      2--0ExlЛист.Range2[ 0Range2 ]0.Value2 как 0Вариант[2];
      если Range2=""0 тогда
        Cells   = WorkSheet.UsedRange ;  -- WorkSheet.UsedRange.Value2 как 0Вариант[2]   .Value
        Rows    = Cells.Rows.Count;      -- Строк   в Диапазоне
        Columns = Cells.Columns.Count;   -- Колонок в Диапазоне
           for YY = 1 .. Rows  do        -- строки Rows
              for XX = 1 .. Columns   do     -- столбы Column
                Значение_Позиц = Cells.Item[ YY , XX ].Value ;
                FData [YY ,XX ] = Значение_Позиц ;
                Задержка(ЗначениеЗадержки); -- Отдаем ресурсы другим приложениям
              oD;                           -- столбы Column
           oD;                              -- строки Rows
      2Иначе
        если Range = "" тогда
          Range_2 =0 2ВзятьОбластьИзМаркера0;
        Иначе
          Range_ = Range;
        конец;
        Cells   = WorkSheet.Range[Range_] ; -- WorkSheet.UsedRange.Value2 как 0Вариант[2]   .Value
        Rows    = Cells.Rows.Count;         -- Строк   в Диапазоне
        Columns = Cells.Columns.Count;      -- Колонок в Диапазоне
           for YY = 1 .. Rows  do           -- строки Rows
              for XX = 1 .. Columns   do    -- столбы Column
                Значение_Позиц = Cells.Item[ YY , XX ].Value ;
                FData [YY ,XX ] = Значение_Позиц ;
                Задержка(ЗначениеЗадержки); -- Отдаем ресурсы другим приложениям
              oD;                           -- столбы Column
           oD;                              -- строки Rows
      конец;
 Цорп;
  ---------------------------------------------------------
   var  СтроковыйАдрКД2 0 : 2Строка0;
 функ 2ВзятьОбластьИзМаркера :Строка0;
    var    ActiveCell : AutoObject;  -- Excel-Область!!!
    var    2НомСтрНач0Д : 2Целое0;
    var    2НомСтрКон0Д : 2Целое0;
    var    2НомПослКол0 : 2Целое0;
    var    2НомПослСтр0 : 2Целое0;
    var    2БукваНач0   : 2Строка0;
    var    2Буква0Кон   : 2Строка0;
    var    2АдрКон0     : 2Строка0;
    var    2АдрНач0     : 2Строка0;
    var    РасчитатьНомерСтроки     : Логическое;

      2   0если Маркер2=Nil0 или Range<>2""0 тогда

         Иначе
           ActiveCell2 = 0АктивWorkSheet.Cells.SpecialCells(xlLastCell) ;
           2НомПослСтр0 = ActiveCell.Row;
           2НомПослКол0 = ActiveCell.Column;
           СтроковыйАдрКД    2=0 ExcelChar(2НомПослКол)0 2+0 2Стр(НомПослСтр)0;2  0     2--"G12"
           РасчитатьНомерСтроки = Истина;
        2   0если ЕстьМаркерДанных(2Маркер0) тогда              --Маркера может не быть в файле!
             если Маркер2.МНД<>"" и 0Маркер2.МКД<>""0 тогда2     --Оптимум!
               2--Определяем "Адреса" наших Маркеров...
               2АдрНач   =0 ВзятьXLSАдресИскомого (Маркер2.МНД,0 2 "A1:" + 0СтроковыйАдрКД2   0);2  0  2--"A1"
               если 2АдрНач=""0 тогда  --Может отсутствовать
                 2АдрНач = "A1"0;
                 Трассировка("2М0аркер (2МНД0) - '"+Маркер2.МНД0+"' - не найден...");
                 РасчитатьНомерСтроки = Ложь;
               конец;

  2             ---0Опред. 2Направление на Данные
               Если РасчитатьНомерСтроки тогда
                 2БукваНач = 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( 2АдрНач0 );
                 если Маркер2.0Куда2=1 или 0Маркер2.0Куда2=3 или 0Маркер2.0Куда2=0 0 тогда2  --Вправо! (или Вправо-Вниз)
                2  0 2НомСтрНач0Д  2= 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрНач0 )2    0;
                 конец;
                 если Маркер2.0Куда2=20 тогда2  --Вниз!
                2  0 2НомСтрНач0Д  2= 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрНач0 )2 + 10;
                 конец;
                 --Вниз-ВЛево|4
                 если Маркер2.0Куда2=04 тогда2  --Вниз0-ВЛево2!0 -- Странное рассположение данных? Нет! Маркер в Конце и Выше данных!
                   2БукваНач 0   2= 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( СтроковыйАдрКД );
                   2НомСтрНач0Д  2= 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрНач0 )2 + 10;
                 конец;
                 2АдрНач =0 2БукваНач + Стр(НомСтрНач0Д2)0;
               конец;
  2             ---0Опред. 2Направление на Данные

               2АдрКон   =0 ВзятьXLSАдресИскомого (Маркер2.МКД,0 2 АдрНач0 2+0 2":"0 2+0 СтроковыйАдрКД);

               РасчитатьНомерСтроки   = Истина;
               если 2АдрКон=""0 тогда  --Может отсутствовать
                 2АдрКон = 0СтроковыйАдрКД;
                 Трассировка("2М0аркер (2МКД0) - '"+Маркер2.МКД0+"' - не найден...");
                 РасчитатьНомерСтроки = Ложь;
               конец;
  2             ---0Опред. 2Направление на Данные
               Если РасчитатьНомерСтроки тогда
                 2Буква0Кон2 = 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( 2АдрКон0 );
                 если Маркер2.0Откуда2=1 или 0Маркер2.0Откуда2=3 или 0Маркер2.0Откуда2=00 тогда2  --Влево! (или Влево-Вверх)
                 2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2    0;
                 конец;
                 если Маркер2.0Откуда2=20 тогда2  --Вверх!
                 2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2 - 10;
                 конец;
                 --Вверх-ВПраво|4   -- Странное рассположение данных? Нет! Маркер в начале и ниже данных!
                 если Маркер2.0Откуда2=04 тогда2  --0Вверх-ВПраво2!
                   2Буква0Кон2 0   2= 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( СтроковыйАдрКД );
                 2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2 - 10;
                 конец;
                 2АдрКон =0 2Буква0Кон2 + Стр(НомСтрКон0Д2)0;
               конец;
  2             ---0Опред. 2Направление на Данные

             2  0Результат =2 АдрНач +":"+0 2АдрКон0 ;2 --

             Иначе
               если Маркер2.МНД="" 0тогда
                 2АдрНач = "A1"0;
                 2АдрКон =0 ВзятьXLSАдресИскомого (Маркер2.МКД,0 2 АдрНач0 2+0 2":"0 2+0 СтроковыйАдрКД );
                 если 2АдрКон=""0 тогда  --Может отсутствовать
                   2АдрКон = 0СтроковыйАдрКД;
                   Трассировка("2М0аркер (2МКД0) - '"+Маркер2.МКД0+"' - не найден...");
                   РасчитатьНомерСтроки = Ложь;
                 конец;

    2             ---0Опред. 2Направление на Данные
                 Если РасчитатьНомерСтроки тогда
                   2Буква0Кон2 = 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( 2АдрКон0 );
                   если Маркер2.0Откуда2=1 или 0Маркер2.0Откуда2=00 2или 0Маркер2.0Откуда2=30 тогда2  --Влево!0 2(или Влево-Вверх)
                   2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2    0;
                   конец;
                   если Маркер2.0Откуда2=2 0 тогда2  --Вверх!
                   2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2 - 10;
                   конец;
                   --Вверх-ВПраво|4   -- Странное рассположение данных? Нет! Маркер в начале и ниже данных!
                   если Маркер2.0Откуда2=04 тогда2  --0Вверх-ВПраво2!
                     2Буква0Кон2 0   2= 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( СтроковыйАдрКД );
                   2  НомСтрКон0Д2  = 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрКон0 )2 - 10;
                   конец;
                   2АдрКон =0 2Буква0Кон2 + Стр(НомСтрКон0Д2)0;
                 конец;
    2             ---0Опред. 2Направление на Данные
             2 0  2 0Результат =2 0"A12:"+0 2АдрКон 0 ;
               Иначе
                 если Маркер2.МКД=""0 тогда

                   2АдрНач     =0 ВзятьXLSАдресИскомого (Маркер2.МНД,0 2 "A1:" + 0СтроковыйАдрКД2   0);2  0  2--"A1"
                   если 2АдрНач=""0 тогда  --Может отсутствовать
                     2АдрНач = "A1"0;
                     Трассировка("2М0аркер (2МНД0) - '"+Маркер2.МНД0+"' - не найден...");
                     РасчитатьНомерСтроки = Ложь;
                   конец;
      2             ---0Опред. 2Направление на Данные
                   Если РасчитатьНомерСтроки тогда
                     2БукваНач0 2= 0ПолучитьБуквуКолонкиИзАдресаЯчейкиXLS( 2АдрНач0 );
                     если Маркер2.0Куда2=1 или 0Маркер2.0Куда2=3 или 0Маркер2.0Куда2=0 0 тогда2  --Вправо! (или Вправо-Вниз)
                    2  0 2НомСтрНач0Д  2= 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрНач0 )2    0;
                     конец;
                     если Маркер2.0Куда2=20 тогда2  --Вниз!
                    2  0 2НомСтрНач0Д  2= 0ПолучитьНомерСтрокиИзАдресаЯчейкиXLS2 0( 2АдрНач0 )2 + 10;
                     конец;
                     2АдрНач =0 2БукваНач + Стр(НомСтрНач0Д2)0;
                   конец;
      2             ---0Опред. 2Направление на Данные

                   2АдрКон 0     2= 0СтроковыйАдрКД;

               2 0  2 0Результат = 2 АдрНач0 2 +":"+0 2АдрКон0 ;2 --
                 конец;
               конец;
    2          -----
             Конец;
           Иначе
             Результат = 2 "0A12:"+0СтроковыйАдрКД ;
           Конец;

         Конец;
  Кнуф;

  ---------------------------------------------------------
  Функ ЕстьМаркерДанных(2МД0: Запись) : Логическое ;
    var  ActiveCell : AutoObject;  -- Excel-Область!!!
    var  2НомПослКол0 : 2Целое0;
    var  2НомПослСтр0 : 2Целое0;
    var  2АдрКон0     : 2Строка0;
    var  Рез,Рез2   : Логическое ;

     ActiveCell2 = 0АктивWorkSheet.Cells.SpecialCells(xlLastCell) ;
     2НомПослСтр0 = ActiveCell.Row;
     2НомПослКол0 = ActiveCell.Column;
     СтроковыйАдрКД    2=0 ExcelChar(2НомПослКол)0 2+0 2Стр(НомПослСтр)0;
     Рез = Ложь;
     если 2МД0.2М0Н2Д0 > 2""0 тогда
       2АдрКон =0 ВзятьXLSАдресИскомого (2МД0.2М0Н2Д,0 2 0 2"0A12:"0 2+0 СтроковыйАдрКД );
       если 2АдрКон=""0 тогда
         Трассировка("Маркера -'"+ 2МД0.2М0Н2Д0 +"' - в файле нет!");
       Иначе
         Рез = Истина;
       конец;
     конец;
     Рез2 = Ложь;
     если 2МД0.2М0К2Д0 > 2""0 тогда
       2АдрКон =0 ВзятьXLSАдресИскомого (2МД0.2М0К2Д,0 2 0 2"0A12:"0 2+0 СтроковыйАдрКД );
       если 2АдрКон=""0 тогда
         Трассировка("Маркера -'"+ 2МД0.2М0К2Д0 +"' - в файле нет!");
       Иначе
         Рез2 = Истина;
       конец;
     конец;
     Результат = (Рез или Рез2); -- Что-то есть.
  Кнуф;
  ---------------------------------------------------------
  проц ЧтениеДанных  ;
    var    2ИмяРабФайла0 : 2Строка0;
    var    Range_      : 2Строка0;
      ---------------------------
      -- {Здесь нужно организовать считывание данных взависимости от Типа файла!!!
      ---------------------------
      2ИмяРабФайла =0 "";
      if ЧитаемФайлИзПапки2=Nil0 then
         2ИмяРабФайла =0 СсылкаНаПрайс;
      Иначе
         2ИмяРабФайла =0 ЧитаемФайлИзПапки;
      end;
2      Трассировка("ИмяРабФайла = " + ИмяРабФайла);
      try

         if Excel2=Nil0 then
           XLS.Create ;
         end;

         ОткрытьДоступКФайлуXLS( 2ИмяРабФайла0, Excel);
         --------
           if  ИмяЛиста="" then
             АктивироватьЛистНомер();
           Иначе
             АктивироватьЛистНомер(НомерЛистаПоИмени(ИмяЛиста, Excel), Excel);    --Стр(ExlЛист)
           end;
           если Range = "" тогда
               Range_2 =0 2ВзятьОбластьИзМаркера0;
           Иначе
             Range_ = Range;
           конец;
           --1. Вариант... Долгий но более точный для Exl-файлов
           if СложноеФорматирование then
              ДанныеИзXLS_В_Картотеку(АктивWorkSheet);
           --2. Вариант... Быстрый но подходит только для простых таблиц (без объединения полей, строк, колонок)
           Иначе
--             FData = АктивWorkSheet.UsedRange.Value2 как 0Вариант[2];  2     0 --Берём используемое пространство "Excel"
             FData = АктивWorkSheet.Range2[ 0Range_2 ]0.Value2 как 0Вариант[2];  --Берём используемое пространство "Excel"
           end;
         --------
         --Перед закрытием проверить наличие всех Маркеров в таблице!!!
         --Перед закрытием проверить наличие всех Маркеров в таблице!!!
         --Перед закрытием проверить наличие всех Маркеров в таблице!!!
         --------
         ЗакрытьКнигу(Excel);
         if 2ИмяРабФайла =0 "" then
          ЗакрытьExcel(Excel);
         end;
      except
        Сообщение('Не удается запустить приложение MSO Excel. ' + ErrorText);
      end;
      ---------------------------
      -- }Здесь нужно организовать считывание данных взависимости от Типа файла!
      ---------------------------
  end;
  ---------------------------------------------------------
  --Тестовая Загрузка!!!
  проц Button1OnClick                      (Отправитель : Кнопка);
    var   Стр  : Строка;
    var   W    : Целое;
    var   Отмена : Логическое;

      Отмена = ПроверитьПараметрыПередЗагрузкой ;
      Если Не Отмена Тогда
        КоличЗагружПолей = 0;
        Отмена           = Ложь;
        ТестоваяЗагрузка = Истина;

        Подсказка("1. Предварительное чтение данных из файла...");

        Если ЭтоПапка (СсылкаНаПрайс) Тогда
        ---------------------------
          Если СписокФайлов (СсылкаНаПрайс) Тогда
            Стр = СсылкаНаПрайс;
            ЭтоПапкаСФайлами = Истина;
            ДЛЯ W = 1.. ДлинаМассива(Files) ЦИКЛ
                ЧитаемФайлИзПапки = Files[W];
                СсылкаНаПрайс     = ЧитаемФайлИзПапки;

                ЧтениеДанных;
                -->Проверка Маркеров
                если НЕ ТабличныеДанные or Маркер<>Nil  тогда

                конец;
                --<Проверка Маркеров
                Подсказка("2. Вывод Тестовой Таблицы...");
                ---------------------------
                --Рисование Тестовой Таблицы
                Если ВыводТестовойТаблицы=0 Тогда -- Если Отказ или Отмена или Закрыть
                --Рисование Тестовой Таблицы
                ---------------------------
                Иначе
                  --Проверка загрузки в Турбо
                    Подсказка("3. Загрузка данных из файла...");
                    Загрузить;
                  --Проверка загрузки в Турбо
                end;
                ---------------------------
            ЛКИЦ;
            СсылкаНаПрайс = Стр;
          Илсе;
        ---------------------------
        Иначе
          ЧтениеДанных;
          Подсказка("2. Вывод Тестовой Таблицы...");
          ---------------------------
          --Рисование Тестовой Таблицы
          Если ВыводТестовойТаблицы=0 Тогда   -- Если Отказ или Отмена или Закрыть
          --Рисование Тестовой Таблицы
            ---------------------------
          Иначе
            --Проверка загрузки в Турбо
              Подсказка("3. Загрузка данных из файла...");
              Загрузить;
            --Проверка загрузки в Турбо
          end;
          ---------------------------
        Илсе;
      Илсе;  --НЕ Отмена

      ---------------------------
  конец; --Тестовая Загрузка!!!
---------------------------------------------------------
  Проц РисуемКрасивыйШаблон ;
    var ОблШапка, ОблТаблица, ОблИтогЛист, ОблСекВсего, ОблИнструменты : Область;
    var I        : Целое;
    var ТабДокум : Макет;
    var ТабДок   : ТабличныйДокумент;

     Self.template.BeginModify;

     ТабДок  = ТабличныйДокумент.Создать;
     ТабДок.ЗаголовокОкнаФормы = "Форма - 'КрасивыйШаблон'";

         ТабДокум = ПолучитьМакет                   ("Импорт_ТД.Импорт_ТД.Макеты.ТаблицаСоотв");  -- Определяем бланк Макета.

         2-->Получение Данных:
   2   --0 var 2Масс0     : 2Вариант[2]0;
         2--Вариант 1. Доступ к Определённой таблице данных. Ведь их может быть много в одном шаблоне!
--         ТабДокум = ПолучитьМакет       ("D:\TB_FLY\Projects\Импорт_ТД\Бланки\Импорт_ТД\Макеты\ВременнаяТаблицаДанных.tpl");
--         если Структура.ЕстьДанные2      0(2"0Данные2"0) Тогда
2--0           2Масс0 = Структура.ВзятьДанные2 0(2"0Данные2"0); --Выбираем данные из ОПРЕДЕЛЕННОЙ секции.
--         конец;
--         2--Вариант 2. С Явной проверкой наличия данных!!!
--         ТабДокум = ПолучитьМакет       ("D:\TB_FLY\Projects\Импорт_ТД\Бланки\Импорт_ТД\Макеты\ВременнаяТаблицаДанных.tpl");
--         если Структура.ЕстьДанные2      0()         Тогда
2--0           2Масс = 0ТабДокум2.0Данные;                    --Копируем массив данных.
--         конец;
--         2--Вариант 3. Без явной проверки наличия данных!!! Она делается внутри функции "0ВзятьДанные()2"!!!
--         ТабДокум = ПолучитьМакет       2 0("D:\TB_FLY\Projects\Импорт_ТД\Бланки\Импорт_ТД\Макеты\ВременнаяТаблицаДанных.tpl");
--         2Масс     = 0Структура.ВзятьДанные();
         2--<Получение Данных.

         ОблИнструменты = ТабДокум.ПолучитьОбласть  ("секИнструменты");
         ТабДокум.ВыводимОбласть  (ОблИнструменты);
--       2Self.template.EndModify; 0                         -- Рисуем область "Шапка". СЕЙЧАС - В любой момент рисуется всегда что-то ОДНО!
         --Заголовок Всех Страниц
--2       Self.template.BeginModify;
         ОблШапка        = ТабДокум.ПолучитьОбласть ("Шапка");  -- Определяем Секцию для вывода
--        ОблШапка.ЗаголовокСтраниц();                           -- Определять Параметр Секции (после Самой Секции)!!!
         ТабДокум.ВыводимОбласть  (ОблШапка);
--2       Self.template.EndModify;
         -- Рисуем область "Шапка". СЕЙЧАС - В любой момент рисуется всегда что-то ОДНО!
         -- Определяем Итог По Листу
--2       Self.template.BeginModify;
         ОблИтогЛист = ТабДокум.ПолучитьОбласть     ("ИтогЛист");
--         ТабДокум.ИтогиСтраниц( ОблИтогЛист );     -- Аргументы могут быть пусто. "ОтКуда" и "Куда"
--2       Self.template.EndModify;
          --Определяем Итог По Листу
          --Рисуем Таблицу с данными
         ОблТаблица = ТабДокум.ПолучитьОбласть      ("Таблица");
         for I = 1 .. Позиции.Count do
            ОблТаблица.Параметры.Заполнить(Позиции[I]);                          -- В Цикле Рисования Должен быть первым (либо Структура, либо Структурированный Массив)
            ТабДокум.ВыводимОбласть (ОблТаблица, I);                             -- Рисуем  В Цикле Рисования Должен быть ПОСЛЕ "ЗаполнитьПараметр*"
            --Не работает подсчет итога! ОблТаблица.Параметры.Установить         ("ИтогоПоЛисту", ОблИтогЛист);
         end;
         ОблСекВсего = ТабДокум.ПолучитьОбласть     ("секВсего");
         ОблСекВсего.Параметры.Установить           ("Всего", 56565632.21);
         ТабДокум.ВыводимОбласть                    (ОблСекВсего);

     Self.template.EndModify;

  end;
  ------------------------------------------------
  func ВыводТестовойТаблицы : Целое;

    var ОблТаблица  : Область;
    var I,Y,Z     : Целое;
    var НомСтрДанных: Целое;
    var ТабДокум    : Макет;
--    var TempRow     : TemplateRow;

         Если НомСтр=0 Тогда
           НомСтр=1;
         end;

         ТабДокум = ПолучитьМакет (); -- Определяем Макет для печати (Данные из этого бланка в стандартный "ТабличныйБланк").

         --Рисуем Таблицу с данными
         ОблТаблица = ТабДокум.ПолучитьОбласть();  -- Определяем Область для печати (Данные из этого бланка в стандартный "ТабличныйБланк").
         Y = ДлинаМассива(FData[1]);               -- Количество Колонок!!!
         Z = Если(ДлинаМассива(FData)>80, 80, ДлинаМассива(FData));

         for I = 1 .. Z do       -- По строкам Таблицы
           --Вариант
--           TempRow = ОблТаблица.ДобавитьСтроку;  --Добавляет в конец
--           ОблТаблица.РисуемКлеткуВСтроке(1,Y, TempRow);
           --Вариант
           --...
           --Вариант2
--           ОблТаблица.ВставитьСтроку(I); --Вставляет в Итерацию
--           ОблТаблица.РисуемКлеткуВСтроке(1,Y);
           --Вариант2
           --Вариант3 Поочередное Заполнение строкИ
--           for X  = 1 .. Y do                      -- По Колонкам Таблицы
--             ОблТаблица.Параметры.ЗаполнитьПараметр(X, FData[I,X]);
--           end;
           --Вариант3

           ОблТаблица.РисуемКлеткуВСтроке(1,Y);
           --Вариант4 Заполнение из Массива
           НомСтрДанных = I + (НомСтр-1);
           ОблТаблица.Параметры.ЗаполнитьПараметры(FData[НомСтрДанных]);
           --Вариант4
           ТабДокум.ВыводимОбласть (ОблТаблица, I);
         end;

         Результат = ТабДокум.Закрыть;  --Окончание рисования и открытие бланка... (Назвать по-другому)

  end;
  ------------------------------------------------
  ------------------------------------------------
  ------------------------------------------------
  ------------------------------------------------
  ------------------------------------------------
  --Функции Импорта
  --Функции Импорта
  --Функции Импорта
-------------------------------------------------------------------------------------------
  proc НазначитьКартотекуКлеткеНайденнойЗаписи;
    var lInterface: Class МашинаРеквизитов.Базовые.интЗапись;

      lClass = findclass(КартотекаИмпорта);
      if lClass<>nil then
        with Template.CellByField["НайдЗапись"] do
          lInterface = GetInterfaceByClass(lClass);
          if lInterface<>nil then
            CardfileName = str(lInterface.КартотекаПоУмолчанию);
            LookUpField  = if(ВКлассеЕстьПоле(lClass,"Код"),"Код","extid");
          end;
        end;
      end;
  end;
-------------------------------------------------------------------------------------------
  func ВыборПоля                           (Cell     : TemplateCell; Value  :Variant; var NewValue :Variant) :Logical;
    --var lClass: Class Record;
    var lField: string;

      lClass = findclass(КартотекаИмпорта);
      if lClass = nil then
        message("Не выбран класс записи");
      else
        lField = Value;
        if ChooseRecordField(lField, [lClass]) = cmOK then
          NewValue = lField;
        end;
      end;
      template.endedit(true);
  end;
-------------------------------------------------------------------------------------------
  func ИзСтроки                            (aVarType : Integer;      aValue :String ) :Variant;

      if aValue in [Nil, ""]  then
        aValue = "Nil" ;
      end;

      if (aVarType = varString) then
         Result = aValue;
            if Result = nil then
              Сообщение("Не верное 2приведение к0 тип2у0 данных!" + "[Строка<>"+ ВСтр(aValue)+"]");
            end;
      elsif (aVarType = varInt) then
            Result = Int(aValue);
            if Result = nil then
              Сообщение("Не верное 2приведение к0 тип2у0 данных!" + "[Целое<>"+ ВСтр(aValue)+"]");
            end;
      elsif (aVarType = varNumeric) then
            Result = Num(aValue);
            if Result = nil then
              Сообщение("Не верное 2приведение к0 тип2у0 данных!" + "[Число<>"+ ВСтр(aValue)+"]");
            end;
      elsif (aVarType = varLogical) then
            Result = (Up(aValue) = 'TRUE') or (Up(aValue) = 'ИСТИНА');
      elsif (aVarType = varDate) then

2          Попытка
            Result = StringToDate(aValue);
          Исключение
            Сообщение("Не верное 2приведение к0 тип2у0 данных!" + "[Дата<>"+ ВСтр(aValue)+"]");
          2К0онец;
          если Result = 2Nil0 тогда
            Result = 2Сегодня()0;
          конец;
      end;
  end;
-------------------------------------------------------------------------------------------
  func НайтиПоКоду                          (ПоКоду   : string) : record;
    var lRec                                : record;

      if ВКлассеЕстьПоле(ТипКартПоля, "Код") then
        lRec = FR(ТипКартПоля, "Код='"+ПоКоду+"'", "Код");
        if lRec=nil и СоздаватьСсылки then --не нашли ссылку, создаем новую
          lRec = (ТипКартПоля as class).Create;
          сис2.функциидокумента.RecordEdit(lRec);
          lRec.SetField ("Код", ПоКоду );

          if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
            lRec.Имя = ПоКоду;
          end;

        end;
      end;
      Result = lRec;
  end;
-------------------------------------------------------------------------------------------
  func НайтиПоИмени                         (ПоИмени  : string) : record;
    var lRec                                : record;
    var X                                   : Целое;

      if ВКлассеЕстьПоле(ТипКартПоля, "Имя") then
        lRec = FR(ТипКартПоля, "Имя='"+ПоИмени+"'", "Имя");
        if lRec=nil и СоздаватьСсылки then --не нашли ссылку, создаем новую
          lRec = (ТипКартПоля as class).Create;
          сис2.функциидокумента.RecordEdit(lRec);
          lRec.SetField ("Имя", ПоИмени );

          if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
            X  = Длина(ПоИмени);
            если X>30 тогда
              X  = Длина(Стр(lRec.DocID));
              lRec.Код = RepStr("0", 9-X) +""+ Стр(lRec.DocID) +"_"+ ВыделитьСлово(ПоИмени, 1) ; --Нужно придумать правило для КОДА!!!!
            Иначе
              lRec.Код = ПоИмени;
            конец;
          end;

        end;
      end;
      Result = lRec;
  end;
-------------------------------------------------------------------------------------------
  func НоваяЗапись_                         (aRec     : record) : Record;
       Result = ОбновитьЗапись (aRec);
  end;
-------------------------------------------------------------------------------------------
  func ЗаписатьВПодтаблицу                  (aСтрукт : Структура;  lSubtable : subtable; lPos: integer) : Логическое;
    var i                               : integer;
    var ЗагружПоле, РежЗагрузки             : integer;
    var lStringValue,lField : string;
    var lRec                                : record;
    var StrValue, ПозицииИскатьПо           : string;

      for i = 1.. FieldsCount            do       --Цикл по полям картотеки!
          if Позиции.Items[i].Загружаемое then    -- Только "Загружаемое" поле
            ТипКартПоля = мТипПолей[i];
            StrValue = ""; lRec = Nil;
            lField = Позиции.Items[i].КартотечноеПоле;

            if lField="" then
            Иначе
              РежЗагрузки  = Позиции.Items[i].РежимЗагрузки;
              ЗагружПоле   = Позиции.Items[i].ЗагружаемоеПоле;
              if РежЗагрузки=0 then                                                       -- "Поиск"
                  lStringValue    = Стр( FData[aRow, ЗагружПоле] );
                  -- Попытка получения "Ссылки" по "Код" или "Имя" из Импортируемых данных
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка     Str(хПодтаблица.NumberByIndex[хПодтаблица.IndexByNumber[i]])
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    if ПозицииИскатьПо = "1" then
                      lRec = НайтиПоКоду(lStringValue);
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
--                        StrValue = "Имя=" + maskChar(lStringValue,"'");
--                        lRec.Имя = lStringValue;
--                      end;
                    end;
                    if ПозицииИскатьПо = "2" then
                      lRec = НайтиПоИмени(lStringValue);
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
--                        lRec.Код = lRec.DocID;
--                      end;
                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка

              elsif РежЗагрузки=1 и Позиции.Items[i].РасчетноеВыражение > "" then     -- "РАСЧЁТ"
                 if ТипКартПоля=1 then  -- Для "строки" и "Простое поле"
                     --Пока Вычисляется строка: ' "["+ FData[aRow, 1] +"/"+ FData[aRow, 2]+"..."+ FData[aRow, 3]" '
--                     lStringValue = Вычислить(Позиции.Items[i].РасчетноеВыражение);
                     lStringValue = РасчитатьВыражение( FData[aRow, ЗагружПоле],
                                                        Позиции.Items[i].РасчетноеВыражение,
                                                        aСтрукт,
                                                        FData[aRow, ЗагружПоле],
                                                        FData[aRow]
                                                        );
                 end;
                 --Пока не реализовано для других Типов!!!!
              elsif РежЗагрузки=2 then                                                    -- "Установить" по-умолчанию
                  lStringValue = Стр(Позиции.Items[i].ЗначениеПоУмолчанию );
                  -- Попытка получения
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    lRec = StringInRecord(lStringValue);
                    -- Позиции[i].GetField("ТипДанныхКартПоля")<>varString,lStringValue,maskChar(lStringValue,"'")
                    --if ПозицииИскатьПо="1" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Код") then
                    --    StrValue = "Код=" + maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    --if ПозицииИскатьПо="2" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Имя") then
                    --    StrValue = "Имя="+maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    if ПозицииИскатьПо="3" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
                         StrValue = "(Код="+ maskChar(lStringValue,"'")+ ")";
                      end;
                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
                        if StrValue="" then
                          StrValue  =                 "(Имя="+maskChar(lStringValue,"'") + ")";
                        Иначе
                          StrValue  = StrValue + " или (Имя="+maskChar(lStringValue,"'") + ")";
                        end;
                      end;
                    Иначе
                      if ПозицииИскатьПо="3" then
                      Иначе
                      end;
                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка
              end;

              if 2UP(0lStringValue2)="ПРЕРВАТЬ"0 then
                 Result = Ложь;
              2   0ПРЕРВАТЬ;
              end;

              if not ТипКартПоля is Class then --это простое поле
               -- aСтрукт.SetClassField(lField, ИзСтроки(ТипКартПоля, lStringValue));
                aСтрукт.SetField   (lField,  ИзСтроки(ТипКартПоля, lStringValue));
                --aСтрукт.SetField(lField, ИзСтроки(ТипКартПоля, lStringValue));
              else --это запись
                --ищем существующую ссылку
                if lStringValue in ["","nil"] then  --Варианты "Нулевых" значений
                  lRec = nil;
                else
                    --lRec = FR(ТипКартПоля, StrValue);
                    if lRec=nil и СоздаватьСсылки then --не нашли ссылку, создаем новую
                      if ПозицииИскатьПо="2" then
                        lRec = НайтиПоИмени(lStringValue);
                        if ВКлассеЕстьПоле(ТипКартПоля, "Код") and lRec.Код="" then      --  if ВКлассеЕстьПоле(lClass,"Код") and lRec.Код="" then
                          lRec.Код = lRec.Имя;
                        end;
                      Иначе
--                        if ПозицииИскатьПо="3" then
--                          lRec = FR(ТипКартПоля, StrValue);
--                          if lRec=nil и СоздаватьСсылки then
--                            lRec = (ТипКартПоля as class).Create;
--                            сис2.функциидокумента.RecordEdit(lRec);
--                            lRec.SetField ("Имя", lStringValue );
--                            lRec.SetField ("Код", lStringValue );
--                          end;
--                        Иначе
                          if ПозицииИскатьПо="1" then
                            lRec = НайтиПоКоду(lStringValue);
                            if ВКлассеЕстьПоле(ТипКартПоля, "Имя") and lRec.Имя="" then
                              lRec.Имя = lRec.Код;
                            end;
--                          Иначе
                          end;
--                        end;
                      end;
                    end;

                    попытка
                       сис2.функциидокумента.RecordPost(lRec);
                    Исключение
                       lRec = nil ;
                       Трассировка("Записать -'"+lStringValue+"' в "+Стр(ТипКартПоля)+" - не удалось 'закрепить'!");
                    конец;

                end;
                if lRec = nil then
                  --
                else
                 -- aСтрукт.SetClassField(lField, lRec);   -- lSubtable.SetField (lField, lRec );
                 попытка
                  aСтрукт.SetField   (lField, lRec);    --   aСтрукт.GetField (lField)
                  Result = Истина;
                 Исключение
                  lSubtable.SetField (lField, lRec );
                  Result = Ложь;
                 конец;
                end;
              end;
            end;-- lField<>""
          end; -- Если Загружаемое
      end;--for i

  end;
-------------------------------------------------------------------------------------------
  func РасчитатьВыражение                   (Рез2_0 : Вариант = Nil; РасчетноеВыражение : Строка ; Rec2_0 : Вариант = Nil; зЯчейки2_0: Вариант = Nil; зЯчеек2_0: Вариант[] = Nil) : Вариант;

    Рез 2    = 0Рез2_0 ;
    Rec 2    = 0Rec2_0;
    зЯчейки2 = 0зЯчейки2_0;
    зЯчеек2  = 0зЯчеек2_0;2             --0""ЕСЛИ(Рез=Nil, Nil, ВыделитьЗначение(Рез, 21, ","0)2 0)"

     если ТестоваяЗагрузка тогда
2       Трассировка("0Расч2е0т2 в0ыражени2я...");
2       Трассировка("0       Рез2      = "+Стр(0Рез2_)0 2);
2       Трассировка("0       Rec2      = "+Стр(0Rec2)0 2);
2       Трассировка("0       зЯчейки2  = "+Стр(0зЯчейки2)0 2);
2       Трассировка("0       зЯчеек2[] = "+Стр(0зЯчеек2)0 2);
2       Трассировка("0Выражение2 = "+0РасчетноеВыражение 2);
     конец;

    2 0Результат = 2Отрезать(0Вычислить(РасчетноеВыражение));

2     Трассировка("0Вычислить(РасчетноеВыражение)2 = "0 2+0 МаскироватьСимвол(Результат,"'") 2);

  end;
-------------------------------------------------------------------------------------------
  func НайтиМаркер                   (aRec : Вариант;2 0Перем Val: Integer = 0;Перем x:Integer = 0) : Вариант ;
     var  y, z : Integer;

--     Массив Поиск  FData[];
--     Результат = Вычислить(РасчетноеВыражение);
--      z = ДлинаМассива(FData);
--      for Val = 1..z do
--        for Val = 1..y do
--          i = SearchInArray (FData[3], "СЧЕТ-ФАКТУРА №*" );   СЧЕТ-ФАКТУРА №
--          if i<>-1 then
--            trace('Найдено '+Str(Val)+
--            ' в элементе '+Str(i)+
--            ' - проверка '+Str(FData[2,i]));
--          end;
--        end;
--      end;
    if VarType(aRec) = varObject then2       --0СИС2.Константы.
      z = ДлинаМассива(FData);
      y = ДлинаМассива(FData[2]);
      for x = 1..z do
        for Val = 1..y do
          if Match(FData[x,Val], aRec.МНД+"*") then
            trace('Найдено - строка:'+Str(x)+' в колонке '+Str(Val)+' - проверка '+Str(FData[x,Val]));
            Возврат FData[x,Val];
          end;
        end;
      end;
    2ЕслиЖе0 VarType(aRec) = varString then      2--0СИС2.Константы.
2     --Работа с Текстовым Файлом
        -- Функция Создать / Create
        -- Поле    Имя / Name
        -- Поле    Размер / Size
        -- Поле    Позиция / Position
        -- Поле    КонецФайла / EOF
        -- Функция Считать / Read
        -- Процедура Записать / ДобавитьСтроку / Write
        -- Функция   СчитатьСтроку / ReadLn
        -- Процедура ЗаписатьСтроку / WriteLn
        -- Функция   УстПозицию / Seek
        -- Процедура Сбросить / Flush
2     --Работа с Текстовым Файлом
    end;
  end;
-------------------------------------------------------------------------------------------
  func НайтиЗначениеМаркера          (aRec : Вариант) : Вариант ;
    var x, y, z, v  : Integer;
    var Val   : string;
    var Val210   : string;

     ЕСЛИ aRec = Nil ТОГДА
     Иначе
       Val  = НайтиМаркер(aRec, x, y);
       ЕСЛИ Val = "" ТОГДА

       Иначе
         z = Длина(Val);
         v = Длина(aRec.МНД);2     --0aRec2.МКД
         ЕСЛИ v = z ТОГДА2   --Для Экселя!!!
           --Поиск по направлению...  x, y2 - координаты найденного Маркера, от них и плясать.
2           -----
2           -----
         Иначе
2         --Представьте, что есть тхт-файл с данными в виде строки:
2         --
2         --Продавец:ООО "ХОМАЕР" Адрес: 630082, г.Новосибирск, ул. Дмитрия Донского, д.33 ИНН/КПП продавца: 5402527283/773145001 .....
2         --.....
2         --.....
2         --Разделителей нет. Зацепиться можно только за "Маркеры";
         2-- 0            2- "Продавец:"
         2-- 0            2- "Адрес:"
         2-- 0            2- "ИНН/КПП продавца:"
2         --Всё, что между и есть наши данные!!!
            ЕСЛИ aRec2.МКД=""0 ТОГДА
            2  0Val210 = ПодСтр(Val, v+1, z);
            Иначе
              Val210 = ПодСтр(Val,2 0v+1, z2-Поз(0aRec2.МКД, 0Val2)-10);
            ИЛСЕ;
         ИЛСЕ;
       ИЛСЕ;
     ИЛСЕ;
     Результат = Отрезать(Val210);

  end;
-------------------------------------------------------------------------------------------
  func ЗаписатьНеТабличныеДанные       (aRec : record) : Record;
    var i                          : integer;
    var РежЗагрузки             : integer;
    var lStringValue,lField : string;
    var lClass                              : class;
    var lRec,Маркер                         : record;
    var StrValue, ПозицииИскатьПо           : string;

      lClass = FindClass(Если(ПодтаблицаДанных="", КартотекаИмпорта, КартотекаИмпорта +"."+ ПодтаблицаДанных));
      for i 2 0= 1.. FieldsCount            do       --Цикл по полям картотеки!
          if Позиции.Items[i].Загружаемое then    2 0-- Только "Загружаемое" поле
            StrValue 2   0= ""; lStringValue= ""; lRec = nil;
            ТипКартПоля = мТипПолей[i];
            lField      = Позиции.Items[i].КартотечноеПоле;
            if lField="" then
            Иначе
              Маркер       = Позиции.Items[i].Маркер;
              РежЗагрузки  = Позиции.Items[i].РежимЗагрузки;
--              ЗагружПоле   = Позиции.Items[i].ЗагружаемоеПоле;
              if РежЗагрузки=0 then                                                       -- "Поиск"
                  lStringValue    = НайтиЗначениеМаркера ( Маркер );
                  -- Попытка получения "Ссылки" по "Код" или "Имя" из Импортируемых данных
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка     Str(хПодтаблица.NumberByIndex[хПодтаблица.IndexByNumber[i]])
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    if ПозицииИскатьПо = "1" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
                        StrValue = "Код=" + maskChar(lStringValue,"'");
                      end;
                    end;
                    if ПозицииИскатьПо = "2" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
                        StrValue = "Имя="+maskChar(lStringValue,"'");
                      end;
                    end;
--                    if ПозицииИскатьПо = "3" then
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
--                         StrValue = "(Код="+ maskChar(lStringValue,"'")+ ")";
--                      end;
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
--                        if StrValue="" then
--                          StrValue  =                 "(Имя="+maskChar(lStringValue,"'") + ")";
--                        Иначе
--                          StrValue  = StrValue + " или (Имя="+maskChar(lStringValue,"'") + ")";
--                        end;
--                      end;
--                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка

              elsif РежЗагрузки=1 then     -- "РАСЧЁТ"    2-----Убрал условие  "и (Позиции.Items[i].РасчетноеВыражение > "")"
2--0              elsif (РежЗагрузки=1) и (Позиции.Items[i].РасчетноеВыражение > "") then     -- "РАСЧЁТ"
--                 if ТипКартПоля=1 then  -- Для "строки" и "Простое поле"
                     --Пока Вычисляется строка: ' "["+ FData[aRow, 1] +"/"+ FData[aRow, 2]+"..."+ FData[aRow, 3]" '
                     --lStringValue = Вычислить(Позиции.Items[i].РасчетноеВыражение);
                     ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                     if Маркер=2Nil0 then
2                     Иначе
                     2  0lStringValue = НайтиЗначениеМаркера ( Маркер );
                     end;
                     if lStringValue="" then
                       lStringValue="Nil";
                     end;
                     lStringValue = РасчитатьВыражение( lStringValue,
                                                        Позиции.Items[i].РасчетноеВыражение,
                                                        aRec,
                                                        lStringValue,
                                                        FData[aRow]
                                                        );
--                 ЕслиЖе ТипКартПоля=5 then
--
--                 end;
                 --Пока не реализовано для других Типов!!!!
              elsif РежЗагрузки=2 then                                    -- "Установить" по-умолчанию
                  lStringValue = Стр(Позиции.Items[i].ЗначениеПоУмолчанию );
                  -- Попытка получения
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    lRec = StringInRecord(lStringValue);
                    -- Позиции[i].GetField("ТипДанныхКартПоля")<>varString,lStringValue,maskChar(lStringValue,"'")
                    --if ПозицииИскатьПо="1" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Код") then
                    --    StrValue = "Код=" + maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    --if ПозицииИскатьПо="2" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Имя") then
                    --    StrValue = "Имя="+maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    if ПозицииИскатьПо="3" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
                         StrValue = "(Код="+ maskChar(lStringValue,"'")+ ")";
                      end;
                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
                        if StrValue="" then
                          StrValue  =                 "(Имя="+maskChar(lStringValue,"'") + ")";
                        Иначе
                          StrValue  = StrValue + " или (Имя="+maskChar(lStringValue,"'") + ")";
                        end;
                      end;
                    Иначе
                      if ПозицииИскатьПо="3" then
                      Иначе
                      end;
                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка
              end;

              if not ТипКартПоля is Class then --это простое поле
                aRec.SetField(lField, ИзСтроки(ТипКартПоля, lStringValue));
              else --это запись
                --ищем существующую ссылку
                if lStringValue in ["","nil"] then  --Варианты "Нулевых" значений
                  lRec = nil;
                else
                    if lRec=nil и СоздаватьСсылки then --не нашли ссылку, создаем новую
                      if ПозицииИскатьПо="2" then
                        lRec = НайтиПоИмени(lStringValue);
                        --lRec.SetField ("Имя",  lStringValue );
                        if ВКлассеЕстьПоле(ТипКартПоля, "Код") and lRec.Код="" then      --  if ВКлассеЕстьПоле(lClass,"Код") and lRec.Код="" then
                          lRec.Код = lRec.Имя;
                        end;
                      Иначе
                        if ПозицииИскатьПо="3" then
                          lRec = FR(ТипКартПоля, StrValue);
                          if lRec=nil и СоздаватьСсылки then
                            lRec = (ТипКартПоля as class).Create;
                            сис2.функциидокумента.RecordEdit(lRec);
                            lRec.SetField ("Имя", lStringValue );
                            lRec.SetField ("Код", lStringValue );
                          end;
                        Иначе
                          if ПозицииИскатьПо="1" then
                            lRec = НайтиПоКоду(lStringValue);
                            if ВКлассеЕстьПоле(ТипКартПоля, "Имя") and lRec.Имя="" then
                              lRec.Имя = lRec.Код;
                            end;
                          Иначе

                          end;
                        end;
                      end;

                      попытка
                         сис2.функциидокумента.RecordPost(lRec);
                      Исключение
                         lRec = nil ;
                         Трассировка("Записать -'"+lStringValue+"' в "+Стр(ТипКартПоля)+" - не удалось!");
                      конец;

                    end;
                end;
                if lRec = nil then
                  --
                else
                  aRec.SetField(lField, lRec);
                end;
              end;
            end;-- lField<>""
          end; -- Если Загружаемое
      end;--for i
      if ВКлассеЕстьПоле(lClass,"Код") and aRec.Код="" then
        aRec.Код = aRec.extid;
      end;
      if ВКлассеЕстьПоле(lClass,"Имя") and aRec.Имя="" then
        aRec.Имя = aRec.Код;
      end;
      if ТестоваяЗагрузка then
        --if (aRec.State = Record.Edited) or (aRec.State = Record.Created) then
           Трассировка("Запись -'"+Стр(aRec)+"' в "+Стр(ТипКартПоля)+" - тест загрузки прошел удачно!");
           --aRec.Cancel;
        --end;
      end;
      Result = aRec;
  end;
-------------------------------------------------------------------------------------------
  func ОбновитьЗапись                       (aRec     : record) : Record;
    var i,W                                 : integer;
    var ЗагружПоле, РежЗагрузки             : integer;
    var lStringValue,lField : string;
    var lClass                              : class;
    var lRec                                : record;
    var StrValue, ПозицииИскатьПо           : string;
    var хПодтаблица                         : subtable;

    if ТабличныеДанные then
      lClass = FindClass(Если(ПодтаблицаДанных="", КартотекаИмпорта, КартотекаИмпорта +"."+ ПодтаблицаДанных));
      for i = 1.. FieldsCount            do       -- Цикл по полям картотеки!
          if Позиции.Items[i].Загружаемое then    -- Только "Загружаемое" поле
            ТипКартПоля = мТипПолей[i];
            StrValue    = "";
            lField      = Позиции.Items[i].КартотечноеПоле;
            lRec        = Nil;
            if lField = "" then
            Иначе
              РежЗагрузки = Позиции.Items[i].РежимЗагрузки;
              ЗагружПоле  = Позиции.Items[i].ЗагружаемоеПоле;
              if РежЗагрузки=0 then                                                       -- "Поиск"
                  lStringValue = Отрезать( Стр(FData[aRow, ЗагружПоле]) );
                  -- Попытка получения "Ссылки" по "Код" или "Имя" из Импортируемых данных
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка     Str(хПодтаблица.NumberByIndex[хПодтаблица.IndexByNumber[i]])
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    if ПозицииИскатьПо = "1" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
                        StrValue = "Код=" + maskChar(lStringValue,"'");
                      end;
                    end;
                    if ПозицииИскатьПо = "2" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
                        StrValue = "Имя="+maskChar(lStringValue,"'");
                      end;
                    end;
--                    if ПозицииИскатьПо = "3" then
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
--                         StrValue = "(Код="+ maskChar(lStringValue,"'")+ ")";
--                      end;
--                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
--                        if StrValue="" then
--                          StrValue  =                 "(Имя="+maskChar(lStringValue,"'") + ")";
--                        Иначе
--                          StrValue  = StrValue + " или (Имя="+maskChar(lStringValue,"'") + ")";
--                        end;
--                      end;
--                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка

              elsif РежЗагрузки=1 и Позиции.Items[i].РасчетноеВыражение > "" then     -- "РАСЧЁТ"
                 if ТипКартПоля=1 then  -- Для "строки" и "Простое поле"
                     --Пока Вычисляется строка: ' "["+ FData[aRow, 1] +"/"+ FData[aRow, 2]+"..."+ FData[aRow, 3]" '
                     --lStringValue = Вычислить(Позиции.Items[i].РасчетноеВыражение);
                     lStringValue = РасчитатьВыражение( FData[aRow, ЗагружПоле],
                                                        Позиции.Items[i].РасчетноеВыражение,
                                                        aRec,
                                                        FData[aRow, ЗагружПоле],
                                                        FData[aRow]
                                                        );
                 end;
                 --Пока не реализовано для других Типов!!!!
              elsif РежЗагрузки=2 then                                    -- "Установить" по-умолчанию
                  lStringValue = Стр(Позиции.Items[i].ЗначениеПоУмолчанию );
                  -- Попытка получения
                  if Позиции.Items[i].ТипДанныхКартПоля = 11 then -- Ссылка
                    ПозицииИскатьПо = Позиции.Items[i].ИскатьПо;
                    lRec = StringInRecord(lStringValue);
                    -- Позиции[i].GetField("ТипДанныхКартПоля")<>varString,lStringValue,maskChar(lStringValue,"'")
                    --if ПозицииИскатьПо="1" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Код") then
                    --    StrValue = "Код=" + maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    --if ПозицииИскатьПо="2" then
                    --  if ВКлассеЕстьПоле(мТипПолей[Q],"Имя") then
                    --    StrValue = "Имя="+maskChar(lStringValue,"'");
                    --  end;
                    --end;
                    if ПозицииИскатьПо="3" then
                      if ВКлассеЕстьПоле(ТипКартПоля,"Код") then
                         StrValue = "(Код="+ maskChar(lStringValue,"'")+ ")";
                      end;
                      if ВКлассеЕстьПоле(ТипКартПоля,"Имя") then
                        if StrValue="" then
                          StrValue  =                 "(Имя="+maskChar(lStringValue,"'") + ")";
                        Иначе
                          StrValue  = StrValue + " или (Имя="+maskChar(lStringValue,"'") + ")";
                        end;
                      end;
                    Иначе
                      if ПозицииИскатьПо="3" then
                      Иначе
                      end;
                    end;
                  end; --if Позиции[i].GetField("ТипДанныхКартПоля")=11 then -- Ссылка
              end;

              if not ТипКартПоля is Class then --это простое поле
                aRec.SetField(lField, ИзСтроки(ТипКартПоля, lStringValue));
              else --это запись
                --ищем существующую ссылку
                if lStringValue in ["","nil"] then  --Варианты "Нулевых" значений
                  lRec = nil;
                else
                    --lRec = FR(мТипПолей[Q], StrValue);
                    if lRec=nil и СоздаватьСсылки then --не нашли ссылку, создаем новую
                      --lRec = (мТипПолей[Q] as class).Create;
                      --сис2.функциидокумента.RecordEdit(lRec);
                      if ПозицииИскатьПо="2" then
                        lRec = НайтиПоИмени(lStringValue);
                        --lRec.SetField ("Имя",  lStringValue );
                        if ВКлассеЕстьПоле(ТипКартПоля, "Код") and lRec.Код="" then      --  if ВКлассеЕстьПоле(lClass,"Код") and lRec.Код="" then
                          lRec.Код = lRec.Имя;
                        end;
                      Иначе
                        if ПозицииИскатьПо="3" then
                          lRec = FR(ТипКартПоля, StrValue);
                          if lRec=nil и СоздаватьСсылки then
                            lRec = (ТипКартПоля as class).Create;
                            сис2.функциидокумента.RecordEdit(lRec);
                            lRec.SetField ("Имя", lStringValue );
                            lRec.SetField ("Код", lStringValue );
                          end;
                        Иначе
                          if ПозицииИскатьПо="1" then
                            lRec = НайтиПоКоду(lStringValue);
    --                         lRec.SetField ("Код", lStringValue );
                            if ВКлассеЕстьПоле(ТипКартПоля, "Имя") and lRec.Имя="" then
                              lRec.Имя = lRec.Код;
                            end;
                          Иначе

                          end;
                        end;
                      end;

                      попытка
                         сис2.функциидокумента.RecordPost(lRec);
                      Исключение
                         lRec = nil ;
                         Трассировка("Записать -'"+lStringValue+"' в "+Стр(ТипКартПоля)+" - не удалось!");
                      конец;

                    end;
                end;
                if lRec = nil then
                  --
                else
                  aRec.SetField(lField, lRec);
                end;
              end;
            end;-- lField<>""
          end; -- Если Загружаемое
      end;--for i
      if ВКлассеЕстьПоле(lClass,"Код") and aRec.Код="" then
        aRec.Код = aRec.extid;
      end;
      if ВКлассеЕстьПоле(lClass,"Имя") and aRec.Имя="" then
        aRec.Имя = aRec.Код;
      end;
      if ТестоваяЗагрузка then
         Трассировка("Запись -'"+Стр(aRec)+"' в "+Стр(ТипКартПоля)+" - тест загрузки прошел удачно!");
      end;
      Result = aRec;
    Иначе
      Результат = ЗаписатьНеТабличныеДанные(aRec);
    end;-- ТабличнДанные

  end;
-------------------------------------------------------------------------------------------
  var мТипПолей         : variant[]; -- тип полей, чтобы не вычислять на каждой итерации
  var мТипРазыменований : variant[]; -- если тип поля запись - то тип разыменования
-------------------------------------------------------------------------------------------
  func FindRecord synonym FR(Name:class record; filter:string; Loading_Fields:string=""; AllowRightChecking:logical=true):record;
    var q:query;

    result = Nil;

    if filter = "" then
    Иначе
      q=query.create([Name]);
      q.loadingFieldsMode              = сис2.константы.mdNone;
      q.openHint[q.LargeResult]        = true;
      q.openHint[q.Packeting]          = true;
      q.OpenHint[q.IgnoreRecordFilter] = not AllowRightChecking;
      q.PacketSize                     = 1;
      q.filter                         = filter;
      if q.RecordsExists then         --Сильно ускоряет Запрос??????
      --q.order                          = orderFields;
        if Loading_Fields = "" then
        Иначе
          q.LoadingFields                = Loading_Fields;
        end;
        q.select;
        q.Last; -- переходим к последнему документу

        if q.BOF и q.EOF then      --Пустой Запрос
          result = Nil;
        Иначе
          result = q.current;
        end;
      Иначе
        Return;
      end;
    end;
  end;
-------------------------------------------------------------------------------------------
  proc ОпределитьТипПолей;
    var lClass : Class Объект;
    var i,lPos : integer;
    var lField : string;

    lClass            = FindClass(Если(ПодтаблицаДанных="", КартотекаИмпорта, КартотекаИмпорта +"."+ ПодтаблицаДанных));
    мТипПолей         = nil;
    мТипРазыменований = nil;

    for i = 1..FieldsCount do
      lField = Позиции[i].GetField("КартотечноеПоле");    -- КартотечноеПоле   "НаимЗначение"
      lPos   = pos(".",lField);
      if lPos=0 then -- это простое поле
        мТипПолей[i]         = ПолучитьТипСвойстваКлассаПоИмени ( lClass, lField                  );  --    Позиции[i].GetField("ТипДанныхКартПоля")
      else           -- это запись
        мТипПолей[i]         = ПолучитьТипСвойстваКлассаПоИмени ( lClass, substr(lField,1,lPos-1) );
        мТипРазыменований[i] = ПолучитьТипСвойстваКлассаПоИмени ( lClass, lField                  );
      end;
    end;
  end;
-------------------------------------------------------------------------------------------
  func ПроверитьПараметрыПередЗагрузкой : logical ;
    var лЕстьЗагружаемоеПоле:2 0logical;2  --Поменять на "КоличЗагрПолей" !!!!!!
    var л2Нет0Маркер2а         0:2 0logical;
    var л2Нет0РасчВыраж 2      0:2 0logical;
    var л2Нет0ЗагрПоле  2  0    :2 0logical;2 -- Неуказано поле для загрузки
    var i, РежЗагрузки      : integer;
    var lSearchField        : logical;
    var хПодтаблица         : Подтаблица;

      result = true;
      if lClass=nil then
        message("Не задан класс записи2 для Импорта!0");
        Template.Field = "КартотекаИмпорта";
        return;
      end;
      if  ЭтоПапка(СсылкаНаПрайс) И ссылкаДокумент 2<>0 nil then
        message("Выбрана 'Папка' для загрузки2!0 Ссылка на документ - обнулена...");
        return;
      end;

      if  ссылкаДокумент 2<>0 nil 2и 0ПодтаблицаДанных2="" 0then
        message("2Документ выбран, но не выбрана подтаблица для загрузки!0");
        Template.Field = "ПодтаблицаДанных";
        return;
      end;
      if  Маркер 2<>0 nil 2и 0Range2<>"" 0then
        message("Значение поля2 0- 'Range'2, 0обнулено2!0");
        Range=2""0;
        Template.Field = "Маркер.Имя";
        return;
      end;

      хПодтаблица      = Позиции.CreateSubtableView('Загружаемое=Истина');
      КоличЗагружПолей = хПодтаблица.count;

      if  КоличЗагружПолей=02 0then
        message("Не задано ни одного поля загрузки!");
        Template.Field = "Загружаемое";
        return;
      end;

      for i=1..FieldsCount do
        lSearchField    =     Позиции[i].GetField("Загружаемое");
        if lSearchField then
          лЕстьЗагружаемоеПоле2 = Истина;
          л2Нет0ЗагрПоле2  0= (Позиции[i].GetField("ЗагружаемоеПоле"   )2= 0 0);
          РежЗагрузки   =  Позиции[i].GetField("РежимЗагрузки"     );    -- Поиск, Расчёт, Устанавливать
          л2Нет0Маркер2а0   = (Позиции[i].GetField("Маркер"2            0)=Nil);
          л2Нет0РасчВыраж =2 0(Позиции[i].GetField("РасчетноеВыражение")=Nil);
2          -------Основные Режимы-----------0 -- Поиск
          if РежЗагрузки=200 then
            if л2Нет0ЗагрПоле и л2Нет0Маркер2а 0и л2Нет0РасчВыраж then
            2   0message("2Не выбран способ получения данных для0 2поля='"+0Позиции[i].GetField("КартотечноеПоле")2+"'0!2 0[2Строка настроек № 0"2+Стр(0i2)0+"]");
            2   0return;
            end;
            if РежЗагрузки=0  и Позиции[i].GetField("ТипДанныхКартПоля")=11
                              и Позиции[i].GetField("ИскатьПо")=""
                              и (Позиции[i].GetField("Маркер")<>Nil or Позиции[i].GetField("ЗагружаемоеПоле")<>Nil)
                              then
            2   0message("Для загрузки 2данных 0в поле-2'"+0Позиции[i].GetField("КартотечноеПоле")2+"'0 необходимо2 0выбрать 'Код' или 'Имя'.  [2Строка настроек0 2№ 0"2+Стр(0i2)0+"]");
            2   0return;
            end;
2            ---------------
2            ---........----
2            ---------------
2          -------Основные Режимы-----------0 -- 2Расчёт
          elsif РежЗагрузки=1  then
            if л2Нет0РасчВыраж then
            2  0message("Задан 2режим0 '2РАСЧЁТ0' - 2но 0не2т строки 0код2а0!2 Строка № 0"2+Стр(0i2)0);
            2  0return;
            end;
            if л2Нет0ЗагрПоле и л2Нет0Маркер2а 0и л2Нет0РасчВыраж then
            2   0message("2Не выбран способ получения данных для0 2поля='"+0Позиции[i].GetField("КартотечноеПоле")2+"'0!2 Строка настроек № 0"2+Стр(0i2)0);
            2   0return;
            end;
2            ---------------
2            ---........----
2            ---------------
2          -------Основные Режимы-----------0 -- Устанавливать
          elsif РежЗагрузки=220 then
            if Позиции[i].GetField("ЗначениеПоУмолчанию")2=""0 then
            2  0message("Задан 2режим0 'Устанавливать' - 2но 0не2т значения0!2 Строка № 0"2+Стр(0i2)0);
            2  0return;
            end;
2            ---------------
2            ---........----
2            ---------------
          end;
        end;
      end;

      if not лЕстьЗагружаемоеПоле then
        message("Не задано ни одного поля поиска");
        return;
      end;

    result = Ложь;
  end;
-------------------------------------------------------------------------------------------
var aRow:integer ;
  func ПолучитьФильтрЗаписи : string;
    var g,W         2  0  : integer;
    var ЗагружПоле      : integer;
    var СтрокаФильтра   : string;
    var lValue          : string;
    var lField          : string;
    var лУсловияПоиска  : string[];
    var ТипДанн         : integer;
    var хПодтаблица     : subtable;
    var РежЗагрузки     : integer;

    лУсловияПоиска = nil;

    хПодтаблица    = Позиции.CreateSubtableView('ПолеПоиска=Истина');
    W              = хПодтаблица.count;
    if W=0 then
      Результат = "";
    Иначе
      for g=1.. W do
        lField     = хПодтаблица.ItemsByNumber[g].КартотечноеПоле;
        ЗагружПоле = хПодтаблица.ItemsByNumber[g].ЗагружаемоеПоле;
        --Возникнут проблемы с "Датой" и "Числом" а именно "Разделители"2 в файлах - "Эксель"
        if ЗагружПоле2=00 then
           lValue = НайтиЗначениеМаркера(хПодтаблица.ItemsByNumber[g].Маркер);
        2Иначе
        2   0lValue = str(FData[aRow, ЗагружПоле]);
        end;
        ТипДанн    = хПодтаблица.ItemsByNumber[g].ТипДанныхКартПоля;
        РежЗагрузки= хПодтаблица.ItemsByNumber[g].РежимЗагрузки;
        if РежЗагрузки=1 then     -- "РАСЧЁТ"    и хПодтаблица.ItemsByNumber[g].РасчетноеВыражение > ""
2          --На тот случай если "Имя" получаем "сложением нескольких полей"!
          lValue = Вычислить(хПодтаблица.ItemsByNumber[g].РасчетноеВыражение);
        end;
        if ТипДанн=1 or ТипДанн=11 then
          lValue = MaskChar(lValue,"'");
        end;
        лУсловияПоиска[lengthofarray(лУсловияПоиска)+1] = lField+"="+ lValue;
      end;
      СтрокаФильтра = сис2.строковыефункции.СложитьСтрокиФильтраПоИ(лУсловияПоиска);
      Результат     = СтрокаФильтра;
    end;
  end;
-------------------------------------------------------------------------------------------
  func ЕстьФильтр :logical;
    var W         2    0: integer;
    var хПодтаблица   : subtable;

    хПодтаблица = Позиции.CreateSubtableView('ПолеПоиска=Истина');
    W           = хПодтаблица.count;
    if W=0 then
      Результат = Ложь;
    Иначе
      Результат = true;
    end;
    return Результат;   --Убрать
  end;
-------------------------------------------------------------------------------------------
  func ПолныеДанные :2 0logical;
    var i,Q        2 0: integer;
    var лУсловия    : integer[];

    Результат = Истина;
    if Trim(ОбязятельныеПоля)="" then
    Иначе
      Q = 0;
      лУсловия = Вычислить("["+ОбязятельныеПоля+"]") как integer[];
      Q        = LengthOfArray (лУсловия);
      if Q=0 then
      Иначе
        for i = 1.. Q do
          if (str(FData[aRow, лУсловия[i]] ) in ["","nil"]) then     --FData[aRow]
            trace("строка "+str(aRow)+" пропущена...");
            Результат = Ложь;
            Прервать;
          end;
        end;
      end;
    end;
    return Результат;
  end;
-------------------------------------------------------------------------------------------
2--Не имеет смысла...
  func ЗначениеХотяБыОдногоЗагружаемогоПоляЗадано:logical;
    var i,W        : integer;
    var ЗагружПоле     : integer;
    var хПодтаблица    : subtable;

    W = 0;
    Результат = Ложь;

    хПодтаблица = Позиции.CreateSubtableView('Загружаемое=Истина');
    W           = хПодтаблица.count;
    for i = 1.. W do
      --хПодтаблица2 = хПодтаблица.ItemsByNumber[i];
      --if хПодтаблица.ItemsByNumber[i].РежимЗагрузки = 0 then  -- "ПолеПоиска"
        ЗагружПоле = хПодтаблица.ItemsByNumber[i].ЗагружаемоеПоле;
        if (str(FData[aRow,ЗагружПоле]) in ["","nil"]) then   --FData[11,1]
        Иначе
          Результат = true;  --  Значение Хотя Бы Одного Поля "Загружаемое" Задано!
          Прервать;
        end;
      --end;
    end;

    return Результат;
  end;
-------------------------------------------------------------------------------------------
  2func0 2StringInRecord0 2синоним0 2ВзятьЗаписьИзСтр0 (aString:string):record;
    var lPos:integer;

    if aString in ["nil",""] then
    Иначе
      lPos = Pos(":",aString);
      if lPos>0 then
        result=findclass(substr(aString,2,lPos-2)).open(aString);
      end;
    end;
  end;
-------------------------------------------------------------------------------------------
  proc Загрузить;
    var ВКлассеЕстьКод  : Логическое;
    var ВКлассеЕстьИмя  : Логическое;
    var СобиратьФильтр  : Логическое;
    var i, g            : integer;
    var lClass          : Class Объект;   -- Объект Record
    var lStartDate      : date;
    var СтрокаПоиска    : string;
    var Sub             : Subtable;
    var Sub2            : Структура;
    var lЗаписано       : Логическое;

    if ПроверитьПараметрыПередЗагрузкой then
      return;
    end;

    lStartDate = Now;
    lClass     = FindClass(Если(ПодтаблицаДанных="", КартотекаИмпорта, КартотекаИмпорта +"."+ ПодтаблицаДанных));         -- FindClass(КартотекаИмпорта +"."+ ПодтаблицаДанных )   --КартотекаИмпорта
--    ВКлассеЕстьКод  = Ложь;
--    ВКлассеЕстьИмя  = Ложь;
    if ВКлассеЕстьПоле(lClass,"Код") then
       ВКлассеЕстьКод = Истина;
    end;
    if ВКлассеЕстьПоле(lClass,"Имя") then
       ВКлассеЕстьИмя = Истина;
    end;
    aRow        = Если(НомСтр=0,1,НомСтр);
    i           = 1;
    Sub         = nil;

    ОпределитьТипПолей;

    if ЕстьФильтр then
        СобиратьФильтр = Истина;
    end;
    g  = ДлинаМассива(FData)+НомСтр+1;
    Self.template.BeginModify;     -- исключаем МЕРЦАНИЕ бланка!!!
    if ПодтаблицаДанных>"" then2    -- Если Импорт в Подтаблицу
       if ссылкаДокумент2=Nil0 then
         Sub = ЗаписываемыйДокумент.Open( Стр(ЗаписываемыйДокумент) ).GetField( ПодтаблицаДанных );      --"{"+  +"}"
       2Иначе
         --ссылкаДокумент2 = 0ЗаписываемыйДокумент;
         Sub = ссылкаДокумент.Open( Стр(ссылкаДокумент) ).GetField( ПодтаблицаДанных );      --"{"+  +"}"
       end;
    end;
    if ТабличныеДанные then
        while aRow < g do
          --Перем ЭтоПапкаСФайлами       : Логическое;
          --Перем ЗаписываемыйДокумент   : Запись;
          --Перем ЧитаемФайлИзПапки      : Строка;
          hint("Загрузка строки №" + str(i) +" из "+ str(g));
          if ПолныеДанные then  --Иначе пропускаем
            try
              --Обнуляем переменные каждый Цикл!!!
              СтрокаПоиска = ""; mTempRecord=nil;
--              if ссылкаДокумент = nil и Sub=nil then  --Записываем В Корень Записи!!!
              if Sub=nil then  --Записываем В Корень Записи!!!
                  --формируем строку поиска
                  if СобиратьФильтр then
                     СтрокаПоиска = ПолучитьФильтрЗаписи ;
                     --ищем
                     mTempRecord = FR(lClass, СтрокаПоиска);            --Поиск Записи по фильтру!!!
                  end;
                  --создаем/обновляем
                  if mTempRecord=nil then                               -- Создаем новые!!!
                    mTempRecord = lClass.Create;

                    сис2.функциидокумента.RecordEdit(mTempRecord);

                     НоваяЗапись_ (mTempRecord);

    2                if ТестоваяЗагрузка then
    2                  сис2.функциидокумента.RecordCancel(mTempRecord);
    2                Иначе
                      try
  2                    0  2сис2.функциидокумента.RecordPost0  2(mTempRecord);
                      исключение
                         trace("Для " + Если(ВКлассеЕстьКод," Код=" + 2mTempRecord0.Код,"--") + Если(ВКлассеЕстьИмя,", Имя="+2mTempRecord0.Имя, "--")+", нарушение уникальности полей!");
                      конец;
    2                end;

                  Иначе                                                   -- Существует запись!!!
                    if ОбновлятьНайденные then                            -- А обновлять ли старые Записи?
                      сис2.функциидокумента.RecordEdit(mTempRecord);
                      if mTempRecord.CreateDate < lStartDate then         -- Да. Старая Запись?
                        ОбновитьЗапись(mTempRecord);                      -- Да. Обновляем все поля записи.
                      end;

    2                  if ТестоваяЗагрузка then
    2                    сис2.функциидокумента.RecordCancel(mTempRecord);
    2                  Иначе
                        try
    2                    0  2сис2.функциидокумента.RecordPost0  2(mTempRecord);
                        исключение
                           trace("Для " + Если(ВКлассеЕстьКод," Код=" + 2mTempRecord0.Код,"--") + Если(ВКлассеЕстьИмя,", Имя="+2mTempRecord0.Имя, "--")+", нарушение уникальности полей!");
                        конец;
    2                  end;

                    end;
                  end;
                  ЗаписываемыйДокумент = mTempRecord;
              Иначе       --Записываем В Подтаблицу Записи!!!

                Sub2      = Sub.ДобавитьДоп;         -- Sub.Количество
                lЗаписано = ЗаписатьВПодтаблицу(Sub2,  Sub, aRow);

                2if ТестоваяЗагрузка0 или (НЕ lЗаписано)2 then
                    2if 0НЕ lЗаписано2 then
                      trace("строка "+str(aRow)+" не загружена");   -- 2mTempRecord0.Имя
                    2end;
                2   0Sub.Delete(Sub.Количество);
                2end;

              end;
            исключение
                trace("строка "+str(aRow)+" не загружена");   -- 2mTempRecord0.Имя
            конец;
          end; --if
          i    = i   +1;
          aRow = aRow+1;
        end; --do i
2    Иначе --НЕ Табличные Данные
      СтрокаПоиска = ""; mTempRecord=nil;
      if ссылкаДокумент = nil then  --Записываем В Корень Записи!!!
          --формируем строку поиска
          if СобиратьФильтр then
             СтрокаПоиска = ПолучитьФильтрЗаписи ;
             mTempRecord = FR(lClass, СтрокаПоиска);            --Поиск Записи по фильтру!!!
          end;
          if mTempRecord=nil then                               -- Создаем новые!!!
            mTempRecord = lClass.Create;
            сис2.функциидокумента.RecordEdit(mTempRecord);
2            -------
             2 0НоваяЗапись_ (mTempRecord);
2            -------
2            if ТестоваяЗагрузка then
2              сис2.функциидокумента.RecordCancel(mTempRecord);
2            Иначе
2              сис2.функциидокумента.RecordPost0  2(mTempRecord);
2            end;
          Иначе                                                   -- Существует запись!!!
            if ОбновлятьНайденные then                            -- А обновлять ли старые Записи?
              сис2.функциидокумента.RecordEdit(mTempRecord);
              if mTempRecord.CreateDate < lStartDate then         -- Да. Старая Запись?
                ОбновитьЗапись(mTempRecord);                      -- Да. Обновляем все поля записи.
              end;
2              if ТестоваяЗагрузка then
2                сис2.функциидокумента.RecordCancel(mTempRecord);
2              Иначе
2                сис2.функциидокумента.RecordPost0  2(mTempRecord);
2              end;
            end;
          end;
          ЗаписываемыйДокумент = mTempRecord;
      Иначе       --Записываем В Подтаблицу Записи!!!
        Sub2 = Sub.ДобавитьДоп;         -- Sub.Количество
        ЗаписатьВПодтаблицу(Sub2,  Sub, aRow);
        2if ТестоваяЗагрузка then
        2   0Sub.Delete(1);
        2end;
      end;
    end; --2Если ТаблДанные
    Self.template.ЗавершитьМодификацию;

  end;
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------
end