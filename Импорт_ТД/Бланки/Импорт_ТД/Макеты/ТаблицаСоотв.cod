Class  'ТаблицаСоотв' ;

--------------------------------------------------------------------------------
inclass Public
--------------------------------------------------------------------------------
секИнструменты : TemplateSection;
Шапка          : TemplateSection;
Таблица        : TemplateSection;
ИтогЛист       : TemplateSection;
секВсего       : TemplateSection;

--Здесь НЕ ИСПОЛЬЗУЕТСЯ! Здесь Как пример.
-- Этот столбец можно добавить в бланк "N"-раз
столбРежимЗагрузки : TemplateColumn;
--Здесь НЕ ИСПОЛЬЗУЕТСЯ! Здесь Как пример.

БланкЗаказчик   : String    = "Импорт_ТД.Импорт_ТД.РедСоответствиеПолей"; --Кто меня по тревожил?

-------------------------------
-->Два варианта хранения данных:
-->Два варианта хранения данных:
-->Два варианта хранения данных:

--1. Двумерный Массив описанный в "Т9".
                            --ОтКуда ->
масСоответствие : Вариант[2]= [
                              ['секИнструменты',
                               'Шапка',
                               'Таблица',
                               'ИтогЛист',
                               'секВсего'],


                              --и Куда ->
                              ['секПриемник',
                               'секПриемник',
                               'секПриемник',
                               'секПриемник',
                               'секПриемник']
                              ];
--2. В Секции.
--В этой Секции как в Двумерном Массиве хранятся данные, это аналог - "масСоответствие"
--Только Массив описывать(заполнять) данными не технологично!
--Технологичнее скопировать из Екселя и вставить в Секцию. Присвоить имя секции... и всё.
--Структура Данных:
--<ИмяПерем>,<ЗначениеПерем>,<ТипПерем>
ИменаКолонок       : TemplateSection;
ИменаСтрок         : TemplateSection;
Данные             : TemplateSection;
Типы               : TemplateSection;

--<Два варианта хранения данных. Конец
--<Два варианта хранения данных. Конец
--<Два варианта хранения данных. Конец
-------------------------------


Нпп                   : Integer     [];
Загружаемое           : Логическое  [];
РежимЗагрузки         : Integer     [];
ЗначениеПоУмолчанию   : Вариант     [];
НаимЗначение          : Вариант     [];
ИскатьПо              : String      [];
КартотечноеПоле       : String      [];
ТипДанныхКартПоля     : Integer     [];
ТипДанныхЗначение     : String      [];
ЗагружаемоеПоле       : Integer     [];
ИмяЗагружПоля         : String      [];
ТипДанныхЗагрПоля     : Integer     [];
ColumnsXLS            : String      [];
РасчетноеВыражение    : String      [];

Всего                 : Число         ;
ИтогоПоЛисту          : Число         ;
--------------------------------------------------------------------------------
inobject Private

  func ПриОбзоре(Cell :TemplateCell; Value :Variant; var NewValue :Variant) :Logical;
    -- Обработка события нажатия у клетки кнопки обзора
    -- Параметры:
    --   Cell: клетка шаблона
    --   Value: старое значение в поле. Его тип зависит от типа поля.
    --   NewValue: новое значение в поле. Его тип зависит от типа поля.
     
    Result = True; -- Продолжаем стандартную обработку
  end;

  func ПриПроверке(Cell :TemplateCell; Index :Integer; var Value :Variant) :Logical;
    -- Проверка введенного значения
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
    --   Value: значение, которое нужно проверить
     
    Result = True; -- Разрешаем сохранить изменения в поле
  end;

  proc ПриРисовании(Cell :TemplateCell; Selected :Logical; var Color :Integer; var FieldColor :Integer;
 Font :Font);
    -- Обработка события рисования клетки
    -- Параметры:
    --   Cell: клетка шаблона
    --   Selected: Попадает ли клетка в выделенный блок
    --   Color: цвет фона клетки
    --   Font:  шрифт клетки
    --   FieldColor: цвет поля клетки
  end;

  func ПолеИскатьПоПриВходе(Cell :TemplateCell; Index :Integer; Action :Template.EnterTypes) :Logical;
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
    --   Action: тип входа (Вход,Вставка,Очистка)
     
    Result = True; -- Разрешаем войти в поле
  end;

  функ ПриНажатии           (Клетка :КлеткаШаблона; Действие :Шаблон.ТипыНажатия) :Логическое;
    -- Обработка события нажатия в зависимости от типа
    -- Параметры:
    --   Cell: клетка шаблона
    --   Action: тип нажатия (SingleClick, DoubleClick, EnterPressed, ButtonPressed)
     
    Result = Истина; -- Разрешаем стандартную обработку
  конец;
  функ ПриВходе                         (Клетка :КлеткаШаблона; Индекс :Целое; Действие :Шаблон.ТипыВхода) :Логическое;
    -- Параметры:
    --   Cell: клетка шаблона
    --   Index: номер кадра, в котором находится клетка
    --   Action: тип входа (Вход,Вставка,Очистка)
     
    Result = Истина; -- Разрешаем войти в поле
  конец;
  функ Cells_OnOutput                   (Клетка :КлеткаШаблона; Значение :Вариант; Действие :Шаблон.ТипыВывода;
 var Формат :Строка) :Вариант;
    -- Обработка вывода значения поля в зависимости от типа события
    -- Параметры:
    --   Cell: клетка шаблона
    --   Value: значение в поле клетки
    --   Action: тип вывода (Вывод,Вычисление,Копирование,Экспорт)
    --   Format: строка-формат вывода значения
     
    Result = Значение; -- Что получили, то и выводим
  конец;
--------------------------------------------------------------------------------
  func CellOnClick                      (Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    Result = True; -- Разрешаем стандартную обработку
  end;
  proc ПолеРежимЗагрузкиПриВыходе       (Cell :TemplateCell; Index  :Integer);
  end;
  func ПолеРасчетноеВыражениеПриВходе   (Cell :TemplateCell; Index  :Integer; Action :Template.EnterTypes) :Logical;
    Result = True; -- Разрешаем войти в поле
  end;
  func ПолеЗначениеПоУмолчаниюПриНажатии(Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    Result = True; -- Разрешаем стандартную обработку
  end;
  func ПолеЗначениеПоУмолчаниюПриВходе  (Cell :TemplateCell; Index  :Integer; Action :Template.EnterTypes) :Logical;
    Result = True; -- Разрешаем войти в поле
  end;
  func Ячейка_ПриНажатии                (Cell :TemplateCell; Action :Template.ClickTypes) :Logical;
    Result = True; -- Разрешаем стандартную обработку
  end;
  proc BlankOnCreate                    (Context :Variant);

  end;
--------------------------------------------------------------------------------
end