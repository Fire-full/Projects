class  "ТабличныйДокумент";

-- Интересные Функц!!!!
Import СИС2 Classes Константы , Функции, ФункцииРТТИ ;
-- Интересные Функц!!!!

--Import ТаблДокумент  Classes Области, Область, Параметры, Функции;
Import ТаблДокумент  Classes Параметры, Функции, СтруктурЫ;



inclass Public
--{ Реализация свойств и методов Класса.
Перем Фреймы                    : ФреймШаблона [];2 0   2-- Фреймы Бланка Приемника
2--Поля РазыменованиЯ
--var Област2ь0        : ТаблДокумент.Област2ь0;     --
--var Области        : ТаблДокумент.Области;     --
var Параметры           : ТаблДокумент.Параметры;   --
--var СтруктурЫ           : ТаблДокумент.Структуры;   -- ?????
2--.........
2--.........
2--Поля РазыменованиЯ
type Сдвиг =
    (БезСмещения=0, --(0)
     Вправо,        --(1)
     Вниз           --(2)
    ); 


  func Создать synonym Create :2 0ТаблДокумент.ТабличныйДокумент; --ТаблДокумент.
     Result = inherited Create;

     Result.Init2( 0Result2 )0;

     Result.Параметры = ТаблДокумент.Параметры.Create;
     Result.Параметры.Хозяин = Result; -- Self      Result.Параметры.Хозяин.Имя

     --Принтер
     Printer.CurrentPrinter;
     --Принтер

  end ;

inobject Public

  -------------------------------------------------
  func Вывести синоним Put ( Таб :2 0ТабличныйДокумент ):2 0Вариант;   --Вывести(<Таблица>)

  end ;
  -------------------------------------------------
  func ПолучитьМакет          (БланкШаблона: Строка = "") : ТабличныйДокумент;
--    var BlTemp    : BlankForm;
    var lClass    :Класс BlankForm;
    var ТабДок    : ТабличныйДокумент;
--  Макет - это "Место" (Шаблон бланка) где нарисованы секции, колонки, строки и клетки которые будут
--  ОБРАЗЦОМ (ПроОбразом) для копирования!
--  Все объекты Макета имеют - Цвет, Шрифт, размер такой какой нужно, Видимость или не видимость определяется тоже здесь.
--  При необходимости изменить один или несколько параметров, переходим в шаблон макета и там правим.
--  Код Класса "Макет" при этом - не изменяется!
    Трассировка("");
    ТабДок = ТабличныйДокумент.Создать;
    ТабДок.Хозяин = Self;

    Если БланкШаблона="" Тогда
      lClass        = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк");   --"ТабличныйБланк.tpl"
      БланкМакета   = lClass.Создать;
      БланкПриемник = БланкМакета;
    Иначе
      -- Внешний "*.tpl"-бланк с "данными" или "шаблоном".
      Если Match(БланкШаблона, "*.tpl") Тогда -- Внешний бланк с данными. Его нужно как-то инициализировать...
        ТабДок.БланкМакета.Загрузить( БланкШаблона );
        2ШаблонТекущМакета0 = ТабДок.БланкМакета.Шаблон;
      Иначе  -- Бланк Проекта с "данными" или "шаблоном".
--        lClass          = СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкШаблона);
        --ТабДок.БланкМакета     = lClass.Создать;
        --Определить каким бланком открыт "Этот" Класс!!!
--        ТабДок.БланкПриемник   = (СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкМакета.БланкЗаказчик)).Создать; -- Создали новый экземпляр (Он второй)
--        BlTemp                 = ТабДок.БланкПриемник;
--        ТабДок.БланкПриемник   = nil;                                        -- Переназначаем и удаляем второй.
--        ТабДок.БланкПриемник   = BlTemp.Objects[1];                          -- Работаем только с первым бланком (Бланк, который запустил этот бланк)!!!
      Илсе;

    Илсе;
                                                -- ТабДок.БланкМакета.Шаблон2.0RootFrame
    ТабДок.ВзятьВсеФреймы2Бланка0                 (2ШаблонТекущМакета.0RootFrame2, 0Фреймы);       -- Массив всех Фреймов в Бланке
    ТабДок.ЗаполнитьПоИменованныеОбъектыШаблона (ТабДок.мас2Области0,           Фреймы);
    ТабДок.ЗаполнитьИменаПолей                  (Фреймы);

    Фреймы    = Nil;
    Результат = ТабДок ;    -- Пока не знаю что возвращать
    --ТабДок= Nil;            -- Уничтожаем!!!
  end;

--   Область - это отдельная Секция со своим набором строк(или одной строки) и колонок(или одной колонки).
--   Область имеет свои свойства и методы характеризующие её.
--   При вызове этой Функции, добавляется НОВАЯ секция и эта секция становится "текущей"

--Вариант синтаксиса: По имени
--Синтаксис:
--ПолучитьОбласть(<ИмяОбласти>)
--Параметры:
--<ИмяОбласти> (обязательный)
--Тип: Строка.
--Имя области или адрес в формате "R1C1:R2C2", где число после "R" обозначает номер строки, число после "C" - номер колонки, символом ":" (двоеточие) разделены координаты левого верхнего и правого нижнего угла области. В качестве имени также можно передавать пересечение двух областей, записываемое как "<Имя области 1> | <Имя области 2>".
--Вариант синтаксиса: По адресу
--Синтаксис:
--ПолучитьОбласть(<НомерПервойСтроки>, <НомерПервойКолонки>, <НомерПоследнейСтроки>, <НомерПоследнейКолонки>)
--Параметры:
--<НомерПервойСтроки> (необязательный)
--Тип: Число.
--Номер первой строки области таблицы.
--<НомерПервойКолонки> (необязательный)
--Тип: Число.
--Номер первой колонки области таблицы.
--<НомерПоследнейСтроки> (необязательный)
--Тип: Число.
--Номер последней строки области таблицы.
--<НомерПоследнейКолонки> (необязательный)
--Тип: Число.
--Номер последней колонки области таблицы.
--Описание варианта метода:
--Если последняя строка и последняя колонка отсутствуют, то область задана единственной ячейкой. Если строки или колонки отсутствуют, то область задана диапазоном строк или колонок соответственно. Если метод вызван без параметров, то область задана всей таблицей.
--Возвращаемое значение:
--Тип: ТабличныйДокумент.
--Область, как новый табличный документ.
--Описание:
--Получает область табличного документа как табличный документ. Область может состоять из нескольких расположенных подряд строк или колонок, либо прямоугольной областью таблицы.
--Пример:
--Макет = Документы.РасходнаяНакладная.ПолучитьМакет("Накладная");
--Шапка = Макет.ПолучитьОбласть("Шапка");
--
  func ПолучитьОбласть        (НомерПервойСтроки     : Вариант = "";
                               НомерПервойКолонки    : Число   =  0;
                               НомерПоследнейСтроки  : Число   =  0;
                               НомерПоследнейКолонки : Число   =  0) : ТабличныйДокумент; --Должна возвращать "ТабличныйДокумент"
    var i         : Integer;
    var ТабДок    : ТабличныйДокумент;
    var имяСекции : Строка;
    var СтолбШабл : СтолбецШаблона;

         --Создаем "приемник" для области
      ТабДок = ТабличныйДокумент.Create;
      ТабДок.Хозяин = Self;

      if VarType(НомерПервойСтроки) = varString  then
        Если НомерПервойСтроки="" Тогда
          имяСекции = "секПриемник";
        Иначе
          имяСекции = НомерПервойСтроки;
        Илсе;
      Иначе
        if VarType(НомерПервойСтроки) = varInt  then
          --Здесь будет блок поиска Области по Номерам Строк и Колонок
          --Здесь будет блок поиска Области по Номерам Строк и Колонок
          --Здесь будет блок поиска Области по Номерам Строк и Колонок
        Илсе;
      конец;

        имяСекции = НомерПервойСтроки;
        i = SearchInArray ( мас2Области0[1], Up(имяСекции) );   -- По имени поля находим значение в массиве
        Если i=-1 Тогда
            Сообщение("Область загрузки - '"+имяСекции+"' - не найдена!");
            Результат = nil;
            ВОЗВРАТ Результат;
        Иначе

            2ШаблонТекущМакета0 = ТабДок.БланкМакета.Шаблон;

            2ШаблонТекущМакета0.ТекущаяСекция = 2ШаблонТекущМакета0.Секция[1];
            Если Стр(мас2Области0[2,I])="{СекцияШаблона}" Тогда
               2ШаблонТекущМакета0.CurrentSection.Присвоить((мас2Области0[2,I] как СекцияШаблона));
               --2ШаблонТекущМакета0.CurrentSection = (мас2Области0[2,I].КоличествоСтрок как СекцияШаблона);   --     ТабДок.БланкМакета
               --ТабДок.источникSec = мас2Области0[2,I];
            Иначе
              Если Стр(мас2Области0[2,I])="{СтолбецШаблона}" и Стр(мас2Области0[3,I])="{СекцияШаблона}" Тогда
              --Здесь нужно обрезать секцию до НужнойКолонки и после нее тоже!!!
                2ШаблонТекущМакета0.CurrentSection.Присвоить( СозданиеНовойСекции( мас2Области0[3,I] , мас2Области0[2,I] ));
              --Здесь нужно обрезать секцию до НужнойКолонки и после нее тоже!!!
              end;
            end;

            ТабДок.хКолРядов     = 2ШаблонТекущМакета0.CurrentSection.RowsCount;
            ТабДок.хКолСтолбцов  = 2ШаблонТекущМакета0.CurrentSection.ColumnsCount;
            ТабДок.ВысотаТаблицы = ВернутьВысотуСтрок   (2ШаблонТекущМакета0.CurrentSection);
            ТабДок.ШиринаТаблицы = ВернутьШиринуСтолбцов(2ШаблонТекущМакета0.CurrentSection);

            ВзятьВсеФреймы2Бланка0                (2ШаблонТекущМакета.0RootFrame2, 0Фреймы); -- Массив всех Фреймов в Бланке
            ЗаполнитьПоИменованныеОбъектыШаблона(ТабДок.мас2Области0,           Фреймы);
            ЗаполнитьИменаПолей                 (Фреймы);
--            ТабДок.хКолРядов     = ТабДок.источникSec.RowsCount;
--            ТабДок.хКолСтолбцов  = ТабДок.источникSec.ColumnsCount;
--            ТабДок.ВысотаТаблицы = ВернутьВысотуСтрок   (ТабДок.источникSec);
--            ТабДок.ШиринаТаблицы = ВернутьШиринуСтолбцов(ТабДок.источникSec);

            -- ТабДок.ФреймШаблонаПолучателя = мас2Области0[3,i]; -- мас2Области0[3,i].Владелец

        end;

    Результат = ТабДок;

  end;
  -------------------------------------------------------------------------
   --  ВставитьОбласть  (<ИсходнаяОбласть>, <ОбластьПриемник>, <Сдвиг>, <ЗаполнятьПараметры>)
  функ ВставитьОбласть  ( ИсходнаяОбласть :ВАРИАНТ; ОбластьПриемник : ВАРИАНТ = Nil; Сдвиг: Сдвиг = Nil; ЗаполнятьПараметры: ВАРИАНТ = Nil): ТабличныйДокумент ;

     var Sec   2         0:2 0TemplateSection;  --Источник Секция
     var SecD  2         0:2 0TemplateSection;  --Целевая  Секция
     var ThisCell2       0:2 0TemplateCell;
     var ThisTargetCell :2 0TemplateCell;
     var j,k, RowsКолич, ColumnsКолич : Integer;

     var ЗаполнятьДанными  : Логическое ;

        --{Проверки переменных
        Если 2 0Сдвиг2 = NIL0 Тогда

        2Иначе

        Илсе;

        Если 2 0ИсходнаяОбласть2 = NIL0 Тогда
        2  0Sec 2 0= источникSec;
        2Иначе
          if ИсходнаяОбласть.ClassType = ТабличныйДокумент then             -- Стр(ИсходнаяОбласть)
            ИсходнаяОбласть = (ИсходнаяОбласть как ТабличныйДокумент);
            Sec2 0= ИсходнаяОбласть.2ШаблонТекущМакета0.ТекущаяСекция;          -- SecTemp     ТекущаяСекция   ИсходнаяОбласть.БланкМакета.КоличествоСтрок
          Илсе;
          Если ИсходнаяОбласть.ClassType = TemplateSection Тогда
            Sec2 0= ИсходнаяОбласть;
          Илсе;
        Илсе;

        Если 2 0ОбластьПриемник2 = NIL0 Тогда
        2  0SecD 2 0= получательSec;
        2Иначе
          if     VarType(ОбластьПриемник)  = varInt      then
            SecD 2 0= ИсходнаяОбласть.2ШаблонТекущМакета0.ТекущаяСекция;
          ELSIF  ОбластьПриемник.ClassType = ТабличныйДокумент then              -- Стр(ИсходнаяОбласть)
            ОбластьПриемник = (ОбластьПриемник как ТабличныйДокумент);
            SecD 2 0= ОбластьПриемник.2ШаблонТекущМакета0.ТекущаяСекция;
          ELSIF  ОбластьПриемник.ClassType = TemplateSection Тогда
            SecD 2 0= ОбластьПриемник;
          Илсе;
        Илсе;

        Если 2 0ЗаполнятьПараметры2 = NIL0 Тогда
        2  0ЗаполнятьДанными 2 0= Ложь;
        2Иначе
          Если VarType(ЗаполнятьПараметры) = varObject Тогда
             ЗаполнятьДанными 2 0= Истина;
          Илсе;
          IF ЗаполнятьПараметры is Структура then  --Заполненная строка Подтаблицы
                ИсходнаяОбласть.Параметры.Заполнить(ЗаполнятьПараметры);
          Илсе;

          Если ЗаполнятьПараметры.ClassType = СтруктурЫ   Тогда  --СтруктурЫ
                --ИсходнаяОбласть.Параметры.Создать;
                ИсходнаяОбласть.Параметры.Заполнить(ЗаполнятьПараметры);
          Илсе;

        Илсе;
        --}Проверки переменных

        Если 0=0 Тогда           --Если "0", то это не повторяющ секция! "Заголовок", "Итог"...
          получательSec = ФреймШаблонаПолучателя.AddSection;      -- новая секция
  2        получательSec.Assign(Sec);                        0      2-- Копируем свойства секции
          --получательSec.Имя = Sec.Имя;
        Иначе
          Если получательSec = 2NIL0  Тогда
              Если ФреймШаблонаПолучателя.КоличествоСекций = 1 Тогда
                Если  ФреймШаблонаПолучателя.Section[1].КоличествоСтрок=1 и 1=1 Тогда
                  получательSec = ФреймШаблонаПолучателя.Section[1];    -- секция
        2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
                2Иначе
                  получательSec = ФреймШаблонаПолучателя.Section[1];    -- секция
        2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
                Илсе;
              Илсе;
          2Иначе
              получательSec = ФреймШаблонаПолучателя.AddSection;        -- новая секция
    2        0  2получательSec.Assign(Sec);0                                2-- Копируем свойства секции
              получательSec.Имя = Sec.Имя+ "_" + Str( 1 );
              --получательSec.InsertRow(2Sec0.RowsCount)2;
          Илсе;
        Илсе;

        ColumnsКолич = получательSec.ColumnsCount;
        RowsКолич   2 0= получательSec.RowsCount;

          for j=1..RowsКолич  do                   2    0 2  0-- цикл по всем строкам секции "_ИСТОЧНИК."
            for k=1..ColumnsКолич do             2  0 2      0-- цикл по колонкам 2    0секции "_ИСТОЧНИК."
              ThisTargetCell = получательSec.Cell[k, j];
              if ThisTargetCell.CellType  = Ядро.Template.StaticText  then
                --Клетка не является полем!!!
                --Обработку не проводим. Оставляем всё как есть.
              Иначе
                if ThisTargetCell.ReadOnly then
  2                Проверка(0ThisTargetCell.ReadOnly2, "Для Секции:'" + 0получательSec.2Имя + "', 0ThisTargetCell2[" + 0Str(k)2 + ":" + 0Str(j)2+ "] имеет свойство - ТОЛЬКО ДЛЯ ЧТЕНИЯ!");
                Иначе
              2    0ThisCell   2               0= Sec.Cell  [k,j];
                  ThisTargetCell            = ThisCell;
                2  0  --ThisTargetCell.Содержимое2 0 = ВернутьЗначениеПоля(ThisCell.Содержимое);
                    ThisTargetCell.Text;
                end;
              end;
            Od;
          Od;

  end;
  -------------------------------------------------------------------------
  функ СозданиеНовойСекции( Const Исходная :СекцияШаблона; Const НовыйСтолбец :СтолбецШаблона): СекцияШаблона ;
    var x          : Целое;
    var Col        : TemplateColumn;
    var НовИмя     : Строка;
    var НовНадпись : Строка;
    var Темп       : СекцияШаблона;

    Темп = Nil;
    Col  = НовыйСтолбец;  --Присвоить
    Темп = СоздатьНовыйБлок ( НовыйСтолбец );

    НовИмя     = Col.Имя;          --НовыйСтолбец.Имя???
    НовНадпись = Col.Надпись;      --НовыйСтолбец.Надпись???

    Темп.Имя   = "сек" + НовИмя ;  -- или "Надпись" ???
    Результат  = (Темп как СекцияШаблона);
  конец;
  -----------------------------------------------------------------
2  --НЕ МОЁ Доработать!!!
2  proc СформироватьКолонкиНачислений;
2    var i:integer;
2    var КолСт,КолНач: integer;
2    var Клетка: templatecell;

2    0ШаблонТекущМакета2.BeginModify;
2    try
2      Клетка = 0ШаблонТекущМакета2.CellByField["клПерНачШ"];
2      КолСт = Int(Клетка.owner.Column[Клетка.column-2].Caption);
2      if КолНач > 10 then
2        for i=1..10-1 do
2          ДобавитьКолонкуПоИмени("клПерНачШ");
2        end;
2      end;
2    finally
2      0ШаблонТекущМакета2.EndModify;
2    end;
2  end;
2  -----------------------------------------------------------------
  Функ  СоздатьНовыйБлок 2(aStartColumn:TemplateColumn0 2)0 : 2templatesection;
2    var i,g,НомСтНовКл0  2: integer;
2    var CurSec0          2: templatesection;
2    var NewSec0          2: templatesection;
2    var CurCol,NewCol0   2: templatecolumn;
2    var CurCell,NewCel 0 2:0 2templatecell;

    2CurSec = 0Nil 2;
    2CurCol = 0Nil2;
    2NewSec0 = Nil2;
2    CurSec = aStartColumn.Owner;
2    CurCol = CurSec.Column[aStartColumn.Number];
    2NewSec0 = 2ШаблонТекущМакета0.CurrentSection2;0          -- 2ШаблонТекущМакета0.SecTemp   2ШаблонТекущМакета0.CurrentSection

    Если 2NewSec0.ColumnsCount=1 Тогда
      2NewCol = NewSec.Column0[210]2;
    Иначе
2    0  2NewCol = NewSec.InsertColumn(1);
    Илсе;
2    NewCol.Caption = CurCol.Caption;
2    NewCol.Width   = CurCol.Width;
2    for i = 1..CurSec.RowsCount do
      Если 2NewSec.0RowsCount=1 и 2 i=10 Тогда
      Иначе
        2NewSec.0InsertRow(2i0);    --2NewSec.0RowsCount
      Илсе;
2      CurCell 0   2= CurSec.Cell[aStartColumn.Number , i];
      2NewCel0     2= NewSec.Cell[012, 0                   2i];
2      NewSec.Cell[012, i].Assign(CurCell);
2    end;
    Если 2CurSec.0RowsCount2 =0 2NewSec.0RowsCount Тогда
    Иначе
      Трассировка("");
    2end;
    Результат = 2NewSec0;
  Кнуф;
2  -----------------------------------------------------------------
2  --копирует столбцы, а caption увеличивает на 1, поэтому добавлять нужно в конец
2  proc КопироватьБлок(aStartColumn:TemplateColumn; aCount:integer);
2    var i,g,НомСтНовКл0  2: integer;
2    var CurCol,NewCol0   2: templatecolumn;
2    var CurSec0          2: templatesection;
2    var CurCell0         2: templatecell;

2    CurSec = aStartColumn.Owner;
2    --добавим столбцы
2    for i=1..aCount do
2      CurCol         = CurSec.Column[aStartColumn.Number + i - 1];
2      NewCol         = CurSec.InsertColumn(aStartColumn.Number + aCount + i - 1);
2      NewCol.Caption = str( int(CurCol.Caption)+1 );
2      NewCol.Width   = CurCol.Width;
2    end;
2    --скопируем клетки
2    for i = 1..CurSec.RowsCount do
2      for g = 1..aCount do
2        CurCell = CurSec.Cell[aStartColumn.Number + g - 1, i];
2        НомСтНовКл = aStartColumn.Number + aCount + g - 1;
2        if CurCell.IsMaster then --Мастер-клетка
2          CurSec.Cell[НомСтНовКл, i].Assign(CurCell);
2          CurSec.LinkCells(НомСтНовКл, i, CurCell.LinkedWidth, CurCell.LinkedHeight);
2        elsif CurCell.MasterCell = CurCell then -- Отдельная клетка
2          CurSec.Cell[НомСтНовКл, i].Assign(CurCell);
2        end;
2      end;
2    end;
2  end;
2  -----------------------------------------------------------------
2  proc СлитьКлетки (НаимПоля:Строка; Колич : integer);
2    var Клетка0 : templatecell;
    2var Column0 : integer;  --Начало Объединения
    2var 0Row200    2: integer;

2    0ШаблонТекущМакета2.beginmodify;
2    try
2       --растянем заголовок
2      Клетка0 = 0ШаблонТекущМакета2.CellByField[НаимПоля];
    2  Column0 = Клетка0.Column;                 -- Нашли номер Колонки
      Row200    2= Клетка0.0Row2;0                    2-- Нашли номер Строки
2      Клетка0.Owner.LinkCells(Column0, 0Row20, Колич+1, 1);  --????
2      --растянем заголовок
2    finally
2      0ШаблонТекущМакета2.endmodify;
2    end;
2  end;
2  -----------------------------------------------------------------
2  proc ДобавитьКолонкуПоИмени (НаимПоля:Строка);
2    var Клетка,Клетка0 : templatecell;
    2var Column 0        2: integer;
    2var Column0 0       2: integer;

2    0ШаблонТекущМакета2.beginmodify;
2    try
2      Клетка = 0ШаблонТекущМакета2.CellByField[НаимПоля];
    2  Column0 2= Клетка.Column;                  -- Нашли номер Колонки
2      КопироватьБлок(Клетка.owner.column[Column], 1);
2       --растянем заголовок
      2--СлитьКлетки (НаимПоля, 1);
2      --растянем заголовок
2    finally
2      0ШаблонТекущМакета2.endmodify;
2    end;
2  end;
2  -----------------------------------------------------------------
2  proc УдалитьКолонкуПоИмени (НаимПоля:Строка);
2    var Клетка : templatecell;
    2var Column : integer;

2    Клетка = 0ШаблонТекущМакета2.CellByField[НаимПоля]; -- Нашли поле
    2Column0 2= Клетка.Column;                  -- Нашли номер Колонки
2    Клетка.Owner.DeleteColumn(Клетка.Column-1, 1);

2  end;
2  --<НЕ МОЁ Доработать!!!
  -----------------------------------------------------------------
--}

--{ Реализация свойств и методов Объекта.
Перем НомерОбъекта                                          : Целое;
Перем Имя                                                   : Строка;
Перем мас2Области  0                                          : Вариант[2];  2    0--2 0Соответствие Названия поля и его Значения
Перем масПоИменованныхПолей                                 : Строка[];  2    0--2 0Соответствие Названия поля и его Значения

Перем НомерФорматаБумаги                                    : Целое;

Перем Хозяин                    Synonym  Owner              : Вариант;
Перем ТекущаяОбласть            синоним CurrentArea         : ТабличныйДокумент ;
Перем ФреймШаблонаПолучателя                                : ФреймШаблона;
Перем БланкМакета                                           : BlankForm;
Перем 2ШаблонТекущМакета     0                                : 2template0;
Перем БланкПриемник                                         : BlankForm;

Перем источникSec                                           : TemplateSection;
Перем получательSec                                         : TemplateSection;
Перем хКолРядов                                             : integer;            --var
Перем хКолСтолбцов                                          : integer;            --var

Перем КоличествоФорматовБумаги  Synonym  PaperFormatsCount  : Целое;       --     = Принтер.PaperFormatsCount;
Перем КоличествоПринтеров       Synonym  PrintersCount      : Целое;       --     = Принтер.PrintersCount;
Перем ФорматБумаги              Synonym  PaperFormat        : Строка;       --    = Принтер.PaperFormat[НомерФорматаБумаги];
--Перем  Принтер                   Synonym  Printer
Перем ТекущийФорматБумаги       Synonym  CurrentPaperFormat : Строка;     --    = Принтер.CurrentPaperFormat;
Перем ТекущийПринтер            Synonym  CurrentPrinter     : Строка;     --    = Принтер.CurrentPrinter;
Перем АльбомныйРежим            Synonym  LandscapeMode      : Логическое;     --= Принтер.LandscapeMode
Перем Печатает                  Synonym  Printing           : Логическое;     --= Принтер.Printing;
Перем ВысотаСтраницы            Synonym  PageHeight         : Целое;     --     = Принтер.PageHeight;
Перем ШиринаСтраницы            Synonym  PageWidth          : Целое;     --     = Принтер.PageWidth;

-- Проц НачатьПечать / BeginPrint
-- Проц ЗавершитьПечать / EndPrint
-- Проц ОтменитьПечать / AbortPrint


Перем ЗаголовокОкнаФормы                 : Строка ;

--Определили, что этот ТД:
Перем ЗаголовокСтраниц                   : Логическое;
Перем ИтогиСтраниц                       : Логическое;

Перем ВысотаТаблицы                      : Целое ;    --Нужно считать каждый раз при изменении
Перем ШиринаТаблицы                      : Целое ;    --Нужно считать каждый раз при изменении

  -------------------------------------------------
--Эти поля Зарезервированны для Данных!!!
ИменаКолонок : TemplateSection;
Данные       : TemplateSection;
Типы         : TemplateSection;
--Эти поля Зарезервированны для Данных!!!
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------

  функ Обновить : Логическое ;

    КоличествоСтраниц;


    Результат = Истина;
  конец;
  -------------------------------------------------

  proc Init2(0CurAr2a : 0ТабличныйДокумент2)0;
    var lClass    :Класс BlankForm;

     НомерОбъекта = CurAr2a0.ЧислоОбъектов;
     Имя = "ТабДокумент_" + Стр(НомерОбъекта);

    -- БланкМакета  = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк").Создать; --"ТабличныйБланк.tpl"
    -- БланкМакета.ЗаголовокОкнаФормы  = ЗаголовокОкнаФормы;
     --ОчиститьПеременные;
     мас2Области0               = Nil;
     БланкМакета              = Nil;
     БланкПриемник            = Nil;
     КоличествоФорматовБумаги = Принтер.PaperFormatsCount;
     КоличествоПринтеров      = Принтер.PrintersCount;
     ФорматБумаги             = Принтер.PaperFormat[6];
     ТекущийФорматБумаги      = Принтер.CurrentPaperFormat;
     ТекущийПринтер           = Принтер.CurrentPrinter;
     АльбомныйРежим           = Принтер.LandscapeMode;
     Печатает                 = Принтер.Printing;
     ВысотаСтраницы           = Принтер.PageHeight;
     ШиринаСтраницы           = Принтер.PageWidth;

     источникSec              = Nil;
     получательSec            = Nil;


     CurrentArea2       = 0CurAr2a0;
    -- Хозяин            2= 0CurAr2a0.Parent;  --CurAr2a0.Владелец    CurAr2a0.ChildClasses    CurAr2a0.ClassType
--     Хозяин            2= 0CurAr2a0.ParentClass ;
--      if Хозяин = nil then
--        Message("У класса:"+ CurAr2a0.ClassName + " нет родительского");
--      fi;
        --!!!!!!!!!!!!!!!!!!!!!!!!
     lClass      = СИС2.ФункцииКонсоли.НайтиФормуБланка("ВременныйБланк");
     CurrentArea.БланкМакета = lClass.Создать;
--     Если CurrentArea.БланкМакета.Template.ТекущийФрейм.SectionsCount=0 Тогда
--       CurrentArea.БланкМакета.SecTemp = CurrentArea.БланкМакета.Template.ТекущийФрейм.InsertSection(1);   -- БланкМакета.Шаблон.ТекущийФрейм.Имя = "RootFrame"
--     Илсе;
     lClass        = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк");
     CurrentArea2.0БланкПриемник = lClass.Создать;
        --!!!!!!!!!!!!!!!!!!!!!!!!
     2ШаблонТекущМакета = 0CurrentArea2.0БланкМакета2.template0;       --2ШаблонТекущМакета0.Владелец

  end ;
  -------------------------------------------------
  функ КоличествоСтраниц  синоним PageCount : Целое ;

    Результат = Если(ВысотаТаблицы=0, 0, Цел(ВысотаСтраницы/ВысотаТаблицы) );  --Не верное значение!!!!
  конец;
  -------------------------------------------------
  функ НайтиЗначение синоним FindValue : ТабличныйДокумент ;
    
    --Результат = Область;
  конец;
  -------------------------------------------------
  функ НайтиТекст    синоним FindText  :ТабличныйДокумент;
    
    --Результат = Область;
  конец;
  -------------------------------------------------
  Функ ВзятьВсеФреймы2Бланка0   (TempSec:2 0ФреймШаблона2; 0var2 arr0Temp2 0: ФреймШаблона2[] = Nil0) :Целое;
--Для поиска "Нашей" секции в бланке!
    var j,N    : Integer;

      Если TempSec=2Nil0 Тогда
      2Иначе
        N=TempSec.FramesCount;                         -- Кол. Фреймов в бланке
        Если N=200 и ДлинаМассива(Фреймы)=0 Тогда        -- Кол. Фреймов в бланке2 = 0.0 RootFrame2!
           ВставитьВМассив (2arr0Temp, 1 , TempSec );
        2Иначе
           for j= 1..  N  do                             -- Цикл по Фреймам бланка
             ВставитьВМассив (2arr0Temp, ДлинаМассива(2arr0Temp)+1 , TempSec.Frame[j] );
             ВзятьВсеФреймы2Бланка0 (TempSec.Frame[j]2, arr0Temp);
           end;
        Илсе;
      Илсе;

    Результат = ДлинаМассива(2arr0Temp);
  Кнуф;
  -------------------------------------------------
  Функ ЗаполнитьПоИменованныеОбъектыШаблона  (var мас2Обл0 :2 0Вариант2[022]0;   Фреймы :2 0ФреймШаблона2[]0) :Логическое;
    var j,z,x,k      : Integer;
    var ColumnsCount : Integer;
    var RowsCount    : Integer;
    var Sect         : TemplateSection ;

    -- мас2Области0 = Nil;
    for j=1.. ДлинаМассива(Фреймы)  do            -- По Фреймам бланка...
      for z=1.. Фреймы[j].SectionsCount  do       -- По Секц. Фрейма
        Sect = Фреймы[j].Section[z];
        Если Sect.Имя = "" Тогда
          Sect.Имя = Стр(z);  --????Насколько это необходимо
        Илсе;
2        0ВставитьВМассив (мас2Обл0[1], z, 2Up(0Sect.Имя)2     0);
2        0ВставитьВМассив (мас2Обл0[220], z, Sect2    0     2    0);
2        0ВставитьВМассив (мас2Обл0[230], z, Фреймы[j]    2    0);
        ВставитьВМассив (мас2Обл0[4], z, 2Up(0Фреймы[j].Имя));
        --Поиск Именованных Колонок
        ColumnsCount = Sect.ColumnsCount;
        for x=1.. ColumnsCount  do
          Если Sect.Column[x].Имя = "" Тогда
            Sect.Column[x].Имя  = Стр(x);
          Илсе;
          Если Sect.Column[x].Надпись = "" Тогда
            Sect.Column[x].Надпись  = Стр(x);
          Илсе;
            k  =  LengthOfArray (мас2Обл0[1]);
    2        0ВставитьВМассив (мас2Обл0[1], 1+k, 2Up(0Sect.Column[x].Имя));
    2        0ВставитьВМассив (мас2Обл0[220], 1+k, Sect.Column[x]2    0    );
    2        0ВставитьВМассив (мас2Обл0[230], 1+k, Sect     2         0    );
    2        0ВставитьВМассив (мас2Обл0[4], 1+k, 2Up(0Sect.Имя) 2     0    );
        Od;
        --Поиск Именованных Строк
        RowsCount = Sect.RowsCount;
        for x=1.. RowsCount  do
          Если Sect.Row[x].Имя = "" Тогда
            Sect.Row[x].Имя = Стр(x);
          Илсе;
          Если Sect.Row[x].Надпись = "" Тогда
            Sect.Row[x].Надпись = Стр(x);
          Илсе;
            k  =  LengthOfArray (мас2Обл0[1]);
    2        0ВставитьВМассив (мас2Обл0[1], 1+k, 2Up(0Sect.Row[x].Имя));
    2        0ВставитьВМассив (мас2Обл0[220], 1+k, Sect.Row[x]2    0    );
    2        0ВставитьВМассив (мас2Обл0[230], 1+k, Sect     2      0    );
            ВставитьВМассив (мас2Обл0[4], 1+k, 2Up(0Sect.Имя) 2  0    );
        Od;
      Od;
    Od;

    Результат = (ДлинаМассива(мас2О0б2л0)>0) ;

  Кнуф;
  -------------------------------------------------
  func ЗаполнитьИменаПолей (Фреймы :2 0ФреймШаблона2[]0) : Логическое ;
    var j,z,x,y,a    : Integer;
    var ColumnsCount : Integer;
    var RowsCount    : Integer;
    var Sect         : TemplateSection ;
    var локCell      : TemplateCell ;

      масПоИменованныхПолей = Nil; a = 0;
      for j=1.. ДлинаМассива(Фреймы)  do            -- По Фреймам бланка...
        for z=1.. Фреймы[j].SectionsCount  do       -- По Секц. Фрейма
          Sect = Фреймы[j].Section[z];
          RowsCount    = Sect.RowsCount;
          ColumnsCount = Sect.ColumnsCount;
          for x=1.. ColumnsCount  do
            for y=1.. RowsCount  do
               локCell = Sect.Клетка[x, y];
               Если локCell.Contents=""  Тогда
               Иначе
                 a = a + 1;
                 ВставитьВМассив( масПоИменованныхПолей, a, локCell.Contents);
               Илсе;
            Od;
          Od;
        Od;
      Od;
    Результат = (a > 0) ;
  Кнуф;
  -------------------------------------------------
  Функ ВзятьСекциюПоИмени     (ШАБЛОН: Template; Имя: Строка):  TemplateSection;
    var j,z  : Integer;
    var Sect : TemplateSection;
      Результат =2 Nil0; Фреймы =2 Nil0;
      ВзятьВсеФреймы2Бланка0 (ШАБЛОН.RootFrame2, 0Фреймы); -- Массив всех Фреймов в Бланке
      for j=1.. ДлинаМассива(Фреймы)  do               -- По Фреймам бланка...
        for z=1.. Фреймы[j].SectionsCount  do          -- По Секц. Фрейма
          Sect = Фреймы[j].Section[z];
          если Sect.Имя = Имя тогда  2 0 -- Если наша секция
              Результат = Sect;
              ВОЗВРАТ;
          конец;
        Od;
      Od;
  Кнуф;
  -------------------------------------------------
  func ИндексСтроки           (const Cell :TemplateCell) :Integer;
    var locSec :TemplateSection;

    locSec = Cell.Section;
    if locSec.EnableRepeat and locSec.Count > 0 then
      if locSec.Subtable <> nil then
        Result = Int(locSec.Subtable.IndexByNumber[Cell.Frame]) + 1;
      else
        Result = Cell.Frame;
      end;
    end;
  end;
  -------------------------------------------------
  func ЕстьДанные (Temp:Вариант=Nil) : Логическое;
    var i : Целое;
      Result = Ложь;
      Если Temp = Nil Тогда
        i = SearchInArray(мас2Области0[1], "ДАННЫЕ");
        Если i=-1 Тогда
          Трассировка("В шаблоне, таблица данных с именем:'ДАННЫЕ' - отсутствует!");
          Result = Ложь;
        Иначе
           Если мас2Области0[220,i] = Nil Тогда
           Иначе
             Данные = мас2Области0[220,i];
             Если Данные.ColumnsCount >1 или
                  Данные.RowsCount    >1 Тогда
                Result = Истина;
             end;
           end;
        end;
      Иначе
        i = SearchInArray(мас2Области0[1], Up(TEMP));
        Если i=-1 Тогда
          Трассировка("В шаблоне, таблица данных с именем:'" +TEMP+ "' - отсутствует!");
          Result = Ложь;
        Иначе
           Если мас2Области0[220,i] = Nil Тогда
           Иначе
             Данные = мас2Области0[220,i];
             Если Данные.ColumnsCount >1 или
                  Данные.RowsCount    >1 Тогда
                Result = Истина;
             end;
           end;
        end;
      end;
  end;
  -------------------------------------------------
  func ВзятьДанные( Temp:Вариант=Nil; ТИПП : Integer=Nil):Вариант;
    var i,X,Y           : Целое;
    var Вертикально     : Логическое;
    var Горизонтально   : Логическое;
    var Приводить       : Логическое;
    var ТипыПолей       : Вариант[];
    var Сообщ           : Строка;
    var Contents        : Строка;
2  0  2var ТекущаяОбласть 0 2: 0Вариант2;0 --Нужен Вариант именно "Структуры"!!!
    var ТМП             : Вариант[1];
    var ТМП2            : Вариант[2];
    var НеПриводить     : Логическое;

     i = 0; Сообщ ="";
     ТипыПолей       = Nil;
     Вертикально     = Ложь;
     Горизонтально   = Ложь;
     Приводить       = Ложь;

     НеПриводить = (ТИПП in [Nil, 0]);

     Если Temp = Nil Тогда
     Иначе
       -- Temp = 2Текущ0ая2Область0;
     end;
        если ЕстьДанные( Temp ) Тогда
        --Определяем Структуру данных
          если ЕстьТипы  Тогда
            Приводить = Истина;
            Если Типы.ColumnsCount = 1 Тогда -- Только Так!!
              Вертикально = Истина;
              для X = 1.. Типы.RowsCount цикл
                ВставитьВМассив(ТипыПолей, X, ВернутьТипПоля(Типы.Клетка[1,X].Contents) );
              конец;
            end;
            Если Типы.RowsCount    = 1 Тогда -- Только Так!!
              Горизонтально = Истина;
              для Y = 1.. Типы.ColumnsCount цикл
                ВставитьВМассив(ТипыПолей, Y, ВернутьТипПоля(Типы.Клетка[Y,1].Contents) );
              конец;
            end;
          конец;

          если i = 0 Тогда  --Данные без "Заголовков"
             Если Данные.RowsCount>1 Тогда   --Двумерный
               ТМП2 = (ТМП2 as Вариант[2]);
               Для Y = 1.. Данные.RowsCount цикл
                 для X = 1.. Данные.ColumnsCount цикл
                    Contents = Данные.Клетка[X,Y].Contents ;
                    если НеПриводить Тогда --Нет Типа полей!
                      ВставитьВМассив(ТМП2[Y], X, Contents);
                    Иначе
                      ВСТАВИТЬВМАССИВ(ТМП2[Y], X, ИзСтроки(ТИПП, Contents));
                    конец;
                 конец;
               Лкиц;
             Иначе                           --Одномерный
               Y = 1;
               ТМП = (ТМП as Вариант[1]);
               для X = 1.. Данные.ColumnsCount цикл
                 ВставитьВМассив(ТМП, X, Данные.Клетка[X,Y].Contents);
               конец;
             Илсе;
          конец;
        конец;

-- varUnknown : Integer = 0;  -- неизвестный тип
-- varString  : Integer = 1;  -- строка
-- varInt     : Integer = 2;  -- 4-байтовое целое
-- varNumeric : Integer = 3;  -- Число с плавающей точкой
-- varLogical : Integer = 4;  -- Логическое (булево) значение
-- varDate    : Integer = 5;  -- ДатаВремя в формате TDateTime
-- varObject  : Integer = 6;  -- Объект
-- varVariant : Integer = 7;  -- Вариант
-- varArray   : Integer = 8;  -- Массив
-- varClass   : Integer = 9;  -- Указатель на класс
-- varNull    : Integer = 10; -- Пусто
--
-- varUnit    :Integer  = 17; -- Измеритель
-- varUser    :Integer  = 50; -- Пользовательский тип, в частности, этот тип
--                            -- имеют параметры процедур и функций типа Массив
--
        Если ТМП2=Nil Тогда
          Если   ТИПП in [Nil, 0, 1] Тогда -- "Мода".
            Result = ТМП  as Строка[];
          ЕслиЖе ТИПП in [2] Тогда
            Result = ТМП  as Целое [];
          ЕслиЖе ТИПП in [3] Тогда
            Result = ТМП  as Число [];
          ЕслиЖе ТИПП in [5] Тогда
            Result = ТМП  as Дата  [];
          Илсе;
        Иначе 
          Если   ТИПП in [Nil, 0, 1] Тогда -- "Мода".
            Result = ТМП2  as Строка[2];
          ЕслиЖе ТИПП in [2] Тогда
            Result = ТМП2  as Целое [2];
          ЕслиЖе ТИПП in [3] Тогда
            Result = ТМП2  as Число [2];
          ЕслиЖе ТИПП in [5] Тогда
            Result = ТМП2  as Дата  [2];
          Илсе;
        Илсе;
  end;
  -------------------------------------------------
  func ВернутьТипПоля( Тип_Клетки :Строка): Вариант ;
    Тип_Клетки = Up(Тип_Клетки);
    ЕСЛИ   ТИП_КЛЕТКИ="СТРОКА" ИЛИ ТИП_КЛЕТКИ="STRING"  ТОГДА
       RESULT = "СТРОКА";
    ЕСЛИЖЕ ТИП_КЛЕТКИ="ЧИСЛО"  ИЛИ ТИП_КЛЕТКИ="NUMERIC" ИЛИ ТИП_КЛЕТКИ="REAL"  ТОГДА
       RESULT = "ЧИСЛО";
    ЕСЛИЖЕ ТИП_КЛЕТКИ="ЦЕЛОЕ"  ИЛИ ТИП_КЛЕТКИ="INTEGER" ИЛИ ТИП_КЛЕТКИ="ЦЕЛЫЙ" ТОГДА
       RESULT = "ЦЕЛОЕ";
    ЕСЛИЖЕ ТИП_КЛЕТКИ="ДАТА"   ИЛИ ТИП_КЛЕТКИ="DATE"    ТОГДА
       RESULT = "ДАТА";
    ЕСЛИЖЕ ТИП_КЛЕТКИ="ЛОГИЧЕСКОЕ" ИЛИ ТИП_КЛЕТКИ="ЛОГИЧЕСКИЙ" ИЛИ ТИП_КЛЕТКИ="LOGICAL" ТОГДА
       RESULT = "ЛОГИЧЕСКОЕ";
    ИНАЧЕ
       RESULT = "ВАРИАНТ";
    end;
  end;
  -------------------------------------------------
  func ЕстьИменаКолонок:Логическое;
    var i : Целое;
      ИменаКолонок = Nil;
      Result       = Ложь;
      i = SearchInArray(мас2Области0[1], "ИменаКолонок");
      Если i=-1 Тогда
      Иначе
         Если мас2Области0[220,i] = Nil Тогда
         Иначе
           ИменаКолонок = мас2Области0[220,i];
           Если ИменаКолонок.ColumnsCount > 1 и ИменаКолонок.RowsCount = 1 Тогда --Только Так!
              Result = Истина;
           end;
         end;
      end;
  end;
  -------------------------------------------------
  func ЕстьТипы :Логическое;
    var i  : Целое;
      Типы   = Nil;
      Result = Ложь;
      i = SearchInArray(мас2Области0[1], "Типы");
      Если i=-1 Тогда
      Иначе
         Если мас2Области0[220,i] = Nil Тогда
         Иначе
           Типы = мас2Области0[220,i];
--           Если Типы.ColumnsCount = 1 и Типы.RowsCount > 1 Тогда -- Только Так!!
           Result = Истина;
--           end;
         end;
      end;
  end;
  -------------------------------------------------
  func ЕстьИмена :Логическое;
    Result = Ложь;
    Если ЕстьИменаКолонок Тогда
      Result = Истина;
    end;
  end;

  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------

--}
end

--ТабличныйДокумент ()
--Свойства:
--
--АвтоМасштаб (FitToPage)
--ВерхнийКолонтитул (Header)
--ВстроенныеТаблицы (EmbeddedTables)
--Вывод (Output)
--ВыделенныеОбласти (SelectedAreas)
--ВысотаСтраницы (PageHeight)
--ВысотаТаблицы (TableHeight)
--Защита (Protection)
--ИмяПринтера (PrinterName)
--ИспользуемоеИмяФайла (UsedFileName)
--ИтогиСнизу (TotalsBelow)
--ИтогиСправа (TotalsRight)
--КлючПараметровПечати (PrintParametersKey)
--КлючСохраненияПоложенияОкна (WindowOptionsKey)
--КодЯзыкаМакета (TemplateLanguageCode)
--КоличествоЭкземпляров (Copies)
--МасштабПечати (PrintScale)
--НаправлениеПерехода (StepDirection)
--НижнийКолонтитул (Footer)
--Области (Areas)
--ОбластьПечати (PrintArea)
--ОриентацияСтраницы (PageOrientation)
--ОтображатьГруппировки (ShowGroups)
--ОтображатьЗаголовки (ShowHeaders)
--ОтображатьСетку (ShowGrid)
--Параметры (Parameters)
--ПовторятьПриПечатиКолонки (RepeatOnColumnPrint)
--ПовторятьПриПечатиСтроки (RepeatOnRowPrint)
--ПолеСверху (TopMargin)
--ПолеСлева (LeftMargin)
--ПолеСнизу (BottomMargin)
--ПолеСправа (RightMargin)
--РазборПоКопиям (Collate)
--РазмерКолонтитулаСверху (HeaderSize)
--РазмерКолонтитулаСнизу (FooterSize)
--РазмерСтраницы (PageSize)
--Рисунки (Drawings)
--СохранятьСвойстваОтображения (SaveViewProperties)
--ТекущаяОбласть (CurrentArea)
--ТолькоПросмотр (ReadOnly)
--ТочностьПечати (PrintAccuracy)
--ФиксацияСверху (FixedTop)
--ФиксацияСлева (FixedLeft)
--ФиксированныйФон (FixedBackground)
--ФоноваяКартинка (BackgroundPicture)
--ЧерноБелаяПечать (BlackAndWhite)
--ЧерноБелыйПросмотр (BlackAndWhiteView)
--ШиринаСтраницы (PageWidth)
--ШиринаТаблицы (TableWidth)
--ЭкземпляровНаСтранице (PerPage)
--
--Методы:
--
--ВставитьОбласть (InsertArea)
--Вывести (Put)
--ВывестиВертикальныйРазделительСтраниц (PutVerticalPageBreak)
--ВывестиГоризонтальныйРазделительСтраниц (PutHorizontalPageBreak)
--ЗакончитьАвтогруппировкуКолонок (EndColumnAutoGrouping)
--ЗакончитьАвтогруппировкуСтрок (EndRowAutoGrouping)
--ЗакончитьГруппуКолонок (EndColumnGroup)
--ЗакончитьГруппуСтрок (EndRowGroup)
--Записать (Write)
--КоличествоСтраниц (PageCount)
--КоличествоУровнейГруппировокКолонок (ColumnGroupLevelCount)
--КоличествоУровнейГруппировокСтрок (RowGroupsLevelCount)
--НайтиЗначение (FindValue)
--НайтиТекст (FindText)
--Напечатать (Print)
--НачатьАвтогруппировкуКолонок (StartColumnAutoGrouping)
--НачатьАвтогруппировкуСтрок (StartRowAutoGrouping)
--НачатьГруппуКолонок (StartColumnGroup)
--НачатьГруппуСтрок (StartRowGroup)
--Область (Area)
--Очистить (Clear)
--Показать (Show)
--ПоказатьУровеньГруппировокКолонок (ShowColumnGroupLevel)
--ПоказатьУровеньГруппировокСтрок (ShowRowGroupLevel)
--ПолучитьОбласть (GetArea)
--Присоединить (Join) "УровниГруппировки"
--ПроверитьВывод (CheckPut)
--ПроверитьПрисоединение (CheckAttachment)
--Прочитать (Read)
--Скрыть (Hide)
--УдалитьОбласть (DeleteArea)
--
--Описание:
--
--Используется для доступа к свойствам и методам табличного документа в целом. При помощи этого объекта возможно управление общими характеристиками табличного документа, получение его областей, а также присоединение к табличному документу других табличных документов, группировка строк и колонок табличного документа.
