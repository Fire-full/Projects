class  "ТабличныйДокумент";

Import СИС2          Classes Константы ;
Import ТаблДокумент  Classes Области, Область, Параметры, Функции;

-- Интересные Функц!!!!
Import СИС2 Classes Функции ;
-- Интересные Функц!!!!


inclass Public
--{ Реализация свойств и методов Класса.

2--Поля РазыменованиЯ
var Област2ь0        : ТаблДокумент.Област2ь0;     --
var Области        : ТаблДокумент.Области;     --
var Параметры      : ТаблДокумент.Параметры;   --
2--.........
2--.........
2--Поля РазыменованиЯ

  func Создать synonym Create :2 0ТабличныйДокумент;
     Result = inherited Create;
     Result.Init;
     Result.Параметры = ТаблДокумент.Параметры.Create;
     Result.Параметры.Хозяин = Self; -- Self
     Result.Област2ь0   = ТаблДокумент.Област2ь0.Create;
     Result.Област2ь0.Хозяин = Self; -- Self
     Result.Области   = ТаблДокумент.Области.Create;
     Result.Области.Хозяин = Self; -- Self

     --Принтер
     Printer.CurrentPrinter;
     --Принтер

  end ;
  -------------------------------------------------
  func Вывести синоним Put ( Таб :2 0ТабличныйДокумент ):2 0Область;   --Вывести(<Таблица>)

    Результат = Область;
  end ;
  -------------------------------------------------
  func ПолучитьМакет          (БланкШаблона: Строка = "") : Вариант;
    var BlTemp    : BlankForm;
    var lClass    :Класс BlankForm;
--  Макет - это "Место" (Шаблон бланка) где нарисованы секции, колонки, строки и клетки которые будут
--  ОБРАЗЦОМ (ПроОбразом) для копирования!
--  Все объекты Макета имеют - Цвет, Шрифт, размер такой какой нужно, Видимость или не видимость определяется тоже здесь.
--  При необходимости изменить один или несколько параметров, переходим в шаблон макета и там правим.
--  Код Класса "Макет" при этом - не изменяется!

    ТекущКласс = ТабличныйДокумент.Создать;

    Если БланкШаблона="" Тогда
      lClass        = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк");   --"ТабличныйБланк.tpl"
      БланкМакета   = lClass.Создать;
      БланкПриемник = БланкМакета;
    Иначе
      -- Внешний "*.tpl"-бланк с "данными" или "шаблоном".
      Если Match(БланкШаблона, "*.tpl") Тогда -- Внешний бланк с данными. Его нужно как-то инициализировать...
        lClass                   = СИС2.ФункцииКонсоли.НайтиФормуБланка("ВременныйБланк");
        БланкМакета              = lClass.Создать;
        БланкМакета.ПутьКДопШабл = БланкШаблона; --Передаём путь к шаблону для его подгрузки.

      Иначе  -- Бланк Проекта с "данными" или "шаблоном".
        lClass          = СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкШаблона);
        БланкМакета     = lClass.Создать;
        --Определить каким бланком открыт "Этот" Класс!!!
        БланкПриемник   = (СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкМакета.БланкЗаказчик)).Создать; -- Создали новый экземпляр (Он второй)
        BlTemp          = БланкПриемник; БланкПриемник = nil;                                        -- Переназначаем и удаляем второй.
        БланкПриемник   = BlTemp.Objects[1];                                                         -- Работаем только с первым бланком (Бланк, который запустил этот бланк)!!!
      Илсе;
    Илсе;

    ТекущКласс.БланкМакета   = БланкМакета;
    ТекущКласс.БланкПриемник = БланкПриемник;

    ВзятьВсеФреймы2Бланка0                 (БланкМакета.Шаблон2.0RootFrame2, 0Фреймы);       -- Массив всех Фреймов в Бланке
    ЗаполнитьПоИменованныеОбъектыШаблона (мас2Области0,                   Фреймы);

    Фреймы    = Nil;
    Результат = ТекущКласс ;    -- Пока не знаю что возвращать

  end;

--   Область - это отдельная Секция со своим набором строк(или одной строки) и колонок(или одной колонки).
--   Область имеет свои свойства и методы характеризующие её.
--   При вызове этой Функции, добавляется НОВАЯ секция и эта секция становится "текущей"
--Вариант синтаксиса: По имени
--Синтаксис:
--ПолучитьОбласть(<ИмяОбласти>)
--Параметры:
--<ИмяОбласти> (обязательный)
--Тип: Строка.
--Имя области или адрес в формате "R1C1:R2C2", где число после "R" обозначает номер строки, число после "C" - номер колонки, символом ":" (двоеточие) разделены координаты левого верхнего и правого нижнего угла области. В качестве имени также можно передавать пересечение двух областей, записываемое как "<Имя области 1> | <Имя области 2>".
--Вариант синтаксиса: По адресу
--Синтаксис:
--ПолучитьОбласть(<НомерПервойСтроки>, <НомерПервойКолонки>, <НомерПоследнейСтроки>, <НомерПоследнейКолонки>)
--Параметры:
--<НомерПервойСтроки> (необязательный)
--Тип: Число.
--Номер первой строки области таблицы.
--<НомерПервойКолонки> (необязательный)
--Тип: Число.
--Номер первой колонки области таблицы.
--<НомерПоследнейСтроки> (необязательный)
--Тип: Число.
--Номер последней строки области таблицы.
--<НомерПоследнейКолонки> (необязательный)
--Тип: Число.
--Номер последней колонки области таблицы.
--Описание варианта метода:
--Если последняя строка и последняя колонка отсутствуют, то область задана единственной ячейкой. Если строки или колонки отсутствуют, то область задана диапазоном строк или колонок соответственно. Если метод вызван без параметров, то область задана всей таблицей.
--Возвращаемое значение:
--Тип: ТабличныйДокумент.
--Область, как новый табличный документ.
--Описание:
--Получает область табличного документа как табличный документ. Область может состоять из нескольких расположенных подряд строк или колонок, либо прямоугольной областью таблицы.
--Пример:
--Макет = Документы.РасходнаяНакладная.ПолучитьМакет("Накладная");
--Шапка = Макет.ПолучитьОбласть("Шапка");
--
  func ПолучитьОбласть        (Var НомерПервойСтроки : Вариант = Nil; Var НомерПервойКолонки : Число = 0; Var НомерПоследнейСтроки : Число = 0; Var НомерПоследнейКолонки : Число = 0 ) : 2Вариант0; --Должна возвращать "ТабличныйДокумент"
    var i                   : Integer;
    var ТекущОбластьПечати  : Область;
    var ТабДок              : ТабличныйДокумент;
    var имяСекции           : Строка;
      получательSec   = nil;
      источникSec     = nil;

         --Создаем "приемник" для области
      ТабДок = ТабличныйДокумент.Create;

      Если НомерПервойСтроки="" Тогда
        имяСекции="секПриемник";
      Илсе;
        i = SearchInArray ( мас2Области0[1], Up(имяСекции) );   --По имени поля находим значение в массиве
        Если i=-1 Тогда
            Сообщение("Область загрузки - '"+имяСекции+"' - не найдена!");
            Результат = nil;
            ВОЗВРАТ Результат;
        Иначе
            источникSec  = мас2Области0[2,I];
            хКолРядов    = источникSec.RowsCount;
            хКолСтолбцов = источникSec.ColumnsCount;

            2ТекущОбластьПечати0 2= 0Область2.0Create2;
            2ТекущОбластьПечати0.Current = источникSec;
            2ТекущОбластьПечати0.Обновить;

            ТабДок.ФреймШаблонаПолучателя = мас2Области0[3,i];

        end;

    Результат = ТабДок;

  end;

--}


--{ Реализация свойств и методов Объекта.
Перем  ТекущКласс                                         : ТабличныйДокумент;
Перем НомерФорматаБумаги                                  : Целое;

Перем Хозяин                    Synonym  Owner            : Вариант;
Перем ТекущаяОбласть            синоним CurrentArea       : Область ;
Перем ФреймШаблонаПолучателя                              : ФреймШаблона;
Перем БланкМакета                                         : BlankForm;
Перем БланкПриемник                                       : BlankForm;
Перем источникSec                                         : TemplateSection;
Перем получательSec                                       : TemplateSection;
Перем хКолРядов                                           : integer;            --var
Перем хКолСтолбцов                                        : integer;            --var

Перем КоличествоФорматовБумаги  Synonym  PaperFormatsCount  :Целое;       --     = Принтер.PaperFormatsCount;
Перем КоличествоПринтеров       Synonym  PrintersCount      :Целое;       --     = Принтер.PrintersCount;
Перем ФорматБумаги              Synonym  PaperFormat        :Строка;       --    = Принтер.PaperFormat[НомерФорматаБумаги];
--Перем  Принтер                   Synonym  Printer
Перем ТекущийФорматБумаги       Synonym  CurrentPaperFormat :Строка;       --    = Принтер.CurrentPaperFormat;
Перем ТекущийПринтер            Synonym  CurrentPrinter     :Строка;       --    = Принтер.CurrentPrinter;
Перем АльбомныйРежим            Synonym  LandscapeMode      :Логическое;       --= Принтер.LandscapeMode
Перем Печатает                  Synonym  Printing           :Логическое;       --= Принтер.Printing;
Перем ВысотаСтраницы            Synonym  PageHeight         :Целое;       --     = Принтер.PageHeight;
Перем ШиринаСтраницы            Synonym  PageWidth          :Целое;       --     = Принтер.PageWidth;

-- Проц НачатьПечать / BeginPrint
-- Проц ЗавершитьПечать / EndPrint
-- Проц ОтменитьПечать / AbortPrint


Перем ЗаголовокОкнаФормы                 : Строка ;

--Определили, что этот ТД:
Перем ЗаголовокСтраниц                   : Логическое;
Перем ИтогиСтраниц                       : Логическое;


Перем ВысотаТаблицы                      : Целое ;    --Нужно считать каждый раз при изменении
Перем ШиринаТаблицы                      : Целое ;    --Нужно считать каждый раз при изменении

  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------

inobject Public

  функ Обновить : Логическое ;

    КоличествоСтраниц;


    Результат = Истина;
  конец;
  -------------------------------------------------

  proc Init;

    -- БланкМакета  = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк").Создать; --"ТабличныйБланк.tpl"
    -- БланкМакета.ЗаголовокОкнаФормы  = ЗаголовокОкнаФормы;
     --ОчиститьПеременные;
     мас2Области0               = Nil;
     БланкМакета              = Nil;
     БланкПриемник            = Nil;
     КоличествоФорматовБумаги = Принтер.PaperFormatsCount;
     КоличествоПринтеров      = Принтер.PrintersCount;
     ФорматБумаги             = Принтер.PaperFormat[6];
     ТекущийФорматБумаги      = Принтер.CurrentPaperFormat;
     ТекущийПринтер           = Принтер.CurrentPrinter;
     АльбомныйРежим           = Принтер.LandscapeMode;
     Печатает                 = Принтер.Printing;
     ВысотаСтраницы           = Принтер.PageHeight;
     ШиринаСтраницы           = Принтер.PageWidth;

  end ;
  -------------------------------------------------
  функ КоличествоСтраниц  синоним PageCount : Целое ;

    Результат = Если(ВысотаТаблицы=0, 0, Цел(ВысотаСтраницы/ВысотаТаблицы) );  --Не верное значение!!!!
  конец;
  -------------------------------------------------
  функ НайтиЗначение синоним FindValue : Область ;
    
    Результат = Область;
  конец;
  -------------------------------------------------
  функ НайтиТекст    синоним FindText  :Область;
    
    Результат = Область;
  конец;
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------
  -------------------------------------------------


--}
end

--ТабличныйДокумент ()
--Свойства:
--
--АвтоМасштаб (FitToPage)
--ВерхнийКолонтитул (Header)
--ВстроенныеТаблицы (EmbeddedTables)
--Вывод (Output)
--ВыделенныеОбласти (SelectedAreas)
--ВысотаСтраницы (PageHeight)
--ВысотаТаблицы (TableHeight)
--Защита (Protection)
--ИмяПринтера (PrinterName)
--ИспользуемоеИмяФайла (UsedFileName)
--ИтогиСнизу (TotalsBelow)
--ИтогиСправа (TotalsRight)
--КлючПараметровПечати (PrintParametersKey)
--КлючСохраненияПоложенияОкна (WindowOptionsKey)
--КодЯзыкаМакета (TemplateLanguageCode)
--КоличествоЭкземпляров (Copies)
--МасштабПечати (PrintScale)
--НаправлениеПерехода (StepDirection)
--НижнийКолонтитул (Footer)
--Области (Areas)
--ОбластьПечати (PrintArea)
--ОриентацияСтраницы (PageOrientation)
--ОтображатьГруппировки (ShowGroups)
--ОтображатьЗаголовки (ShowHeaders)
--ОтображатьСетку (ShowGrid)
--Параметры (Parameters)
--ПовторятьПриПечатиКолонки (RepeatOnColumnPrint)
--ПовторятьПриПечатиСтроки (RepeatOnRowPrint)
--ПолеСверху (TopMargin)
--ПолеСлева (LeftMargin)
--ПолеСнизу (BottomMargin)
--ПолеСправа (RightMargin)
--РазборПоКопиям (Collate)
--РазмерКолонтитулаСверху (HeaderSize)
--РазмерКолонтитулаСнизу (FooterSize)
--РазмерСтраницы (PageSize)
--Рисунки (Drawings)
--СохранятьСвойстваОтображения (SaveViewProperties)
--ТекущаяОбласть (CurrentArea)
--ТолькоПросмотр (ReadOnly)
--ТочностьПечати (PrintAccuracy)
--ФиксацияСверху (FixedTop)
--ФиксацияСлева (FixedLeft)
--ФиксированныйФон (FixedBackground)
--ФоноваяКартинка (BackgroundPicture)
--ЧерноБелаяПечать (BlackAndWhite)
--ЧерноБелыйПросмотр (BlackAndWhiteView)
--ШиринаСтраницы (PageWidth)
--ШиринаТаблицы (TableWidth)
--ЭкземпляровНаСтранице (PerPage)
--
--Методы:
--
--ВставитьОбласть (InsertArea)
--Вывести (Put)
--ВывестиВертикальныйРазделительСтраниц (PutVerticalPageBreak)
--ВывестиГоризонтальныйРазделительСтраниц (PutHorizontalPageBreak)
--ЗакончитьАвтогруппировкуКолонок (EndColumnAutoGrouping)
--ЗакончитьАвтогруппировкуСтрок (EndRowAutoGrouping)
--ЗакончитьГруппуКолонок (EndColumnGroup)
--ЗакончитьГруппуСтрок (EndRowGroup)
--Записать (Write)
--КоличествоСтраниц (PageCount)
--КоличествоУровнейГруппировокКолонок (ColumnGroupLevelCount)
--КоличествоУровнейГруппировокСтрок (RowGroupsLevelCount)
--НайтиЗначение (FindValue)
--НайтиТекст (FindText)
--Напечатать (Print)
--НачатьАвтогруппировкуКолонок (StartColumnAutoGrouping)
--НачатьАвтогруппировкуСтрок (StartRowAutoGrouping)
--НачатьГруппуКолонок (StartColumnGroup)
--НачатьГруппуСтрок (StartRowGroup)
--Область (Area)
--Очистить (Clear)
--Показать (Show)
--ПоказатьУровеньГруппировокКолонок (ShowColumnGroupLevel)
--ПоказатьУровеньГруппировокСтрок (ShowRowGroupLevel)
--ПолучитьОбласть (GetArea)
--Присоединить (Join)
--ПроверитьВывод (CheckPut)
--ПроверитьПрисоединение (CheckAttachment)
--Прочитать (Read)
--Скрыть (Hide)
--УдалитьОбласть (DeleteArea)
--
--Описание:
--
--Используется для доступа к свойствам и методам табличного документа в целом. При помощи этого объекта возможно управление общими характеристиками табличного документа, получение его областей, а также присоединение к табличному документу других табличных документов, группировка строк и колонок табличного документа.
