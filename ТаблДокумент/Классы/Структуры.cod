class "Структурированные Данные";

--Import  Classes Макет, Области, Функции;
Import  Classes ТабличныйДокумент, Функции;
-----------------------------------------------------------------------------------
----------------------------НАЧАЛО!!-----------------------------------------------
-----------------------------------------------------------------------------------
inclass -- Public -- Private


var Параметры           : Параметры;

  func Создать        synonym Create :2 0ТаблДокумент.Структуры;
       Result = inherited Create;
       Result.Init;
       Result.Параметры        = ТаблДокумент.Параметры.Create;
       Result.Параметры.Хозяин = Result;
  end ;

--inobject Public

--2  var ТекущаяОбласть synonym Current : 0Вариант[2]2;0 --Нужен Вариант именно "Структуры"!!!

inobject Public

  var Новый        : Логическое ;
  var ColumnsCount : Целое;
  var RowsCount    : Целое;
  var Текущая      : Целое;
  var Current      : Структуры;
  var БланкМакета  : BlankForm;
  var Имя          : Строка;
  var Значение     : Вариант;
  var НомерОбъекта : Целое;
  var ИмяОбъекта   : Строка;
  var Хозяин       Synonym  Owner   : Вариант;

  proc Init;
    var lClass    :Класс BlankForm;

    Clear;

    Current = Self;

--    Хозяин                  = Result.Parent Class ;     Result.ClassType
--      if Хозяин = nil then
--        Message("У класса:"+ Result.ClassName + " нет родительского");
--      fi;

    НомерОбъекта = Current.ЧислоОбъектов;
    ИмяОбъекта   = "СтруктурЫ_" + Стр(НомерОбъекта);
        --!!!!!!!!!!!!!!!!!!!!!!!!
    lClass      = СИС2.ФункцииКонсоли.НайтиФормуБланка("ВременныйБланк");
    БланкМакета = lClass.Создать;
    Если БланкМакета.SecTemp=Nil Тогда
     Сообщение ("При создании объекта - 'Структуры', несоздан шаблон -'Временного бланка'. Ошибка!");
    Илсе;
    Новый       = Истина;
    Имя         = "";
    Значение    = Nil;
    Текущая     = 0;
  end ;

--Вставить (Insert)
--Количество (Count)
--Очистить (Clear)
--Свойство (Property)
--Удалить (Delete)

  func Вставить ( ИмяПоля:Строка; ЗначениеПоля : Вариант = Nil; var ТипП : VarTypes = Nil)  : Логическое ;
    var i        : Целое;
    var Row      : TemplateRow;
    var Column   : TemplateColumn;
    var ThisCell : TemplateCell;

    var Sec      : TemplateSection;
    var ПоляНет  : Логическое ;
    var ТМП      : Вариант[1];

     Sec          = БланкМакета.SecTemp;
     RowsCount    = Sec.RowsCount;
     ColumnsCount = Sec.ColumnsCount;

     --{Проверка "Поля"
     Если Sec.КлеткаПоПолю[ИмяПоля] = Nil Тогда  --Поля НЕТ, создаем!
        ПоляНет = Истина;
     Иначе
        ПоляНет = Ложь;
     Илсе;
     --}Проверка "Поля"

     --{Проверка Строк и Колонок
     Если ColumnsCount=1 и Новый Тогда
       Column = Sec.Column[1];
     Иначе
       Если ПоляНет Тогда
         Column = Sec.InsertColumn(ColumnsCount+1, 1);
       Илсе;
     Илсе;
     Если RowsCount=1 и Новый Тогда
       Row = Sec.Row[1];
     Иначе
       Row = Sec.Row[RowsCount];
     Илсе;
     --}Проверка Строк и Колонок

     Column.Имя     = ИмяПоля;
     Column.Надпись = ИмяПоля;

     --{Записываем "Содержимое "
     IF VarType(ЗначениеПоля)=8 then        --Массив
       ТМП = (ЗначениеПоля as Вариант[1]);
       Если ДлинаМассива(ТМП)=RowsCount Тогда
       Иначе
         Если ДлинаМассива(ТМП)>RowsCount Тогда
           Для i = 1..ДлинаМассива(ТМП) Цикл
             Если i<RowsCount Тогда
             иначе
               Sec.InsertRow( i+1, 1);
             Илсе;
             Sec.Клетка[Column.Номер, i].Contents = ТМП[i];
           Лкиц;
         Илсе;
       Илсе;
     Иначе

       ThisCell           = Sec.Cell[Column.Номер,Row.Номер];
       ThisCell.ReadOnly  = Ложь;
       ThisCell.FieldType = Kernel.Template.StaticText;
       ThisCell.CellType  = Kernel.Template.StaticCell;
       ThisCell.Contents  = ЗначениеПоля;        -- Смотрим Содержимое  ThisCell.Text;

     Илсе;
     --}Записываем "Содержимое "

     Обновить;

    Результат = Истина;
  end;

  Функ Следующий синоним Next : Логическое ;
    Если Текущая=0 Тогда
      Текущая = 1;
    Иначе
      Текущая = Текущая + 1;
    Илсе;
    Если Текущая<=ColumnsCount Тогда
      Обновить ;

      Имя      = БланкМакета.SecTemp.Column[Текущая]   .Имя;
      Значение = БланкМакета.SecTemp.Клетка[Текущая, 1].Contents;
    Иначе

    Илсе;

    Результат = Если(Текущая<=ColumnsCount, Истина, Ложь);
  Кнуф;


  Функ Количество синоним Count  : Целое ;
    Обновить ;
    Результат = ColumnsCount;
  Кнуф;

  func Обновить : Логическое;

     RowsCount    = БланкМакета.SecTemp.RowsCount;
     ColumnsCount = БланкМакета.SecTemp.ColumnsCount;
     Новый        = Ложь;

  end;

  func Очистить      synonym Clear : integer;
       Имя            = ""2;
       Хозяин         = Nil2;
--       CurrentColumn  = Nil2;
--       CurrentRow     = Nil2;
--       RowsCount      = 0;
--       ColumnsCount   = 0;
  end;

-----------------------------------------------------------------------------------
----------------------------КОНЕЦ!!!-----------------------------------------------
-----------------------------------------------------------------------------------
end