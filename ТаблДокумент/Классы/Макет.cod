class "Макет";   --Макет   ТабличныйДокумент.

Import СИС2          Classes Константы ;
Import ТаблДокумент  Classes Области, Область, Параметры, Структуры;

-- Интересные Функц!!!!
Import СИС2 Classes Функции ;
-- Интересные Функц!!!!

inclass Public

2--Поля РазыменованиЯ
var Област2ь0        : ТаблДокумент.Област2ь0;     --
var Области        : ТаблДокумент.Области;     --
var Параметры      : ТаблДокумент.Параметры;   --
var Структура      : ТаблДокумент.Структуры;   -- ?????
2--.........
2--.........
2--Поля РазыменованиЯ

inobject Public


inclass Public

 lClass                  : Класс BlankForm;    --var
 ФреймШаблонаПолучателя  : ФреймШаблона;       --var
 КоличСекцНаФрейме       : integer;            --var
 ТекущКласс              : Вариант;            --var

 БланкМакета             : BlankForm;          --var
 БланкПриемник           : BlankForm;          --var

 источникSec             : TemplateSection;    --var
 получательSec           : TemplateSection;    --var

 хКолРядов               : integer;            --var
 хКолСтолбцов            : integer;            --var
 ПервыйВызовОбласти      : Логическое;         --var

 ТекВысота               : integer;            --Текущая высота Табличного документа
 ТекСтрока               : integer;            --Текущая Строка Табличного документа
 ТекСтолбец              : integer;            --Текущая Столбец Табличного документа
 ТекСтлбОбл              : integer;            --Текущая Стлб Обл Табличного документа
 ТекСтрОбл               : integer;            --Текущая Строка Обл Табличного документа

2    0--Принтер
 ВысотаБумаги            : integer;           --var
 ШиринаБумаги            : integer;           --var
 АльбомныйЛист           : Логическое;        --var
2    0--Принтер

--Служебные Секции и их Параметры

----    КолонтитулЫ
 ВерхнКолонтитулSec       : TemplateSection;   --var
 ВыводитьВерхнКолонтитул  : Логическое;        --var

 НижнКолонтитулSec        : TemplateSection;   --var
 ВыводитьНижнКолонтитул   : Логическое;        --var
 2--0  КолонтитулЫ

2--0Заголовок2 0Страниц
 ЗаголовокСтраницSec      : TemplateSection;   --var
 ВыводитьЗаголовокСтраниц : Логическое;        --var
 хКолРядовЗаголовка       : integer;           --var
 хКолСтолбцовЗаголовка    : integer;           --var
2--0Заголовок2 0Страниц

2--0Итог2 0На2 0Странице
 ИтогиСтраницSec          : TemplateSection;   --var
 ВыводитьИтогиСтраниц     : Логическое;        --var
 2Не0ВыводитьИтогНа2Посл0Странице   : Логическое;  --var
 хКолРядовИтоги           : integer;           --var
 хКолСтолбцовИтоги        : integer;           --var
--2-- 0Итог2 0На2 0Странице

--Служебные Секции и их Параметры

 СтруктураПолейЗаполнена  : Логическое;         --  var
 ДанныеПолейЗаполнены     : Логическое;         --  var

 ВСтандартныйБланк        : Логическое;         --  var
--var
--var
--var

Фреймы                    : ФреймШаблона [];2 0   2-- Фреймы Бланка Приемника
масСоответствие           : Вариант[2];  2    0   --2 0Соответствие Имя Секции и Подтаблицы приемника
масПоляСтруктур           : Вариант[2];  2    0   --2 0Соответствие Названия поля и его Значения

Данные synonym facts      : Вариант[2];  2    0   --2 0Соответствие Названия поля и его Значения

inclass Public

  func Создать synonym Create :2 0Макет;
     Result = inherited Create;
     Result.Init;
     Result.Параметры = ТаблДокумент.Параметры.Create;
     Result.Параметры.Хозяин = Self; -- Self
     Result.Област2ь0   = ТаблДокумент.Област2ь0.Create;
     Result.Област2ь0.Хозяин = Self; -- Self
     Result.Области   = ТаблДокумент.Области.Create;
     Result.Области.Хозяин = Self; -- Self
     Result.Структура = ТаблДокумент.Структуры.Create;
     Result.Структура.Хозяин = Self; -- Self
  end ;

inobject Public

  proc Init;
     ОчиститьПеременные;
  end ;

inclass Public

  func ИндексСтроки           (const Cell :TemplateCell) :Integer;
    var locSec :TemplateSection;

    locSec = Cell.Section;
    if locSec.EnableRepeat and locSec.Count > 0 then
      if locSec.Subtable <> nil then
        Result = Int(locSec.Subtable.IndexByNumber[Cell.Frame]) + 1;
      else
        Result = Cell.Frame;
      end;
    end;
  end;
  proc ОчиститьПеременные;
   -- мас2Области0              = nil;
    Данные                  = nil;
    Фреймы                  = nil;
    масПоляСтруктур         = nil;
    масСоответствие         = nil;
    СтруктураПолейЗаполнена = Ложь;
    ДанныеПолейЗаполнены    = Ложь;
    ПервыйВызовОбласти      = Истина;
    ВСтандартныйБланк       = Ложь;
    ВысотаБумаги            = 0;
    ШиринаБумаги            = 0;
    хКолРядов               = 0;
    хКолСтолбцов            = 0;

  end;
  func ЗаголовокСтраниц       (var2 0Temp2 0: Вариант2 = Nil0): Вариант;
      Если источникSec=Nil Тогда
      Иначе
        ЗаголовокСтраницSec      = источникSec;
        ЗаголовокСтраницSec.Видна= Истина;
        ВыводитьЗаголовокСтраниц = Истина ;
        хКолРядовЗаголовка       = ЗаголовокСтраницSec.RowsCount;
        хКолСтолбцовЗаголовка    = ЗаголовокСтраницSec.ColumnsCount;
      Илсе;
      Результат = ТекущКласс ;   -- Пока не знаю что возвращать
  Кнуф;
  func ИтогиСтраниц           (var2 0ОтКуда2 0: Вариант2 = Nil0; var2 0Куда2 0: Вариант2 = Nil0): Вариант; --   "ОтКуда" и "Куда"
      Если источникSec=Nil Тогда
      Иначе

        Если ОтКуда = 2Nil0 Тогда   --Если ОтКуда = 2Nil0 то и Куда должен быть = 2Nil
        Иначе
          Если VarType(ОтКуда)=varArray и VarType(Куда) = varArray Тогда

--            Если ДлинаМассива(ОтКуда) = ДлинаМассива(Куда) Тогда
--
--            Илсе;
          Иначе
          Илсе;
        Илсе;

        ИтогиСтраницSec       = источникSec;
        ИтогиСтраницSec.Видна = Истина;
        ВыводитьИтогиСтраниц  = Истина;
        хКолРядовИтоги        = ИтогиСтраницSec.RowsCount;
        хКолСтолбцовИтоги     = ИтогиСтраницSec.ColumnsCount;
      Илсе;
      Результат = ТекущКласс ;
  Кнуф;
  Функ ВзятьСекциюПоИмени     (ШАБЛОН: Template; Имя: Строка):  TemplateSection;
    var j,z  : Integer;
    var Sect : TemplateSection;
      Результат =2 Nil0; Фреймы =2 Nil0;
      ВзятьВсеФреймы2Бланка0 (ШАБЛОН.RootFrame2, 0Фреймы); -- Массив всех Фреймов в Бланке
      for j=1.. ДлинаМассива(Фреймы)  do               -- По Фреймам бланка...
        for z=1.. Фреймы[j].SectionsCount  do          -- По Секц. Фрейма
          Sect = Фреймы[j].Section[z];
          если Sect.Имя = Имя тогда  2 0 -- Если наша секция
              Результат = Sect;
              ВОЗВРАТ;
          конец;
        Od;
      Od;
  Кнуф;
  Функ ВзятьВсеФреймы2Бланка0   (TempSec:2 0ФреймШаблона2; 0var2 arr0Temp2 0: ФреймШаблона2[] = Nil0) :Целое;
--Для поиска "Нашей" секции в бланке!
    var j,N    : Integer;

      Если TempSec=2Nil0 Тогда
      2Иначе
        N=TempSec.FramesCount;                         -- Кол. Фреймов в бланке
        Если N=200 и ДлинаМассива(Фреймы)=0 Тогда        -- Кол. Фреймов в бланке2 = 0.0 RootFrame2!
           ВставитьВМассив (2arr0Temp, 1 , TempSec );
        2Иначе
           for j= 1..  N  do                             -- Цикл по Фреймам бланка
             ВставитьВМассив (2arr0Temp, ДлинаМассива(2arr0Temp)+1 , TempSec.Frame[j] );
             ВзятьВсеФреймы2Бланка0 (TempSec.Frame[j]2, arr0Temp);
           end;
        Илсе;
      Илсе;

    Результат = ДлинаМассива(2arr0Temp);
  Кнуф;
  Функ ЗаполнитьПоИменованныеОбъектыШаблона  (мас2Обл0 :2 0Вариант2[]0; Фреймы :2 0ФреймШаблона2[]0) :Логическое;
    var j,z,x,k : Integer;
    var Sect    : TemplateSection ;

    for j=1.. ДлинаМассива(Фреймы)  do            -- По Фреймам бланка...
      for z=1.. Фреймы[j].SectionsCount  do       -- По Секц. Фрейма
        Sect = Фреймы[j].Section[z];
        Если Sect.Имя = "" Тогда
        Иначе
  2        0ВставитьВМассив (мас2Области0[1], z, 2Up(0Sect.Имя)2     0);
  2        0ВставитьВМассив (мас2Области0[220], z, Sect2    0     2    0);
  2        0ВставитьВМассив (мас2Области0[230], z, Фреймы[j]    2    0);
          ВставитьВМассив (мас2Области0[4], z, 2Up(0Фреймы[j].Имя));
          --Поиск Именованных Колонок
          for x=1.. Sect.ColumnsCount  do
            Если Sect.Column[x].Имя = "" Тогда
            Иначе
              k  =  LengthOfArray (мас2Области0[1]);
      2        0ВставитьВМассив (мас2Области0[1], 1+k, 2Up(0Sect.Column[x].Имя));
      2        0ВставитьВМассив (мас2Области0[220], 1+k, Sect.Column[x]2    0    );
      2        0ВставитьВМассив (мас2Области0[230], 1+k, Sect     2         0    );
      2        0ВставитьВМассив (мас2Области0[4], 1+k, 2Up(0Sect.Имя) 2     0    );
            Илсе;
          Od;
          --Поиск Именованных Строк
          for x=1.. Sect.RowsCount  do
            Если Sect.Row[x].Имя = "" Тогда
            Иначе
              k  =  LengthOfArray (мас2Области0[1]);
      2        0ВставитьВМассив (мас2Области0[1], 1+k, 2Up(0Sect.Row[x].Имя));
      2        0ВставитьВМассив (мас2Области0[220], 1+k, Sect.Row[x]2    0    );
      2        0ВставитьВМассив (мас2Области0[230], 1+k, Sect     2      0    );
              ВставитьВМассив (мас2Области0[4], 1+k, 2Up(0Sect.Имя) 2  0    );
            Илсе;
          Od;
        Илсе;
      Od;
    Od;
    мас2Обл0    = мас2Области0;
    Результат = Истина;
  Кнуф;
  func ПолучитьМакет          (Перем БланкШаблона: Строка = "") : Вариант;
    var BlTemp    : BlankForm;

--  Макет - это "Место" (Шаблон бланка) где нарисованы секции, колонки, строки и клетки которые будут
--  ОБРАЗЦОМ (ПроОбразом) для копирования!
--  Все объекты Макета имеют - Цвет, Шрифт, размер такой какой нужно, Видимость или не видимость определяется тоже здесь.
--  При необходимости изменить один или несколько параметров, переходим в шаблон макета и там правим.
--  Код Класса "Макет" при этом - не изменяется!

    ТекущКласс    = Self.Создать;

    Printer.CurrentPrinter;
    АльбомныйЛист = Printer.2АльбомныйРежим0;
    ВысотаБумаги  = Printer.2PageHeight0;
    ШиринаБумаги  = Printer.2PageWidth0;
    Если БланкШаблона="" Тогда
      lClass            = СИС2.ФункцииКонсоли.НайтиФормуБланка("ТабличныйБланк");
      БланкМакета       = lClass.Создать;
      масСоответствие   = nil;
      БланкПриемник     = БланкМакета;
      ВСтандартныйБланк = Истина;
    Иначе
      -- Внешний бланк с данными.
      Если Match(БланкШаблона, "*.tpl") Тогда -- Внешний бланк с данными. Его нужно как-то инциализировать...
        lClass                   = СИС2.ФункцииКонсоли.НайтиФормуБланка("ВременныйБланк");
        БланкМакета              = lClass.Создать;
        БланкМакета.ПутьКДопШабл = БланкШаблона; --Передаём путь к шаблону для его подгрузки.
      Иначе
        lClass          = СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкШаблона);
        БланкМакета     = lClass.Создать;
        масСоответствие = БланкМакета.масСоответствие как Вариант[2];
        --Определить каким бланком открыт "Этот" Класс!!!
        БланкПриемник   = (СИС2.ФункцииКонсоли.НайтиФормуБланка(БланкМакета.БланкЗаказчик)).Создать; -- Создали новый экземпляр (Он второй)
        BlTemp          = БланкПриемник; БланкПриемник = nil;                                        -- Переназначаем и удаляем второй.
        БланкПриемник   = BlTemp.Objects[1];                                                         -- Работаем только с первым бланком (Бланк, который запустил этот бланк)!!!
      Илсе;
    Илсе;

    ВзятьВсеФреймы2Бланка0                 (БланкМакета.Шаблон2.0RootFrame2, 0Фреймы);       -- Массив всех Фреймов в Бланке
    ЗаполнитьПоИменованныеОбъектыШаблона (мас2Области0, Фреймы);

    если Структура.ЕстьДанные() Тогда
       Данные = Структура.ВзятьДанные();
    конец;

    Фреймы    = Nil;
    Результат = ТекущКласс;    -- Пока не знаю что возвращать      ТекущКласс.Objects[210]

  end;

inobject Public

  func ПолучитьОбласть        (Var имяСекции : Строка = ""; Var Sec : TemplateSection = nil) : 2Вариант0;
    var i                   : Integer;
    var ТекущОбластьПечати  : Область;
--                    Область - это отдельная Секция со своим набором строк(или одной строки) и колонок(или одной колоноки).
--                    Область имеет свои свойства и методы характеризующие её.
--                    При вызове этой Функции, добавляется НОВАЯ секция и эта секция становится "текущей" (получательSec)
--                           получательSec = ФреймШаблонаПолучателя.AddSection;
--                           ФреймШаблонаПолучателя.SectionsCount;
      получательSec   = nil;
      источникSec     = nil;
      масПоляСтруктур = nil;
      ТекСтрОбл       = 0  ;   --??????

      Если имяСекции="" Тогда
        имяСекции="секПриемник";
      Илсе;
        i = SearchInArray ( мас2Области0[1], Up(имяСекции) );   --По имени поля находим значение в массиве
        Если i=-1 Тогда
            Сообщение("Область загрузки - '"+имяСекции+"' - не найдена!");
            Результат = nil;
            ВОЗВРАТ Результат;
        Иначе
            источникSec  = мас2Области0[2,I];
            хКолРядов    = источникSec.RowsCount;
            хКолСтолбцов = источникSec.ColumnsCount;

            2ТекущОбластьПечати0 2= 0Область2.0Create2;
            2ТекущОбластьПечати0.Current = источникSec;
            2ТекущОбластьПечати0.Обновить;

            ФреймШаблонаПолучателя = мас2Области0[3,i];
            если ПервыйВызовОбласти тогда
               КоличСекцНаФрейме  = ФреймШаблонаПолучателя.SectionsCount;
               ПервыйВызовОбласти = Ложь;
            Илсе;
        end;

    Результат = 2ТекущОбластьПечати0; -- Пока не знаю что возвращать

  end;

inclass Public

  Функ РисуемСтрокуВСекции    (y:Целое; перем СтрокаСек:Строка="ИмяСтроки"; ИтогиСтраницSec : TemplateSection) : TemplateSection;
      ПолучитьСтрокуСекцииПоИмени (ИтогиСтраницSec, СтрокаСек);
  end;
  Функ РисуемСтолбецВСекции   (x:Целое; перем СтрокаСек:Строка="ИмяСтолба"; ИтогиСтраницSec : TemplateSection) : Вариант;
      ПолучитьСтолбецСекцииПоИмени(ИтогиСтраницSec, "ИмяСтолба");
  end;
  Функ ВернутьЗначениеПоля    (Надпись : Вариант ) : Вариант ;
    var i    : Целое;
    var Надп : Строка;

      Если   VarType(Надпись) = varString  Тогда
             Надп = Надпись ;
      ЕслиЖе VarType(Надпись) = varObject  Тогда
             Надп = Надпись.Содержимое ;
      ЕслиЖе VarType(Надпись) = varInt     Тогда
             Результат = масПоляСтруктур[2, Надпись];
             ВОЗВРАТ Результат;
      Илсе;
      i = SearchInArray ( масПоляСтруктур[1], Up(Надп) );   --По имени поля находим значение в массиве
      Если i=-1 Тогда
          Результат = nil;
      Иначе
          Результат = масПоляСтруктур[2,I];
      end;

  Кнуф;
  func РисуемОбласть          (2var locSec :Вариант=NIL ; 0var  ii : integer=200 ) : Вариант;
     var Sec   2         0:2 0TemplateSection;
     var ThisCell2       0:2 0TemplateCell;
     var ThisTargetCell :2 0TemplateCell;
     var j,k, RowsКолич, ColumnsКолич : Integer;
        Если 2 locSec = NIL0 Тогда
        2  0Sec 2 0= источникSec;
        2Иначе
          Если VarType(2locSec0) = varObject Тогда
            Sec 2 0= 2locSec0.Current;
          Илсе;
        Илсе;
        Если ii=0 Тогда           --Если "0", то это не повторяющ секция! "Заголовок", "Итог"...
          получательSec = ФреймШаблонаПолучателя.AddSection;      -- новая секция
  2        получательSec.Assign(Sec);                        0      2-- Копируем свойства секции
          --получательSec.Имя = Sec.Имя;
        Иначе
          Если получательSec = 2NIL0  Тогда
            if ВСтандартныйБланк then
              Если ФреймШаблонаПолучателя.КоличествоСекций = 1 Тогда
                Если  ФреймШаблонаПолучателя.Section[1].КоличествоСтрок=1 и ii=1 Тогда
                  получательSec = ФреймШаблонаПолучателя.Section[1];    -- секция
        2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
                2Иначе
                  получательSec = ФреймШаблонаПолучателя.Section[1];    -- секция
        2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
                Илсе;
              Илсе;
            2Иначе
              получательSec = ФреймШаблонаПолучателя.AddSection;    -- новая секция
    2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
            end;
          2Иначе
            if ВСтандартныйБланк then
              Если получательSec.RowsCount < ii Тогда      --получательSec.Count
                получательSec.InsertRow(ii)2;0 -- новая строка в секции
              Илсе;
            2Иначе
              получательSec = ФреймШаблонаПолучателя.AddSection;    -- новая секция
    2        0  2получательSec.Assign(Sec);0                            2-- Копируем свойства секции
              получательSec.Имя = Sec.Имя+ "_" + Str( ii );
              --получательSec.InsertRow(2Sec0.RowsCount)2;
            Илсе;
          Илсе;

        Илсе;

        ColumnsКолич = получательSec.ColumnsCount;
        RowsКолич   2 0= получательSec.RowsCount;

        Если ВыводитьИтогиСтраниц Тогда
            ТекВысота = ВернутьВысотуСтрок (получательSec);
        Илсе;
        if ВСтандартныйБланк then
--          TempRow = получательSec.Row[RowsКолич]2;
--          for j=1..RowsКолич  do                   2    0 2  0        -- цикл по всем строкам секции "_ИСТОЧНИК."
            for k=1..ColumnsКолич do             2  0 2      0        2  0-- цикл по колонкам 2    0секции "_ИСТОЧНИК."
              ThisTargetCell = получательSec.Cell[k, RowsКолич];
              if ThisTargetCell.CellType   = Ядро.Template.StaticText then
               2  0ThisTargetCell.Содержимое2 0= ВернутьЗначениеПоля(k);
              end;
            Od;
--          Od;
        Иначе
          for j=1..RowsКолич  do                   2    0 2  0-- цикл по всем строкам секции "_ИСТОЧНИК."
            for k=1..ColumnsКолич do             2  0 2      0-- цикл по колонкам 2    0секции "_ИСТОЧНИК."
              ThisTargetCell = получательSec.Cell[k, j];
              if ThisTargetCell.CellType  = Ядро.Template.StaticText  then
                --Клетка не является полем!!!
                --Обработку не проводим. Оставляем всё как есть.
              Иначе
                if ThisTargetCell.ReadOnly then
  2                Проверка(0ThisTargetCell.ReadOnly2, "Для Секции:'" + 0получательSec.2Имя + "', 0ThisTargetCell2[" + 0Str(k)2 + ":" + 0Str(j)2+ "] имеет свойство - ТОЛЬКО ДЛЯ ЧТЕНИЯ!");
                Иначе
              2    0ThisCell   2               0= Sec.Cell  [k,j];
                  ThisTargetCell            = ThisCell;
                  if ii  = 0  then
                2  0  ThisTargetCell.Содержимое2 0 = ВернутьЗначениеПоля(ThisCell.Содержимое);
                  Иначе
                  2  0ThisTargetCell.Содержимое2 0 = ThisCell.Содержимое+"["+Str( ii )+"]"; -- Нпп[1]
                    ThisTargetCell.Text;
                  end;
                end;
              end;
            Od;
          Od;
        end;
  end;
  func УдалитьНарисованныеСекции  : Логическое;

    if ФреймШаблонаПолучателя = nil then
    Иначе
      if ФреймШаблонаПолучателя.SectionsCount=1 then
      Иначе
        Пока  КоличСекцНаФрейме < ФреймШаблонаПолучателя.SectionsCount ЦИКЛ
          ФреймШаблонаПолучателя.DeleteSection(ФреймШаблонаПолучателя.SectionsCount);
        end;
      end;
    end;

  end;
  func ВернутьВысотуСтрок     (var sec:section=nil) : integer;
    var j,i,f : integer;
    var Sect : TemplateSection;
      result = 0;
      if sec = nil then
        f = ФреймШаблонаПолучателя.SectionsCount;  --Текущий Фрейм
        for i = 1 .. f do
          Sect = ФреймШаблонаПолучателя.Section[i] ;
          for j = 1 .. Sect.rowscount do
            result = result + int(Sect.row[j].height);
          end;
        end;
      Иначе
        if sec.rowscount > 0 then
           for j = 1 .. sec.rowscount do
             result = result + int(sec.row[j].height);
           end;
        end;
      end;
  end;
  func ВернутьШиринуСтолбцов  (аСекция:section) : integer;
    var i :integer;
      result = 0;
      if аСекция.ColumnsCount > 0 then
         for i = 1 .. аСекция.ColumnsCount do
           result = result + int(аСекция.column[i].width);
         end;
      end;
  end;
  func Закрыть : integer;
        -- OpenBlank("ТабличныйБланк", Window.ModalWindow );
    var F: BlankForm;  -- BlankForm     Импорт_ТД.Импорт_ТД.блРедакторВыражений
    var Frame : TemplateFrame;
    var i : Integer;
    var Sec   2         0:2 0TemplateSection;

    F = БланкПриемник.Создать;
    КоличСекцНаФрейме = ФреймШаблонаПолучателя.SectionsCount;
    Frame = F.Template.FrameByName[мас2Области0[4,1]];   --.Секция[3].Имя

    БланкПриемник.template.BeginModify;

    for i=1..КоличСекцНаФрейме  do
      if КоличСекцНаФрейме = Frame.SectionsCount и КоличСекцНаФрейме=1 then
         if Frame.SectionsCount = 1 then
           Sec = Frame.Section[1];   --Template.CurrentFrame.Section[1]
  2      0   Sec2.Assign(0ФреймШаблонаПолучателя.Секция[i]2);     -- Копируем свойства секции
         end;
      Иначе
        Sec = Frame.AddSection;                           -- новая секция         Frame.SectionsCount
  2      0Sec2.Assign(0ФреймШаблонаПолучателя.Секция[i]2);     -- Копируем свойства секции
      end;
    Od;

    БланкПриемник.template.EndModify;

    if F.Выполнить = cmOK then
      Результат = 1 ;
    Иначе
      Результат = 0 ;
    end;
    F.секПриемник=Nil;
    F = Nil;

  end;
  func ВыводимОбласть         (2var locSec :Вариант=NIL ; 0Var  ii : integer=200) : integer;

      РисуемОбласть (2locSec,0 ii);

  end;
  func КомандаАПИ             (парам1:Строка) : integer;
    Перем Shell : AutoObject;
    Shell = AutoObject.Create("WScript.Shell");
    Shell.Run(парам1);
    --Исскуственно вводимая задержка, для того чтобы предыдущая команда успела завершить свое выполнение
    --и вывела выходные данные в файл, если это требуется (на сохранение файла необходимо порядка 30 мс)
    Shell = AutoObject.Create("WScript.Shell");
    Shell.Run("ping -n 1 -w 1000 1.1.1.1",0,-1);

  end;
  func ShellProperties: integer;
    --Получение параметров принтера и запись их в файл:
    --rundll32 printui.dll,PrintUIEntry /f "results.txt" /Xg /n "printer"
    Перем LabelPrinter :Строка;
        LabelPrinter = '"'+Printer.CurrentPrinter+'"';
        КомандаАПИ('rundll32 printui.dll,PrintUIEntry /f "c:\results.txt" /Xg /n '+ LabelPrinter+ ' '); --В Командной строке +++!!!
  end;

inobject
---
---
end