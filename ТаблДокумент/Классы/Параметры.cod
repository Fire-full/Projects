Class "Параметры"  ;
--
--Import           Classes ТабличныйДокумент;
--
inclass Public
--
  func Создать synonym Create :2 0Параметры;
       Result = inherited Create;
       Result.Init;
  end ;
--
--
inobject Public
--
--
  var Хозяин           Synonym Own   : Вариант;  -- Секция Прообраз для копирования свойств!!!
  var CurrentParameter               : integer;
  var СтруктураПолейЗаполнена        : Логическое;
  var НомерОбъекта                   : integer;
  var Имя                            : Строка;
--
  proc Init;
    CurrentParameter        = 0;
    СтруктураПолейЗаполнена = Ложь;
--    Хозяин                  = self.ParentClass ;  -- self.ClassInfo.Parent.Имя   Owner .Пар.Owner    Пар.ТипКласса.Значение
--      if Хозяин = nil then
--        Message("У класса:"+ Пар.ClassName + " нет родительского");    self.Own = Хозяин
--      fi;
    НомерОбъекта = self.ЧислоОбъектов;        --  self.Own.Имя
    Имя = "ПараметрЫ_" + Стр(НомерОбъекта);

  end ;

  func Количество      Synonym  Count (2var locSec :0 Вариант = nil) : integer ;
     Если 2locSec0 = nil Тогда
       Result = ДлинаМассива(Хозяин.масПоИменованныхПолей);
       СтруктураПолейЗаполнена = Истина;
     Иначе
       ЕСЛИ VarType(2locSec0) = varInt then
         Result = 2locSec0;
       Илсе;
     Илсе;
  end;

  func Получить      Synonym    Get (Var I : integer=0) : Вариант ;
     Result = Хозяин.масПоИменованныхПолей[I];
     Result = Хозяин.2ШаблонТекущМакета0.ТекущаяСекция.КлеткаПоПолю[Result].Contents ;
  end;

  func ИмяПоНомеру   Synonym    GetNByNum (Var I : integer=0) : Строка ;
     Result = Хозяин.масПоИменованныхПолей[I];
  end;

  func Установить    Synonym    Set (Парам : Вариант=Nil; 2loc0Var2 :0Вариант ) : Логическое ;
     Если   VarType(Парам) = varInt    Тогда     -- Индекс
         --масПоляСтруктур[2, Парам] = 2loc0Var;
     ЕслиЖе VarType(Парам) = varString Тогда     -- Имя Поля
        -- ЗаполнитьПараметр ( Парам,  2loc0Var);
--     ЕслиЖе VarType(2loc0Var) = varObject Тогда  -- Объект
--         ЗаполнитьПараметр ( Парам,  2loc0Var);
     Илсе;
      Result = Истина;
  end;

  func Заполнить     Synonym   Fill (2locSec :0Вариант;2 loc0Знач2 :0Вариант=Nil) : Логическое;

      ЗаполнитьПараметры  (2locSec0, 2loc0Знач);

--      RowsКолич    = 2Текущ0ая2Область0.RowsCount;
--      ColumnsКолич = 2Текущ0ая2Область0.ColumnsCount;
--      Sec          = 2Текущ0ая2Область0.Current;
--
--2      --Заполнение Значений в поля секции
--2      --Заполнение Значений в поля секции
--2      --Заполнение Значений в поля секции
--      for j=1.. RowsКолич  do                   2    0 2  0-- цикл по всем строкам секции "_ИСТОЧНИК."
--        for k=1.. ColumnsКолич do             2  0 2      0-- цикл по колонкам 2    0секции "_ИСТОЧНИК."
--          ThisCell   2    0= Sec.Cell           [k, j];  -- ПроОбраз
--          ThisTargetCell = получательSec.Cell [k, j];  -- Цель
--          if ThisCell.CellType = Ядро.Template.StaticText then
--            --Клетка не является полем!!!
--          Иначе
--            if ThisCell.CellType = Ядро.Template.CalcField then
--              if ThisCell.ReadOnly then
--  2              Проверка(0ThisCell.ReadOnly2, "Для Секции:'" + 0получательSec.2Имя + "', 0ThisTargetCell2[" + 0Str(k)2 + ":" + 0Str(j)2+ "] имеет свойство - ТОЛЬКО ДЛЯ ЧТЕНИЯ!");
--              Иначе
--            2    0ThisCell   2               0= Sec.Cell  [k,j];
--               2 0ThisTargetCell.Содержимое = ThisCell.Содержимое+"["+Str( ii )+"]"; -- Нпп[1]
--                ThisTargetCell.Text;
--              end;
--            end;
--          end;
--        Od;
--      Od;
2      --Заполнение Значений в поля секции
2      --Заполнение Значений в поля секции
2      --Заполнение Значений в поля секции

      Result = Истина;
  end;
--  Проц ЗаполнитьПараметр            (2var0 ИмяПоля: Вариант;  ЗначениеПоля: Вариант ) ;
--    var i        : Целое;
--    var x        : Целое;
--      IF VarType(ИмяПоля) = varString then
--          ИмяПоля = Up(ИмяПоля);
----        Если ИмяПоля="" Тогда
----        Иначе
--          i = SearchInArray ( масСоответствие[1], ИмяПоля);
--          Если i=-1 Тогда                                         -- Нет поля в массиве
--              x = ДлинаМассива(масПоляСтруктур[1])+1 ;
--              ВставитьВМассив (масПоляСтруктур[1], x , ИмяПоля);  -- Добавили поле и
--              масПоляСтруктур[2,x] = ЗначениеПоля ;               -- Заполняем значение
--          Иначе
--              масПоляСтруктур[2,I] = ЗначениеПоля ;               -- Затираем значение в массиве
--          end;
----        end;
--      Иначе
--        IF VarType(ИмяПоля) = varInt  then
--          CurrentParameter = ИмяПоля ;
--          ВставитьВМассив (масПоляСтруктур[1], CurrentParameter ,  CurrentParameter );
--          ВставитьВМассив (масПоляСтруктур[2], CurrentParameter ,  Если(ЗначениеПоля=nil, "", ЗначениеПоля));
--        end;
--      end;
--  Цорп;

  Проц ЗаполнитьПараметры           ( Данные: Вариант;2 loc0Знач2 :0Вариант=Nil);
    var I,x        : Целое;
    var Структ     : Структура;
    var Член       : Вариант;
    var ТМП        : Вариант[1];
    var ТМП2       : Вариант[2];

      IF Данные is Структура then      -- VarType(Данные)=6 (Объект)
        Структ = (Данные as Структура);
--        IF СтруктураПолейЗаполнена then   --Исключаю многократное заполнение массива однотипными данными!
--        Иначе
--          x     = Ядро.Структура.ClassInfo.MembersCount;
--          for I = x+1 .. Структ.ClassInfo.MembersCount do
--            Член = Структ.ClassInfo.Member[I];
--            IF Член is FieldInfo then      --Только имена полей!!
--              ВставитьВМассив (масПоляСтруктур[1], ДлинаМассива(масПоляСтруктур[1])+1, Up(Член.Name)); --ТипДвижения ДополнительныеПоля
--            Fi;
--          Od;
--        Fi;
--        Если масПоляСтруктур[1]=nil Тогда
--          СтруктураПолейЗаполнена = Ложь;
--        Иначе
--          СтруктураПолейЗаполнена = Истина;
--          for I = 1 .. ДлинаМассива(масПоляСтруктур[1]) do
--             масПоляСтруктур[2,I] = Данные.GetField(масПоляСтруктур[1,I]);
--          Od;
--          ДанныеПолейЗаполнены = Истина;
--        Илсе;
      ЕСЛИЖЕ VarType(Данные) = varString Тогда   --Имя поля

         Хозяин.2ШаблонТекущМакета0.ТекущаяСекция.КлеткаПоПолю[Данные].Value = 2loc0Знач;

      ЕСЛИЖЕ VarType(Данные) = varArray Тогда   --8 = Массив
        --Массив может быть ДВУМЕРНЫЙ:  Массив[1]-"ИмяПоля"  Массив[2]-"ЗначениеПоля"
--        масПоляСтруктур = Nil;
           if Данные is Variant[2] then
             ТМП2 = Данные as Вариант[2];
--             масПоляСтруктур[1] = ТМП2[1];
--             масПоляСтруктур[2] = ТМП2[2];
           Иначе
             ТМП  = Данные as Вариант[1];
             for I = 1 .. ДлинаМассива(ТМП) do
--               ВставитьВМассив (масПоляСтруктур[1], I, I);
             Od;
--             масПоляСтруктур[2] = ТМП;
           конец;
      ЕСЛИЖЕ Данные.ClassType = СтруктурЫ Тогда
          Данные = (Данные как СтруктурЫ);
          if Данные.ColumnsCount > 0 and
              Данные.RowsCount   > 0 then

            Пока Данные.Следующий Цикл
                Хозяин.2ШаблонТекущМакета0.ТекущаяСекция.КлеткаПоПолю[Данные.Имя].Contents = Данные.Значение; -- Хозяин.2ШаблонТекущМакета0.КлеткаПоПолю["#"+Данные.Имя]
            Лкиц;

          конец;

      Fi;
  Цорп;
-----------------------
end